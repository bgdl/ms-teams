"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var keyboardKey = require("keyboard-key");
var attributes_1 = require("../../attributes");
var treeTitleBehavior_1 = require("./treeTitleBehavior");
/**
 * @specification
 * Adds attribute 'aria-expanded=true' based on the property 'expanded' if the component has 'hasSubtree' property.
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is true. Does not set the attribute otherwise.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property.
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property.
 * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property.
 * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is true. Sets the attribute to 'none' otherwise.
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 * Triggers 'expandSiblings' action with '*' on 'root'.
 * Triggers 'focusParent' action with 'ArrowLeft' on 'root', when has a closed subtree.
 * Triggers 'collapse' action with 'ArrowLeft' on 'root', when has an opened subtree.
 * Triggers 'expand' action with 'ArrowRight' on 'root', when has a closed subtree.
 * Triggers 'focusFirstChild' action with 'ArrowRight' on 'root', when has an opened subtree.
 */
var treeItemBehavior = function (props) {
    var _a;
    return ({
        attributes: {
            root: tslib_1.__assign({ role: 'none' }, (props.hasSubtree && (_a = {
                    'aria-expanded': props.expanded,
                    tabIndex: -1
                },
                _a[attributes_1.IS_FOCUSABLE_ATTRIBUTE] = true,
                _a.role = 'treeitem',
                _a['aria-setsize'] = props.treeSize,
                _a['aria-posinset'] = props.index,
                _a['aria-level'] = props.level,
                _a))),
        },
        keyActions: {
            root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ performClick: {
                    keyCombinations: [{ keyCode: keyboardKey.Enter }, { keyCode: keyboardKey.Spacebar }],
                } }, (isSubtreeExpanded(props) && {
                collapse: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],
                },
                focusFirstChild: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],
                },
            })), (!isSubtreeExpanded(props) && {
                expand: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowRight }],
                },
                focusParent: {
                    keyCombinations: [{ keyCode: keyboardKey.ArrowLeft }],
                },
            })), { expandSiblings: {
                    keyCombinations: [{ keyCode: keyboardKey['*'] }],
                } }),
        },
        childBehaviors: {
            title: treeTitleBehavior_1.default,
        },
    });
};
/** Checks if current tree item has a subtree and it is expanded */
var isSubtreeExpanded = function (props) {
    var hasSubtree = props.hasSubtree, expanded = props.expanded;
    return !!(hasSubtree && expanded);
};
exports.default = treeItemBehavior;
