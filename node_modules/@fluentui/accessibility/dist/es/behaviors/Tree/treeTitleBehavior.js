import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import * as keyboardKey from 'keyboard-key';
import { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';

/**
 * @specification
 * Adds attribute 'tabIndex=-1' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'role=treeitem' to 'root' slot if 'hasSubtree' property is false or undefined. Does not set the attribute if true.
 * Adds attribute 'aria-setsize=3' based on the property 'treeSize' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-posinset=2' based on the property 'index' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Adds attribute 'aria-level=1' based on the property 'level' if the component has 'hasSubtree' property false or undefined. Does not set anything if true..
 * Triggers 'performClick' action with 'Enter' or 'Spacebar' on 'root'.
 */
var treeTitleBehavior = function treeTitleBehavior(props) {
  var _ref;

  return {
    attributes: {
      root: Object.assign({}, !props.hasSubtree && (_ref = {
        tabIndex: -1
      }, _defineProperty(_ref, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_ref, "role", 'treeitem'), _defineProperty(_ref, 'aria-setsize', props.treeSize), _defineProperty(_ref, 'aria-posinset', props.index), _defineProperty(_ref, 'aria-level', props.level), _ref))
    },
    keyActions: {
      root: {
        performClick: {
          keyCombinations: [{
            keyCode: keyboardKey.Enter
          }, {
            keyCode: keyboardKey.Spacebar
          }]
        }
      }
    }
  };
};

export default treeTitleBehavior;
//# sourceMappingURL=treeTitleBehavior.js.map
