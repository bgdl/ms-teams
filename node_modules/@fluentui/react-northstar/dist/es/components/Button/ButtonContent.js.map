{"version":3,"sources":["components/Button/ButtonContent.tsx"],"names":["React","useStyles","useTelemetry","getElementType","useUnhandledProps","customPropTypes","ThemeContext","childrenExist","commonPropTypes","createShorthandFactory","rtlTextContainer","withSafeTypeForAs","ButtonContent","props","context","useContext","displayName","telemetry","setStart","setEnd","size","content","children","className","styles","variables","design","mapPropsToStyles","mapPropsToInlineStyles","rtl","classes","ElementType","unhandledProps","handledProps","result","getAttributes","forElements","root","propTypes","createCommon","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useStyles, useTelemetry, getElementType, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { BoxProps } from '../Box/Box';\nimport { ButtonProps } from './Button';\n\nexport interface ButtonContentProps extends BoxProps {\n  size?: ButtonProps['size'];\n}\n\nexport type ButtonContentStylesProps = Pick<ButtonContentProps, 'size'>;\n\nconst ButtonContent: React.FC<WithAsProp<ButtonContentProps>> &\n  FluentComponentStaticProps<ButtonContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ButtonContent.displayName, context.telemetry);\n  setStart();\n\n  const { size, content, children, className, styles, variables, design } = props;\n\n  const { classes } = useStyles<ButtonContentStylesProps>(ButtonContent.displayName, {\n    className: ButtonContent.className,\n    mapPropsToStyles: () => ({ size }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ButtonContent.handledProps, props);\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nButtonContent.displayName = 'ButtonContent';\nButtonContent.className = 'ui-button__content';\n\nButtonContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  size: customPropTypes.size,\n};\n\nButtonContent.handledProps = Object.keys(ButtonContent.propTypes) as any;\n\nButtonContent.create = createShorthandFactory({\n  Component: ButtonContent,\n  mappedProp: 'content',\n});\n\n/**\n * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport default withSafeTypeForAs<typeof ButtonContent, ButtonContentProps>(ButtonContent);\n"],"file":"ButtonContent.js"}