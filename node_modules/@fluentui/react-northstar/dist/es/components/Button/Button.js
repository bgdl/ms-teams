import _extends from "@babel/runtime/helpers/esm/extends";
import _invoke from "lodash/invoke";
import { buttonBehavior } from '@fluentui/accessibility';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import Box from '../Box/Box';
import Loader from '../Loader/Loader';
import { withSafeTypeForAs } from '../../types';
import ButtonGroup from './ButtonGroup';
import ButtonContent from './ButtonContent';
import { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings'; // @ts-ignore

import { ThemeContext } from 'react-fela';

var Button = function Button(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Button.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      active = props.active,
      as = props.as,
      children = props.children,
      content = props.content,
      icon = props.icon,
      loader = props.loader,
      disabled = props.disabled,
      iconPosition = props.iconPosition,
      loading = props.loading,
      text = props.text,
      primary = props.primary,
      inverted = props.inverted,
      size = props.size,
      iconOnly = props.iconOnly,
      fluid = props.fluid,
      circular = props.circular,
      className = props.className,
      styles = props.styles,
      variables = props.variables,
      design = props.design;
  var hasChildren = childrenExist(children);
  var getA11Props = useAccessibility(accessibility, {
    debugName: Button.displayName,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        as: as,
        active: active,
        disabled: disabled,
        loading: loading
      };
    },
    actionHandlers: {
      performClick: function performClick(event) {
        event.preventDefault();
        handleClick(event);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(Button.displayName, {
    className: Button.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        text: text,
        primary: primary,
        disabled: disabled,
        circular: circular,
        size: size,
        loading: loading,
        inverted: inverted,
        iconOnly: iconOnly,
        iconPosition: iconPosition,
        fluid: fluid,
        hasContent: !!content
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var unhandledProps = useUnhandledProps(Button.handledProps, props);
  var ElementType = getElementType(props);

  var renderIcon = function renderIcon() {
    return Box.create(icon, {
      defaultProps: function defaultProps() {
        return getA11Props('icon', {
          styles: resolvedStyles.icon
        });
      }
    });
  };

  var renderLoader = function renderLoader() {
    return Loader.create(loader || {}, {
      defaultProps: function defaultProps() {
        return getA11Props('loader', {
          role: undefined,
          styles: resolvedStyles.loader
        });
      }
    });
  };

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    _invoke(props, 'onClick', e, props);
  };

  var handleFocus = function handleFocus(e) {
    _invoke(props, 'onFocus', e, props);
  };

  var result = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
    forElements: [children]
  }), getA11Props('root', Object.assign({
    onClick: handleClick,
    disabled: disabled,
    className: classes.root,
    onFocus: handleFocus
  }, unhandledProps))), hasChildren ? children : React.createElement(React.Fragment, null, loading && renderLoader(), iconPosition !== 'after' && renderIcon(), ButtonContent.create(content, {
    defaultProps: function defaultProps() {
      return getA11Props('content', {
        as: 'span',
        size: size,
        styles: resolvedStyles.content
      });
    }
  }), iconPosition === 'after' && renderIcon()));
  setEnd();
  return result;
};

Button.defaultProps = {
  as: 'button',
  accessibility: buttonBehavior,
  size: 'medium'
};
Button.displayName = 'Button';
Button.className = 'ui-button';
Button.propTypes = Object.assign({}, commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  circular: PropTypes.bool,
  disabled: PropTypes.bool,
  fluid: PropTypes.bool,
  icon: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  iconPosition: PropTypes.oneOf(['before', 'after']),
  inverted: PropTypes.bool,
  loader: customPropTypes.itemShorthandWithoutJSX,
  loading: PropTypes.bool,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  text: PropTypes.bool,
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  size: customPropTypes.size
});
Button.handledProps = Object.keys(Button.propTypes);
Button.Group = ButtonGroup;
Button.Content = ButtonContent;
Button.create = createShorthandFactory({
  Component: Button,
  mappedProp: 'content'
});
/**
 * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */

export default withSafeTypeForAs(Button);
//# sourceMappingURL=Button.js.map
