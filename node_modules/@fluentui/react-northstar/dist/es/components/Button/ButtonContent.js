import _extends from "@babel/runtime/helpers/esm/extends";
import * as React from 'react';
import { useStyles, useTelemetry, getElementType, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';
import { withSafeTypeForAs } from '../../types';

var ButtonContent = function ButtonContent(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(ButtonContent.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var size = props.size,
      content = props.content,
      children = props.children,
      className = props.className,
      styles = props.styles,
      variables = props.variables,
      design = props.design;

  var _useStyles = useStyles(ButtonContent.displayName, {
    className: ButtonContent.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        size: size
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        styles: styles,
        variables: variables,
        design: design
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(ButtonContent.handledProps, props);
  var result = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {
    className: classes.root
  }, unhandledProps), childrenExist(children) ? children : content);
  setEnd();
  return result;
};

ButtonContent.displayName = 'ButtonContent';
ButtonContent.className = 'ui-button__content';
ButtonContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  size: customPropTypes.size
});
ButtonContent.handledProps = Object.keys(ButtonContent.propTypes);
ButtonContent.create = createShorthandFactory({
  Component: ButtonContent,
  mappedProp: 'content'
});
/**
 * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.
 */

export default withSafeTypeForAs(ButtonContent);
//# sourceMappingURL=ButtonContent.js.map
