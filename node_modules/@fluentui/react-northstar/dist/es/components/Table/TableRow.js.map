{"version":3,"sources":["components/Table/TableRow.tsx"],"names":["customPropTypes","Ref","PropTypes","React","TableCell","UIComponent","commonPropTypes","createShorthandFactory","applyAccessibilityKeyHandlers","childrenExist","withSafeTypeForAs","tableRowBehavior","mergeComponentVariables","handleVariablesOverrides","variables","predefinedProps","TableRow","createRef","unsetRowTabbable","e","rowRef","current","setAttribute","performClick","handleClick","currentTarget","target","props","preventDefault","accessibility","items","cellAccessibility","childBehaviors","cell","undefined","item","index","cellProps","overrideProps","create","defaultProps","ElementType","classes","unhandledProps","children","hasChildren","root","attributes","keyHandlers","renderCells","createCommon","content","every","disallow","oneOfType","arrayOf","nodeContent","collectionShorthand","header","bool","compact","selected","Component","mappedArrayProp"],"mappings":";;;;;;;;;;AACA,OAAO,KAAKA,eAAZ,MAAiC,2BAAjC;AACA,SAASC,GAAT,QAAoB,+BAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAA0C,aAA1C;AACA,SACEC,WADF,EAIEC,eAJF,EAMEC,sBANF,EAOEC,6BAPF,EAQEC,aARF,QASO,aATP;AAUA,SAA0CC,iBAA1C,QAAmE,aAAnE;AACA,SAAwBC,gBAAxB,QAAgD,yBAAhD;AACA,SAAmCC,uBAAnC,QAAkE,kBAAlE;;AA6BA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,SAAS;AAAA,SAAI,UAAAC,eAAe;AAAA,WAAK;AAChED,MAAAA,SAAS,EAAEF,uBAAuB,CAACE,SAAD,EAAYC,eAAe,CAACD,SAA5B;AAD8B,KAAL;AAAA,GAAnB;AAAA,CAA1C;;IAIME,Q;;;;;;;;;;;;;;;;;;6DAyBKb,KAAK,CAACc,SAAN,E;;qEAEQ;AACf;AACAC,MAAAA,gBAAgB,EAAE,0BAAAC,CAAC,EAAI;AACrB,cAAKC,MAAL,CAAYC,OAAZ,CAAoBC,YAApB,CAAiC,UAAjC,EAA6C,IAA7C;AACD,OAJc;AAKfC,MAAAA,YAAY,EAAE,sBAAAJ,CAAC,EAAI;AACjB,cAAKK,WAAL,CAAiBL,CAAjB;AACD;AAPc,K;;kEAUH,UAACA,CAAD,EAA6B;AACzC,UAAIA,CAAC,CAACM,aAAF,KAAoBN,CAAC,CAACO,MAA1B,EAAkC;AAChC,gBAAS,MAAKC,KAAd,EAAqB,SAArB,EAAgCR,CAAhC,EAAmC,MAAKQ,KAAxC;;AACAR,QAAAA,CAAC,CAACS,cAAF;AACD;AACF,K;;;;;;;gCAEWC,a,EAA2Cf,S,EAAqC;AAAA,UAClFgB,KADkF,GACxE,KAAKH,KADmE,CAClFG,KADkF;AAG1F,UAAMC,iBAAiB,GAAGF,aAAa,CAACG,cAAd,GAA+BH,aAAa,CAACG,cAAd,CAA6BC,IAA5D,GAAmEC,SAA7F;AAEA,aAAO,KAAMJ,KAAN,EAAa,UAACK,IAAD,EAAuBC,KAAvB,EAAyC;AAC3D,YAAMC,SAAS,GAAG;AAChBR,UAAAA,aAAa,EAAEE;AADC,SAAlB;AAGA,YAAMO,aAAa,GAAGzB,wBAAwB,CAACC,SAAD,CAA9C;AAEA,eAAOV,SAAS,CAACmC,MAAV,CAAiBJ,IAAjB,EAAuB;AAC5BK,UAAAA,YAAY,EAAE;AAAA,mBAAMH,SAAN;AAAA,WADc;AAE5BC,UAAAA,aAAa,EAAbA;AAF4B,SAAvB,CAAP;AAID,OAVM,CAAP;AAWD;;;0CAQ4C;AAAA,UAL3CT,aAK2C,QAL3CA,aAK2C;AAAA,UAJ3CY,WAI2C,QAJ3CA,WAI2C;AAAA,UAH3CC,OAG2C,QAH3CA,OAG2C;AAAA,UAF3C5B,SAE2C,QAF3CA,SAE2C;AAAA,UAD3C6B,cAC2C,QAD3CA,cAC2C;AAAA,UACnCC,QADmC,GACtB,KAAKjB,KADiB,CACnCiB,QADmC;AAE3C,UAAMC,WAAW,GAAGpC,aAAa,CAACmC,QAAD,CAAjC;AAEA,aACE,oBAAC,GAAD;AAAK,QAAA,QAAQ,EAAE,KAAKxB;AAApB,SACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAEsB,OAAO,CAACI,IADrB;AAEE,QAAA,OAAO,EAAE,KAAKtB;AAFhB,SAGMK,aAAa,CAACkB,UAAd,CAAyBD,IAH/B,EAIMH,cAJN,EAKMnC,6BAA6B,CAACqB,aAAa,CAACmB,WAAd,CAA0BF,IAA3B,EAAiCH,cAAjC,CALnC,GAOGE,WAAW,IAAID,QAPlB,EAQG,CAACC,WAAD,IAAgB,KAAKI,WAAL,CAAiBpB,aAAjB,EAAgCf,SAAhC,CARnB,CADF,CADF;AAcD;;;;EAtFoBT,W;;gBAAjBW,Q,iBACiB,U;;gBADjBA,Q,eAGe,e;;gBAHfA,Q;;gBAAAA,Q,iCAQCV,eAAe,CAAC4C,YAAhB,CAA6B;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHA,EAAAA,OAAO,EAAEnD,eAAe,CAACoD,KAAhB,CAAsB,CAC7BpD,eAAe,CAACqD,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAD6B,EAE7BnD,SAAS,CAACoD,SAAV,CAAoB,CAACpD,SAAS,CAACqD,OAAV,CAAkBvD,eAAe,CAACwD,WAAlC,CAAD,EAAiDxD,eAAe,CAACwD,WAAjE,CAApB,CAF6B,CAAtB,C;AAIT1B,EAAAA,KAAK,EAAE9B,eAAe,CAACyD,mB;AACvBC,EAAAA,MAAM,EAAExD,SAAS,CAACyD,I;AAClBC,EAAAA,OAAO,EAAE1D,SAAS,CAACyD,I;AACnBE,EAAAA,QAAQ,EAAE3D,SAAS,CAACyD;;;gBAlBlB3C,Q,kBAqBkB;AACpBa,EAAAA,aAAa,EAAElB;AADK,C;;AAoExBK,QAAQ,CAACuB,MAAT,GAAkBhC,sBAAsB,CAAC;AAAEuD,EAAAA,SAAS,EAAE9C,QAAb;AAAuB+C,EAAAA,eAAe,EAAE;AAAxC,CAAD,CAAxC;AAEA;;;;AAGA,eAAerD,iBAAiB,CAAwCM,QAAxC,CAAhC","sourcesContent":["import { ReactAccessibilityBehavior } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport TableCell, { TableCellProps } from './TableCell';\nimport {\n  UIComponent,\n  RenderResultConfig,\n  UIComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n  createShorthandFactory,\n  applyAccessibilityKeyHandlers,\n  childrenExist,\n} from '../../utils';\nimport { ShorthandCollection, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { Accessibility, tableRowBehavior } from '@fluentui/accessibility';\nimport { ComponentVariablesObject, mergeComponentVariables } from '@fluentui/styles';\n\nexport interface TableRowProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility;\n\n  /**\n   * Row cells\n   */\n  items?: ShorthandCollection<TableCellProps>;\n\n  /**\n   * Is the row a table header\n   */\n  header?: boolean;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * Whether a row is currently selected or not.\n   */\n  selected?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nclass TableRow extends UIComponent<WithAsProp<TableRowProps>> {\n  static displayName = 'TableRow';\n\n  static className = 'ui-table__row';\n\n  static create: ShorthandFactory<TableRowProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    content: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n    ]),\n    items: customPropTypes.collectionShorthand,\n    header: PropTypes.bool,\n    compact: PropTypes.bool,\n    selected: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: tableRowBehavior as Accessibility,\n  };\n\n  rowRef = React.createRef<HTMLElement>();\n\n  actionHandlers = {\n    // https://github.com/microsoft/fluent-ui-react/issues/2150\n    unsetRowTabbable: e => {\n      this.rowRef.current.setAttribute('tabindex', '-1');\n    },\n    performClick: e => {\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = (e: React.SyntheticEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(this.props, 'onClick', e, this.props);\n      e.preventDefault();\n    }\n  };\n\n  renderCells(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { items } = this.props;\n\n    const cellAccessibility = accessibility.childBehaviors ? accessibility.childBehaviors.cell : undefined;\n\n    return _.map(items, (item: TableCellProps, index: number) => {\n      const cellProps = {\n        accessibility: cellAccessibility as Accessibility,\n      };\n      const overrideProps = handleVariablesOverrides(variables);\n\n      return TableCell.create(item, {\n        defaultProps: () => cellProps,\n        overrideProps,\n      });\n    });\n  }\n\n  renderComponent({\n    accessibility,\n    ElementType,\n    classes,\n    variables,\n    unhandledProps,\n  }: RenderResultConfig<any>): React.ReactNode {\n    const { children } = this.props;\n    const hasChildren = childrenExist(children);\n\n    return (\n      <Ref innerRef={this.rowRef}>\n        <ElementType\n          className={classes.root}\n          onClick={this.handleClick}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {hasChildren && children}\n          {!hasChildren && this.renderCells(accessibility, variables)}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nTableRow.create = createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });\n\n/**\n * Component represents a single row in a tabular structure\n */\nexport default withSafeTypeForAs<typeof TableRow, TableRowProps, 'div'>(TableRow);\n"],"file":"TableRow.js"}