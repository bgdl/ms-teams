{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["React","PropTypes","childrenExist","createShorthandFactory","UIComponent","commonPropTypes","rtlTextContainer","withSafeTypeForAs","Divider","accessibility","ElementType","classes","unhandledProps","props","children","content","getAttributes","forElements","attributes","root","createCommon","color","fitted","bool","size","number","important","vertical","create","Component","mappedProp"],"mappings":";;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AAEA,SACEC,aADF,EAEEC,sBAFF,EAGEC,WAHF,EAQEC,eARF,EASEC,gBATF,QAWO,aAXP;AAaA,SAAqBC,iBAArB,QAA8C,aAA9C;;IAyBMC,O;;;;;;;;;;;;;0CAmBqE;AAAA,UAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBACzC,KAAKC,KADoC;AAAA,UAC/DC,QAD+D,eAC/DA,QAD+D;AAAA,UACrDC,OADqD,eACrDA,OADqD;AAGvE,aACE,oBAAC,WAAD,eACMT,gBAAgB,CAACU,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACH,QAAD,EAAWC,OAAX;AAAf,OAA/B,CADN,EAEMN,aAAa,CAACS,UAAd,CAAyBC,IAF/B,EAGMP,cAHN;AAIE,QAAA,SAAS,EAAED,OAAO,CAACQ;AAJrB,UAMGjB,aAAa,CAACY,QAAD,CAAb,GAA0BA,QAA1B,GAAqCC,OANxC,CADF;AAUD;;;;EAhCmBX,W;;gBAAhBI,O,iBACiB,S;;gBADjBA,O;;gBAAAA,O,eAKe,Y;;gBALfA,O,iCAQCH,eAAe,CAACe,YAAhB,CAA6B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7B,C;AACHC,EAAAA,MAAM,EAAErB,SAAS,CAACsB,I;AAClBC,EAAAA,IAAI,EAAEvB,SAAS,CAACwB,M;AAChBC,EAAAA,SAAS,EAAEzB,SAAS,CAACsB,I;AACrBI,EAAAA,QAAQ,EAAE1B,SAAS,CAACsB;;;gBAZlBf,O,kBAekB;AACpBgB,EAAAA,IAAI,EAAE;AADc,C;;AAoBxBhB,OAAO,CAACoB,MAAR,GAAiBzB,sBAAsB,CAAC;AAAE0B,EAAAA,SAAS,EAAErB,OAAb;AAAsBsB,EAAAA,UAAU,EAAE;AAAlC,CAAD,CAAvC;AAEA;;;;AAGA,eAAevB,iBAAiB,CAA+BC,OAA/B,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nclass Divider extends UIComponent<WithAsProp<DividerProps>, any> {\n  static displayName = 'Divider';\n\n  static create: ShorthandFactory<DividerProps>;\n\n  static className = 'ui-divider';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ color: true }),\n    fitted: PropTypes.bool,\n    size: PropTypes.number,\n    important: PropTypes.bool,\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    size: 0,\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n}\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"],"file":"Divider.js"}