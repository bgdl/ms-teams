import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import _noop from "lodash/noop";
import { accordionTitleBehavior, indicatorBehavior } from '@fluentui/accessibility';
import { Ref } from '@fluentui/react-component-ref';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react';
import { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';

var AccordionTitle =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(AccordionTitle, _UIComponent);

  function AccordionTitle() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AccordionTitle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();

        _this.handleClick(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      if (!_this.props.disabled) {
        _invoke(_this.props, 'onClick', e, _this.props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      e.stopPropagation();

      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleWrapperOverrides", function (predefinedProps) {
      return {
        onFocus: function onFocus(e) {
          _this.handleFocus(e);

          _invoke(predefinedProps, 'onFocus', e, _this.props);
        },
        onClick: function onClick(e) {
          _this.handleClick(e);

          _invoke(predefinedProps, 'onClick', e, _this.props);
        }
      };
    });

    return _this;
  }

  _createClass(AccordionTitle, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          contentRef = _this$props.contentRef,
          children = _this$props.children,
          content = _this$props.content,
          indicator = _this$props.indicator,
          contentWrapper = _this$props.contentWrapper;
      var contentWrapperElement = React.createElement(Ref, {
        innerRef: contentRef
      }, Box.create(contentWrapper, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: AccordionTitle.slotClassNames.contentWrapper,
            styles: styles.contentWrapper
          }, accessibility.attributes.content, {}, applyAccessibilityKeyHandlers(accessibility.keyHandlers.content, unhandledProps));
        },
        overrideProps: function overrideProps(predefinedProps) {
          return Object.assign({
            children: React.createElement(React.Fragment, null, Box.create(indicator, {
              defaultProps: function defaultProps() {
                return {
                  styles: styles.indicator,
                  accessibility: indicatorBehavior
                };
              }
            }), Box.create(content, {
              defaultProps: function defaultProps() {
                return {
                  as: 'span',
                  styles: styles.content
                };
              }
            }))
          }, _this2.handleWrapperOverrides(predefinedProps));
        }
      }));
      return React.createElement(ElementType, _extends({
        className: classes.root
      }, rtlTextContainer.getAttributes({
        forElements: [children]
      }), accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : contentWrapperElement);
    }
  }]);

  return AccordionTitle;
}(UIComponent);

_defineProperty(AccordionTitle, "displayName", 'AccordionTitle');

_defineProperty(AccordionTitle, "create", void 0);

_defineProperty(AccordionTitle, "className", 'ui-accordion__title');

_defineProperty(AccordionTitle, "slotClassNames", void 0);

_defineProperty(AccordionTitle, "propTypes", Object.assign({}, commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  accordionContentId: PropTypes.string,
  active: PropTypes.bool,
  contentRef: customPropTypes.ref,
  contentWrapper: customPropTypes.wrapperShorthand,
  canBeCollapsed: PropTypes.bool,
  disabled: PropTypes.bool,
  index: PropTypes.number,
  onClick: PropTypes.func,
  indicator: customPropTypes.shorthandAllowingChildren
}));

_defineProperty(AccordionTitle, "defaultProps", {
  accessibility: accordionTitleBehavior,
  as: 'dt',
  contentRef: _noop,
  indicator: {},
  contentWrapper: {}
});

AccordionTitle.create = createShorthandFactory({
  Component: AccordionTitle,
  mappedProp: 'content'
});
AccordionTitle.slotClassNames = {
  contentWrapper: "".concat(AccordionTitle.className, "__content-wrapper")
};
/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */

export default withSafeTypeForAs(AccordionTitle);
//# sourceMappingURL=AccordionTitle.js.map
