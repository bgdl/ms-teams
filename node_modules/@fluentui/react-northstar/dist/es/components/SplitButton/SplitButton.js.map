{"version":3,"sources":["components/SplitButton/SplitButton.tsx"],"names":["splitButtonBehavior","customPropTypes","PropTypes","React","ALIGNMENTS","POSITIONS","withSafeTypeForAs","isFromKeyboard","commonPropTypes","AutoControlledComponent","SplitButtonToggle","Button","MenuButton","Ref","SplitButton","createRef","predefinedProps","onMenuItemClick","e","menuItemProps","setState","open","props","onOpenChange","popupProps","stopPropagation","onClick","buttonProps","onFocus","ElementType","classes","accessibility","styles","unhandledProps","button","disabled","menu","primary","secondary","toggleButton","size","position","align","flipBoundary","overflowBoundary","positionFixed","offset","unstable_pinned","trigger","create","defaultProps","menuButton","overrideProps","handleMenuButtonTriggerOverrides","targetRef","root","attributes","childBehaviors","undefined","on","state","target","current","handleMenuButtonOverrides","createCommon","content","itemShorthand","defaultOpen","bool","oneOfType","arrayOf","itemShorthandWithoutJSX","onMainButtonClick","func","every","disallow","oneOf","object","string"],"mappings":"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","sourcesContent":["import { Accessibility, splitButtonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { WithAsProp, withSafeTypeForAs, ComponentEventHandler, ShorthandValue, ShorthandCollection } from '../../types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  isFromKeyboard,\n  commonPropTypes,\n  AutoControlledComponent,\n  RenderResultConfig,\n  ShorthandFactory,\n  SizeValue,\n} from '../../utils';\nimport SplitButtonToggle, { SplitButtonToggleProps } from './SplitButtonToggle';\nimport Button, { ButtonProps } from '../Button/Button';\nimport MenuButton, { MenuButtonProps } from '../MenuButton/MenuButton';\nimport { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PopupProps } from '../Popup/Popup';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { PositioningProps } from '../../utils/positioner/types';\n\nexport interface SplitButtonProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** Shorthand for the main button. */\n  button?: ShorthandValue<ButtonProps>;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** A split button can be disabled. */\n  disabled?: boolean;\n\n  /** Shorthand for the menu. */\n  menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;\n\n  /**\n   * Called after user's click on the main button.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMainButtonClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after user's click on a menu item.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMenuItemClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<SplitButtonProps>;\n\n  /** Defines whether menu is displayed. */\n  open?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  secondary?: boolean;\n\n  /** A split button can be sized */\n  size?: SizeValue;\n\n  /** Shorthand for the toggle button. */\n  toggleButton?: ShorthandValue<SplitButtonToggleProps>;\n}\n\nexport interface SplitButtonState {\n  isFromKeyboard: boolean;\n  open: boolean;\n}\n\nclass SplitButton extends AutoControlledComponent<WithAsProp<SplitButtonProps>, SplitButtonState> {\n  static create: ShorthandFactory<SplitButton>;\n\n  static displayName = 'SplitButton';\n\n  static Toggle = SplitButtonToggle;\n\n  static className = 'ui-splitbutton';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    button: customPropTypes.itemShorthand,\n    defaultOpen: PropTypes.bool,\n    menu: PropTypes.oneOfType([\n      customPropTypes.itemShorthand,\n      PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),\n    ]),\n    onMainButtonClick: PropTypes.func,\n    onMenuItemClick: PropTypes.func,\n    onOpenChange: PropTypes.func,\n    open: PropTypes.bool,\n    size: customPropTypes.size,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    toggleButton: customPropTypes.itemShorthand,\n    position: PropTypes.oneOf(POSITIONS),\n    align: PropTypes.oneOf(ALIGNMENTS),\n    flipBoundary: PropTypes.oneOfType([\n      PropTypes.object as PropTypes.Requireable<Element>,\n      PropTypes.oneOf<'scrollParent' | 'window' | 'viewport'>(['scrollParent', 'window', 'viewport']),\n    ]),\n    overflowBoundary: PropTypes.oneOfType([\n      PropTypes.object as PropTypes.Requireable<Element>,\n      PropTypes.oneOf<'scrollParent' | 'window' | 'viewport'>(['scrollParent', 'window', 'viewport']),\n    ]),\n    positionFixed: PropTypes.bool,\n    offset: PropTypes.string,\n    unstable_pinned: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: splitButtonBehavior,\n    toggleButton: {},\n    position: 'below',\n    align: 'start',\n  };\n\n  static autoControlledProps = ['open'];\n\n  targetRef = React.createRef<HTMLDivElement>();\n\n  getInitialAutoControlledState(): SplitButtonState {\n    return {\n      isFromKeyboard: false,\n      open: false,\n    };\n  }\n\n  handleMenuButtonOverrides = (predefinedProps: MenuButtonProps) => ({\n    onMenuItemClick: (e: React.SyntheticEvent, menuItemProps: MenuItemProps) => {\n      this.setState({ open: false });\n      _.invoke(this.props, 'onOpenChange', e, { ...this.props, open: false });\n\n      _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n      _.invoke(this.props, 'onMenuItemClick', e, menuItemProps);\n    },\n    onOpenChange: (e: React.SyntheticEvent, popupProps: PopupProps) => {\n      e.stopPropagation();\n      this.setState({ open: popupProps.open });\n      _.invoke(this.props, 'onOpenChange', e, { ...this.props, open: popupProps.open });\n    },\n  });\n\n  handleMenuButtonTriggerOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(this.props, 'onMainButtonClick', e, buttonProps);\n    },\n    onFocus: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, buttonProps);\n      this.setState({ isFromKeyboard: isFromKeyboard() });\n    },\n  });\n\n  renderComponent({\n    ElementType,\n    classes,\n    accessibility,\n    styles,\n    unhandledProps,\n  }: RenderResultConfig<MenuButtonProps>): React.ReactNode {\n    const {\n      button,\n      disabled,\n      menu,\n      primary,\n      secondary,\n      toggleButton,\n      size,\n      position,\n      align,\n      flipBoundary,\n      overflowBoundary,\n      positionFixed,\n      offset,\n      unstable_pinned,\n    } = this.props;\n    const trigger = Button.create(button, {\n      defaultProps: () => ({\n        styles: styles.menuButton,\n        primary,\n        secondary,\n        disabled,\n      }),\n      overrideProps: this.handleMenuButtonTriggerOverrides,\n    });\n\n    return (\n      <Ref innerRef={this.targetRef}>\n        <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n          {MenuButton.create(\n            {},\n            {\n              defaultProps: () => ({\n                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,\n                menu,\n                // Opening is handled manually.\n                on: [],\n                open: this.state.open,\n                trigger,\n                target: this.targetRef.current,\n                position,\n                align,\n                flipBoundary,\n                overflowBoundary,\n                positionFixed,\n                offset,\n                unstable_pinned,\n              }),\n              overrideProps: this.handleMenuButtonOverrides,\n            },\n          )}\n\n          {SplitButtonToggle.create(toggleButton, {\n            defaultProps: () => ({\n              disabled,\n              primary,\n              secondary,\n              size,\n              ...accessibility.attributes.toggleButton,\n            }),\n            overrideProps: (predefinedProps: ButtonProps) => ({\n              onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n                _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n                this.setState(state => {\n                  const open = !state.open;\n                  _.invoke(this.props, 'onOpenChange', e, { ...this.props, open });\n                  return { open };\n                });\n              },\n            }),\n          })}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\nexport default withSafeTypeForAs<typeof SplitButton, SplitButtonProps>(SplitButton);\n"],"file":"SplitButton.js"}