{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","mergeComponentVariables","ThemeContext","React","withSafeTypeForAs","createShorthandFactory","commonPropTypes","ToolbarVariablesContext","ToolbarDivider","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","Object","keys","create","Component","mappedProp"],"mappings":"AACA,SAASA,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,EAA8DC,SAA9D,EAAyEC,YAAzE,QAA6F,0BAA7F;AACA,SAASC,uBAAT,QAAwC,kBAAxC,C,CACA;;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAA0EC,iBAA1E,QAAmG,aAAnG;AACA,SAGEC,sBAHF,EAKEC,eALF,QAMO,aANP;AAOA,SAASC,uBAAT,QAAwC,2BAAxC;;AAWA,IAAMC,cAC2C,GAAG,SAD9CA,cAC8C,CAAAC,KAAK,EAAI;AAC3D,MAAMC,OAAgC,GAAGP,KAAK,CAACQ,UAAN,CAAiBT,YAAjB,CAAzC;;AAD2D,sBAE9BF,YAAY,CAACQ,cAAc,CAACI,WAAhB,EAA6BF,OAAO,CAACG,SAArC,CAFkB;AAAA,MAEnDC,QAFmD,iBAEnDA,QAFmD;AAAA,MAEzCC,MAFyC,iBAEzCA,MAFyC;;AAG3DD,EAAAA,QAAQ;AAHmD,MAKnDE,aALmD,GAKKP,KALL,CAKnDO,aALmD;AAAA,MAKpCC,SALoC,GAKKR,KALL,CAKpCQ,SALoC;AAAA,MAKzBC,MALyB,GAKKT,KALL,CAKzBS,MALyB;AAAA,MAKjBC,MALiB,GAKKV,KALL,CAKjBU,MALiB;AAAA,MAKTC,SALS,GAKKX,KALL,CAKTW,SALS;AAM3D,MAAMC,eAAe,GAAGlB,KAAK,CAACQ,UAAN,CAAiBJ,uBAAjB,CAAxB;AAEA,MAAMe,YAAY,GAAGxB,gBAAgB,CAACkB,aAAD,EAAgB;AACnDO,IAAAA,SAAS,EAAEf,cAAc,CAACI,WADyB;AAEnDY,IAAAA,GAAG,EAAEd,OAAO,CAACc;AAFsC,GAAhB,CAArC;;AAR2D,mBAYvCzB,SAAS,CAA4BS,cAAc,CAACI,WAA3C,EAAwD;AACnFK,IAAAA,SAAS,EAAET,cAAc,CAACS,SADyD;AAEnFQ,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BR,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAEnB,uBAAuB,CAACoB,eAAD,EAAkBD,SAAlB;AAJL,OAAP;AAAA,KAF2D;AAQnFI,IAAAA,GAAG,EAAEd,OAAO,CAACc;AARsE,GAAxD,CAZ8B;AAAA,MAYnDE,OAZmD,cAYnDA,OAZmD;;AAuB3D,MAAMC,WAAW,GAAG/B,cAAc,CAACa,KAAD,CAAlC;AACA,MAAMmB,cAAc,GAAG/B,iBAAiB,CAACW,cAAc,CAACqB,YAAhB,EAA8BpB,KAA9B,CAAxC;AAEA,MAAMqB,OAAO,GAAG,oBAAC,WAAD,EAAiBR,YAAY,CAAC,MAAD,oBAAcM,cAAd;AAA8BX,IAAAA,SAAS,EAAES,OAAO,CAACK;AAAjD,KAA7B,CAAhB;AACAhB,EAAAA,MAAM;AAEN,SAAOe,OAAP;AACD,CA/BD;;AAiCAtB,cAAc,CAACS,SAAf,GAA2B,qBAA3B;AACAT,cAAc,CAACI,WAAf,GAA6B,gBAA7B;AAEAJ,cAAc,CAACwB,SAAf,GAA2B1B,eAAe,CAAC2B,YAAhB,EAA3B;AACAzB,cAAc,CAACqB,YAAf,GAA8BK,MAAM,CAACC,IAAP,CAAY3B,cAAc,CAACwB,SAA3B,CAA9B;AAEAxB,cAAc,CAAC4B,MAAf,GAAwB/B,sBAAsB,CAAC;AAAEgC,EAAAA,SAAS,EAAE7B,cAAb;AAA6B8B,EAAAA,UAAU,EAAE;AAAzC,CAAD,CAA9C;AAEA;;;;AAGA,eAAelC,iBAAiB,CAA6CI,cAA7C,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\n\nconst ToolbarDivider: React.FC<WithAsProp<ToolbarDividerProps>> &\n  FluentComponentStaticProps<ToolbarDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarDividerStylesProps>(ToolbarDivider.displayName, {\n    className: ToolbarDivider.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarDivider.className = 'ui-toolbar__divider';\nToolbarDivider.displayName = 'ToolbarDivider';\n\nToolbarDivider.propTypes = commonPropTypes.createCommon();\nToolbarDivider.handledProps = Object.keys(ToolbarDivider.propTypes) as any;\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nexport default withSafeTypeForAs<typeof ToolbarDivider, ToolbarDividerProps>(ToolbarDivider);\n"],"file":"ToolbarDivider.js"}