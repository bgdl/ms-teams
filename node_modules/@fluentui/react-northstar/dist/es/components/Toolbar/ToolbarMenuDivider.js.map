{"version":3,"sources":["components/Toolbar/ToolbarMenuDivider.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","mergeComponentVariables","React","ThemeContext","createShorthandFactory","commonPropTypes","withSafeTypeForAs","ToolbarVariablesContext","ToolbarMenuDivider","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","createCommon","defaultProps","as","Object","keys","create","Component","mappedProp"],"mappings":"AACA,SAASA,cAAT,EAAyBC,iBAAzB,EAA4CC,gBAA5C,EAA8DC,SAA9D,EAAyEC,YAAzE,QAA6F,0BAA7F;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,SAGEC,sBAHF,EAKEC,eALF,QAMO,aANP;AAOA,SAA0EC,iBAA1E,QAAmG,aAAnG;AACA,SAASC,uBAAT,QAAwC,2BAAxC;;AAWA,IAAMC,kBAC+C,GAAG,SADlDA,kBACkD,CAAAC,KAAK,EAAI;AAC/D,MAAMC,OAAgC,GAAGR,KAAK,CAACS,UAAN,CAAiBR,YAAjB,CAAzC;;AAD+D,sBAElCH,YAAY,CAACQ,kBAAkB,CAACI,WAApB,EAAiCF,OAAO,CAACG,SAAzC,CAFsB;AAAA,MAEvDC,QAFuD,iBAEvDA,QAFuD;AAAA,MAE7CC,MAF6C,iBAE7CA,MAF6C;;AAG/DD,EAAAA,QAAQ;AAHuD,MAKvDE,aALuD,GAKCP,KALD,CAKvDO,aALuD;AAAA,MAKxCC,SALwC,GAKCR,KALD,CAKxCQ,SALwC;AAAA,MAK7BC,MAL6B,GAKCT,KALD,CAK7BS,MAL6B;AAAA,MAKrBC,MALqB,GAKCV,KALD,CAKrBU,MALqB;AAAA,MAKbC,SALa,GAKCX,KALD,CAKbW,SALa;AAM/D,MAAMC,eAAe,GAAGnB,KAAK,CAACS,UAAN,CAAiBJ,uBAAjB,CAAxB;AAEA,MAAMe,YAAY,GAAGxB,gBAAgB,CAACkB,aAAD,EAAgB;AACnDO,IAAAA,SAAS,EAAEf,kBAAkB,CAACI,WADqB;AAEnDY,IAAAA,GAAG,EAAEd,OAAO,CAACc;AAFsC,GAAhB,CAArC;;AAR+D,mBAY3CzB,SAAS,CAAgCS,kBAAkB,CAACI,WAAnD,EAAgE;AAC3FK,IAAAA,SAAS,EAAET,kBAAkB,CAACS,SAD6D;AAE3FQ,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BR,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAEnB,uBAAuB,CAACoB,eAAD,EAAkBD,SAAlB;AAJL,OAAP;AAAA,KAFmE;AAQ3FI,IAAAA,GAAG,EAAEd,OAAO,CAACc;AAR8E,GAAhE,CAZkC;AAAA,MAYvDE,OAZuD,cAYvDA,OAZuD;;AAuB/D,MAAMC,WAAW,GAAG/B,cAAc,CAACa,KAAD,CAAlC;AACA,MAAMmB,cAAc,GAAG/B,iBAAiB,CAACW,kBAAkB,CAACqB,YAApB,EAAkCpB,KAAlC,CAAxC;AAEA,MAAMqB,OAAO,GAAG,oBAAC,WAAD,EAAiBR,YAAY,CAAC,MAAD,oBAAcM,cAAd;AAA8BX,IAAAA,SAAS,EAAES,OAAO,CAACK;AAAjD,KAA7B,CAAhB;AACAhB,EAAAA,MAAM;AAEN,SAAOe,OAAP;AACD,CA/BD;;AAiCAtB,kBAAkB,CAACS,SAAnB,GAA+B,yBAA/B;AACAT,kBAAkB,CAACI,WAAnB,GAAiC,oBAAjC;AAEAJ,kBAAkB,CAACwB,SAAnB,GAA+B3B,eAAe,CAAC4B,YAAhB,EAA/B;AACAzB,kBAAkB,CAAC0B,YAAnB,GAAkC;AAChCC,EAAAA,EAAE,EAAE;AAD4B,CAAlC;AAGA3B,kBAAkB,CAACqB,YAAnB,GAAkCO,MAAM,CAACC,IAAP,CAAY7B,kBAAkB,CAACwB,SAA/B,CAAlC;AAEAxB,kBAAkB,CAAC8B,MAAnB,GAA4BlC,sBAAsB,CAAC;AACjDmC,EAAAA,SAAS,EAAE/B,kBADsC;AAEjDgC,EAAAA,UAAU,EAAE;AAFqC,CAAD,CAAlD;AAKA;;;;AAGA,eAAelC,iBAAiB,CAA2DE,kBAA3D,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarMenuDividerStylesProps = never;\n\nconst ToolbarMenuDivider: React.FC<WithAsProp<ToolbarMenuDividerProps>> &\n  FluentComponentStaticProps<ToolbarMenuDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenuDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarMenuDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarMenuDividerStylesProps>(ToolbarMenuDivider.displayName, {\n    className: ToolbarMenuDivider.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenuDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarMenuDivider.className = 'ui-toolbar__menudivider';\nToolbarMenuDivider.displayName = 'ToolbarMenuDivider';\n\nToolbarMenuDivider.propTypes = commonPropTypes.createCommon();\nToolbarMenuDivider.defaultProps = {\n  as: 'li',\n};\nToolbarMenuDivider.handledProps = Object.keys(ToolbarMenuDivider.propTypes) as any;\n\nToolbarMenuDivider.create = createShorthandFactory({\n  Component: ToolbarMenuDivider,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarMenuDivider adds non-actionable separator between items of ToolbarMenu.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenuDivider, ToolbarMenuDividerProps, 'li'>(ToolbarMenuDivider);\n"],"file":"ToolbarMenuDivider.js"}