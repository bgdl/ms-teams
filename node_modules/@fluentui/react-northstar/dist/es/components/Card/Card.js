import _invoke from "lodash/invoke";
import * as React from 'react';
import { withSafeTypeForAs } from '../../types';
import { cardBehavior } from '@fluentui/accessibility';
import * as CustomPropTypes from '@fluentui/react-proptypes';
import { commonPropTypes, createShorthandFactory } from '../../utils';
import { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
// @ts-ignore
import { ThemeContext } from 'react-fela';
import CardHeader from './CardHeader';
import CardBody from './CardBody';
import CardPreview from './CardPreview';
import CardFooter from './CardFooter';
import CardTopControls from './CardTopControls';
import CardColumn from './CardColumn';

var Card = function Card(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Card.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      compact = props.compact,
      horizontal = props.horizontal,
      centered = props.centered,
      size = props.size,
      fluid = props.fluid;
  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Card.handledProps, props);
  var getA11yProps = useAccessibility(props.accessibility, {
    debugName: Card.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        handleClick(e);
      }
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(Card.displayName, {
    className: Card.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        centered: centered,
        horizontal: horizontal,
        compact: compact,
        size: size,
        fluid: fluid
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleClick = function handleClick(e) {
    _invoke(props, 'onClick', e, props);
  };

  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), children);
  setEnd();
  return element;
};

Card.displayName = 'Card';
Card.className = 'ui-card';
Card.slotClassNames = {
  header: "".concat(Card.className, "__header"),
  body: "".concat(Card.className, "__body"),
  footer: "".concat(Card.className, "__footer"),
  preview: "".concat(Card.className, "__preview"),
  topControls: "".concat(Card.className, "__top-controls")
};
Card.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  onClick: PropTypes.func,
  compact: PropTypes.bool,
  horizontal: PropTypes.bool,
  centered: PropTypes.bool,
  size: CustomPropTypes.size,
  fluid: PropTypes.bool
});
Card.defaultProps = {
  accessibility: cardBehavior,
  size: 'medium'
};
Card.handledProps = Object.keys(Card.propTypes);
Card.Header = CardHeader;
Card.Body = CardBody;
Card.Footer = CardFooter;
Card.Preview = CardPreview;
Card.TopControls = CardTopControls;
Card.Column = CardColumn;
Card.create = createShorthandFactory({
  Component: Card
});
/**
 * A Card is used to display data in sematically grouped way.
 */

export default withSafeTypeForAs(Card);
//# sourceMappingURL=Card.js.map
