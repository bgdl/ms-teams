import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { withSafeTypeForAs } from '../../types';

var Box = function Box(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Box.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables,
      children = props.children,
      content = props.content;
  var getA11Props = useAccessibility(accessibility, {
    debugName: Box.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(Box.displayName, {
    className: Box.className,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var unhandledProps = useUnhandledProps(Box.handledProps, props);
  var ElementType = getElementType(props);
  var result = React.createElement(ElementType, getA11Props('root', Object.assign({}, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {
    className: classes.root
  }, unhandledProps)), childrenExist(children) ? children : content);
  setEnd();
  return result;
};

Box.className = 'ui-box';
Box.displayName = 'Box';
Box.propTypes = commonPropTypes.createCommon();
Box.handledProps = Object.keys(Box.propTypes);
Box.create = createShorthandFactory({
  Component: Box
});
/**
 * A Box is a basic component, commonly used for slots in other Fluent UI components.
 * By default it just renders a `div`.
 */

export default withSafeTypeForAs(Box);
//# sourceMappingURL=Box.js.map
