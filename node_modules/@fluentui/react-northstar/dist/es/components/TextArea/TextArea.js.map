{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["textAreaBehavior","withSafeTypeForAs","React","PropTypes","commonPropTypes","AutoControlledComponent","applyAccessibilityKeyHandlers","TextArea","e","value","props","setState","ElementType","classes","accessibility","variables","styles","unhandledProps","disabled","state","root","handleChange","attributes","keyHandlers","createCommon","content","defaultValue","string","onChange","func","bool","as"],"mappings":";;;;;;;;;;AAAA,SAAwBA,gBAAxB,QAAgD,yBAAhD;AACA,SAA4CC,iBAA5C,QAAqE,aAArE;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,SAGEC,eAHF,EAKEC,uBALF,EAMEC,6BANF,QAOO,aAPP;;IA4CMC,Q;;;;;;;;;;;;;;;;;;mEA8CW,UAACC,CAAD,EAA4C;AACzD,UAAMC,KAAK,GAAG,KAAMD,CAAN,EAAS,cAAT,CAAd;;AAEA,cAAS,MAAKE,KAAd,EAAqB,UAArB,EAAiCF,CAAjC,oBAAyC,MAAKE,KAA9C;AAAqDD,QAAAA,KAAK,EAALA;AAArD;;AACA,YAAKE,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD,K;;;;;;;0CAtBqC;AAAA,UANpCG,WAMoC,QANpCA,WAMoC;AAAA,UALpCC,OAKoC,QALpCA,OAKoC;AAAA,UAJpCC,aAIoC,QAJpCA,aAIoC;AAAA,UAHpCC,SAGoC,QAHpCA,SAGoC;AAAA,UAFpCC,MAEoC,QAFpCA,MAEoC;AAAA,UADpCC,cACoC,QADpCA,cACoC;AAAA,UAC5BC,QAD4B,GACf,KAAKR,KADU,CAC5BQ,QAD4B;AAAA,8BAEb,KAAKC,KAFQ,CAE5BV,KAF4B;AAAA,UAE5BA,KAF4B,kCAEpB,EAFoB;AAIpC,aACE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,SAAS,EAAEI,OAAO,CAACO,IAFrB;AAGE,QAAA,QAAQ,EAAE,KAAKC,YAHjB;AAIE,QAAA,QAAQ,EAAEH;AAJZ,SAKMJ,aAAa,CAACQ,UAAd,CAAyBF,IAL/B,EAMMH,cANN,EAOMX,6BAA6B,CAACQ,aAAa,CAACS,WAAd,CAA0BH,IAA3B,EAAiCH,cAAjC,CAPnC,EADF;AAWD;;;;EA5CoBZ,uB;AAsDvB;;;;;;;;;;;;gBAtDME,Q,eACe,a;;gBADfA,Q,iBAGiB,U;;gBAHjBA,Q,iCAMCH,eAAe,CAACoB,YAAhB,CAA6B;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHC,EAAAA,YAAY,EAAEvB,SAAS,CAACwB,M;AACxBC,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,I;AACpBpB,EAAAA,KAAK,EAAEN,SAAS,CAACwB,M;AACjBT,EAAAA,QAAQ,EAAEf,SAAS,CAAC2B;;;gBAZlBvB,Q,kBAekB;AACpBwB,EAAAA,EAAE,EAAE,UADgB;AAEpBjB,EAAAA,aAAa,EAAEd;AAFK,C;;gBAflBO,Q,yBAoByB,CAAC,OAAD,C;;AA4C/B,eAAeN,iBAAiB,CAA6CM,QAA7C,CAAhC","sourcesContent":["import { Accessibility, textAreaBehavior } from '@fluentui/accessibility';\nimport { ComponentEventHandler, WithAsProp, withSafeTypeForAs } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  RenderResultConfig,\n  AutoControlledComponent,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport interface TextAreaState {\n  value?: TextAreaProps['value'];\n}\n\nclass TextArea extends AutoControlledComponent<WithAsProp<TextAreaProps>, TextAreaState> {\n  static className = 'ui-textarea';\n\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    defaultValue: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    disabled: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'textarea',\n    accessibility: textAreaBehavior,\n  };\n\n  static autoControlledProps = ['value'];\n\n  renderComponent({\n    ElementType,\n    classes,\n    accessibility,\n    variables,\n    styles,\n    unhandledProps,\n  }: RenderResultConfig<TextAreaProps>) {\n    const { disabled } = this.props;\n    const { value = '' } = this.state;\n\n    return (\n      <ElementType\n        value={value}\n        className={classes.root}\n        onChange={this.handleChange}\n        disabled={disabled}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      />\n    );\n  }\n\n  handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const value = _.get(e, 'target.value');\n\n    _.invoke(this.props, 'onChange', e, { ...this.props, value });\n    this.setState({ value });\n  };\n}\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport default withSafeTypeForAs<typeof TextArea, TextAreaProps, 'textarea'>(TextArea);\n"],"file":"TextArea.js"}