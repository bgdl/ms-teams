{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["customPropTypes","indicatorBehavior","React","PropTypes","ThemeContext","getElementType","useUnhandledProps","useStyles","useTelemetry","cx","createShorthandFactory","commonPropTypes","withSafeTypeForAs","Image","Box","DropdownItem","props","context","useContext","displayName","telemetry","setStart","setEnd","active","accessibilityItemProps","className","content","design","header","image","isFromKeyboard","styles","checkable","checkableIndicator","selected","variables","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleClick","e","contentElement","create","defaultProps","slotClassNames","headerElement","endMediaElement","accessibility","imageElement","avatar","media","element","root","main","as","propTypes","createCommon","children","object","bool","itemShorthand","shorthandAllowingChildren","disabled","itemShorthandWithoutJSX","onClick","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport {\n  ShorthandValue,\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport Image, { ImageProps } from '../Image/Image';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nconst DropdownItem: React.FC<WithAsProp<DropdownItemProps> & { index: number }> &\n  FluentComponentStaticProps<DropdownItemProps> & {\n    slotClassNames: DropdownItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: DropdownItem.className,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: DropdownItem.slotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType className={classes.root} onClick={handleClick} {...accessibilityItemProps} {...unhandledProps}>\n      {imageElement}\n\n      <div className={cx(DropdownItem.slotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nDropdownItem.className = 'ui-dropdown__item';\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.slotClassNames = {\n  main: `${DropdownItem.className}__main`,\n  content: `${DropdownItem.className}__content`,\n  header: `${DropdownItem.className}__header`,\n  image: `${DropdownItem.className}__image`,\n  checkableIndicator: `${DropdownItem.className}__checkable-indicator`,\n};\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport default withSafeTypeForAs<typeof DropdownItem, DropdownItemProps>(DropdownItem);\n"],"file":"DropdownItem.js"}