{"version":3,"sources":["components/Attachment/Attachment.tsx"],"names":["attachmentBehavior","getElementType","useAccessibility","useStyles","useTelemetry","useUnhandledProps","customPropTypes","PropTypes","React","ThemeContext","withSafeTypeForAs","createShorthandFactory","commonPropTypes","Box","Button","Text","Attachment","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","action","actionable","className","description","design","disabled","header","icon","onClick","progress","styles","variables","getA11Props","debugName","actionHandlers","performClick","e","currentTarget","target","stopPropagation","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","preventDefault","element","root","create","defaultProps","content","iconOnly","text","slotClassNames","width","Component","mappedProp","propTypes","createCommon","itemShorthand","bool","shorthandAllowingChildren","oneOfType","string","number","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, attachmentBehavior, AttachmentBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { createShorthandFactory, commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport Button, { ButtonProps } from '../Button/Button';\nimport Text, { TextProps } from '../Text/Text';\n\nexport interface AttachmentProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<AttachmentBehaviorProps>;\n\n  /** Button shorthand for the action slot. */\n  action?: ShorthandValue<ButtonProps>;\n\n  /** An Attachment can be styled to indicate possible user interaction. */\n  actionable?: boolean;\n\n  /** A string describing the attachment. */\n  description?: ShorthandValue<TextProps>;\n\n  /** An attachment can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** The name of the attachment. */\n  header?: ShorthandValue<TextProps>;\n\n  /** Shorthand for the icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Value indicating percent complete. */\n  progress?: string | number;\n\n  /**\n   * Called after user's click.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AttachmentProps>;\n}\n\nexport type AttachmentStylesProps = Required<Pick<AttachmentProps, 'actionable' | 'disabled'>>;\n\nexport interface AttachmentSlotClassNames {\n  action: string;\n}\n\nconst Attachment: React.FC<WithAsProp<AttachmentProps>> &\n  FluentComponentStaticProps<AttachmentProps> & { slotClassNames: AttachmentSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Attachment.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    action,\n    actionable,\n    className,\n    description,\n    design,\n    disabled,\n    header,\n    icon,\n    onClick,\n    progress,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Attachment.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          e.stopPropagation();\n          handleClick(e);\n        }\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<AttachmentStylesProps>(Attachment.displayName, {\n    className: Attachment.className,\n    mapPropsToStyles: () => ({\n      actionable: actionable || !!onClick,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Attachment.handledProps, props);\n\n  const handleClick = (e: React.KeyboardEvent | React.MouseEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, onClick: handleClick, ...unhandledProps })}>\n      {Box.create(icon, {\n        defaultProps: () => ({ styles: resolvedStyles.icon }),\n      })}\n      {(header || description) && (\n        <div className={classes.content}>\n          {Text.create(header, {\n            defaultProps: () => ({ styles: resolvedStyles.header }),\n          })}\n\n          {Text.create(description, {\n            defaultProps: () => ({ styles: resolvedStyles.description }),\n          })}\n        </div>\n      )}\n      {Button.create(action, {\n        defaultProps: () => ({\n          iconOnly: true,\n          text: true,\n          styles: resolvedStyles.action,\n          className: Attachment.slotClassNames.action,\n        }),\n      })}\n      {!_.isNil(progress) && <div className={classes.progress} style={{ width: `${progress}%` }} />}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAttachment.create = createShorthandFactory({ Component: Attachment, mappedProp: 'header' });\nAttachment.slotClassNames = {\n  action: `${Attachment.className}__action`,\n};\n\nAttachment.className = 'ui-attachment';\nAttachment.displayName = 'Attachment';\n\nAttachment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior,\n};\n\nAttachment.handledProps = Object.keys(Attachment.propTypes) as any;\n\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\nexport default withSafeTypeForAs<typeof Attachment, AttachmentProps>(Attachment);\n"],"file":"Attachment.js"}