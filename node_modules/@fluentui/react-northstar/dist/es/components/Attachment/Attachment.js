import _isNil from "lodash/isNil";
import _invoke from "lodash/invoke";
import { attachmentBehavior } from '@fluentui/accessibility';
import { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { withSafeTypeForAs } from '../../types';
import { createShorthandFactory, commonPropTypes } from '../../utils';
import Box from '../Box/Box';
import Button from '../Button/Button';
import Text from '../Text/Text';

var Attachment = function Attachment(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Attachment.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      action = props.action,
      actionable = props.actionable,
      className = props.className,
      description = props.description,
      design = props.design,
      disabled = props.disabled,
      header = props.header,
      icon = props.icon,
      onClick = props.onClick,
      progress = props.progress,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = useAccessibility(accessibility, {
    debugName: Attachment.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        if (e.currentTarget === e.target) {
          e.stopPropagation();
          handleClick(e);
        }
      }
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(Attachment.displayName, {
    className: Attachment.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        actionable: actionable || !!onClick,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Attachment.handledProps, props);

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    _invoke(props, 'onClick', e, props);
  };

  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), Box.create(icon, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.icon
      };
    }
  }), (header || description) && React.createElement("div", {
    className: classes.content
  }, Text.create(header, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.header
      };
    }
  }), Text.create(description, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.description
      };
    }
  })), Button.create(action, {
    defaultProps: function defaultProps() {
      return {
        iconOnly: true,
        text: true,
        styles: resolvedStyles.action,
        className: Attachment.slotClassNames.action
      };
    }
  }), !_isNil(progress) && React.createElement("div", {
    className: classes.progress,
    style: {
      width: "".concat(progress, "%")
    }
  }));
  setEnd();
  return element;
};

Attachment.create = createShorthandFactory({
  Component: Attachment,
  mappedProp: 'header'
});
Attachment.slotClassNames = {
  action: "".concat(Attachment.className, "__action")
};
Attachment.className = 'ui-attachment';
Attachment.displayName = 'Attachment';
Attachment.propTypes = Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  action: customPropTypes.itemShorthand,
  actionable: PropTypes.bool,
  description: customPropTypes.itemShorthand,
  header: customPropTypes.itemShorthand,
  icon: customPropTypes.shorthandAllowingChildren,
  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
});
Attachment.defaultProps = {
  accessibility: attachmentBehavior
};
Attachment.handledProps = Object.keys(Attachment.propTypes);
/**
 * An Attachment represents a file or media attachment, which may contain some metadata or actions.
 */

export default withSafeTypeForAs(Attachment);
//# sourceMappingURL=Attachment.js.map
