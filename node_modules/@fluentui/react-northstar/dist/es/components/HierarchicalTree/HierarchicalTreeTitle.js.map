{"version":3,"sources":["components/HierarchicalTree/HierarchicalTreeTitle.tsx"],"names":["hierarchicalTreeTitleBehavior","PropTypes","React","UIComponent","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","applyAccessibilityKeyHandlers","withSafeTypeForAs","HierarchicalTreeTitle","performClick","e","preventDefault","handleClick","props","ElementType","classes","accessibility","unhandledProps","styles","variables","children","content","root","attributes","getAttributes","forElements","keyHandlers","createCommon","onClick","func","open","bool","hasSubtree","as","create","Component","mappedProp"],"mappings":";;;;;;;;;AAAA,SAAwBA,6BAAxB,QAA6D,yBAA7D;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SACEC,WADF,EAEEC,aAFF,EAGEC,sBAHF,EAIEC,eAJF,EAQEC,gBARF,EASEC,6BATF,QAWO,aAXP;AAYA,SAA4CC,iBAA5C,QAAqE,aAArE;;IAqBMC,qB;;;;;;;;;;;;;;;;;;qEAmBa;AACfC,MAAAA,YAAY,EAAE,sBAAAC,CAAC,EAAI;AACjBA,QAAAA,CAAC,CAACC,cAAF;;AACA,cAAKC,WAAL,CAAiBF,CAAjB;AACD;AAJc,K;;kEAOH,UAAAA,CAAC,EAAI;AACjB,cAAS,MAAKG,KAAd,EAAqB,SAArB,EAAgCH,CAAhC,EAAmC,MAAKG,KAAxC;AACD,K;;;;;;;0CAE2F;AAAA,UAA1EC,WAA0E,QAA1EA,WAA0E;AAAA,UAA7DC,OAA6D,QAA7DA,OAA6D;AAAA,UAApDC,aAAoD,QAApDA,aAAoD;AAAA,UAArCC,cAAqC,QAArCA,cAAqC;AAAA,UAArBC,MAAqB,QAArBA,MAAqB;AAAA,UAAbC,SAAa,QAAbA,SAAa;AAAA,wBAC5D,KAAKN,KADuD;AAAA,UAClFO,QADkF,eAClFA,QADkF;AAAA,UACxEC,OADwE,eACxEA,OADwE;AAG1F,aACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAEN,OAAO,CAACO,IADrB;AAEE,QAAA,OAAO,EAAE,KAAKV;AAFhB,SAGMI,aAAa,CAACO,UAAd,CAAyBD,IAH/B,EAIMjB,gBAAgB,CAACmB,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACL,QAAD,EAAWC,OAAX;AAAf,OAA/B,CAJN,EAKMJ,cALN,EAMMX,6BAA6B,CAACU,aAAa,CAACU,WAAd,CAA0BJ,IAA3B,EAAiCL,cAAjC,CANnC,GAQGf,aAAa,CAACkB,QAAD,CAAb,GAA0BA,QAA1B,GAAqCC,OARxC,CADF;AAYD;;;;EA7CiCpB,W;;gBAA9BO,qB;;gBAAAA,qB,eAGe,4B;;gBAHfA,qB,iBAKiB,uB;;gBALjBA,qB,iCAQCJ,eAAe,CAACuB,YAAhB,E;AACHC,EAAAA,OAAO,EAAE7B,SAAS,CAAC8B,I;AACnBC,EAAAA,IAAI,EAAE/B,SAAS,CAACgC,I;AAChBC,EAAAA,UAAU,EAAEjC,SAAS,CAACgC;;;gBAXpBvB,qB,kBAckB;AACpByB,EAAAA,EAAE,EAAE,GADgB;AAEpBjB,EAAAA,aAAa,EAAElB;AAFK,C;;AAkCxBU,qBAAqB,CAAC0B,MAAtB,GAA+B/B,sBAAsB,CAAC;AACpDgC,EAAAA,SAAS,EAAE3B,qBADyC;AAEpD4B,EAAAA,UAAU,EAAE;AAFwC,CAAD,CAArD;AAKA;;;;AAGA,eAAe7B,iBAAiB,CAAgEC,qBAAhE,CAAhC","sourcesContent":["import { Accessibility, hierarchicalTreeTitleBehavior } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport { ComponentEventHandler, WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface HierarchicalTreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<HierarchicalTreeTitleProps>;\n\n  /** Whether or not the subtree of the item is in the open state. */\n  open?: boolean;\n\n  /** Whether or not the item has a subtree. */\n  hasSubtree?: boolean;\n}\n\nclass HierarchicalTreeTitle extends UIComponent<WithAsProp<HierarchicalTreeTitleProps>> {\n  static create: ShorthandFactory<HierarchicalTreeTitleProps>;\n\n  static className = 'ui-hierarchicaltree__title';\n\n  static displayName = 'HierarchicalTreeTitle';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    onClick: PropTypes.func,\n    open: PropTypes.bool,\n    hasSubtree: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'a',\n    accessibility: hierarchicalTreeTitleBehavior,\n  };\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = e => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, variables }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        className={classes.root}\n        onClick={this.handleClick}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n}\n\nHierarchicalTreeTitle.create = createShorthandFactory({\n  Component: HierarchicalTreeTitle,\n  mappedProp: 'content',\n});\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport default withSafeTypeForAs<typeof HierarchicalTreeTitle, HierarchicalTreeTitleProps, 'a'>(HierarchicalTreeTitle);\n"],"file":"HierarchicalTreeTitle.js"}