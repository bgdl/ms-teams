{"version":3,"sources":["components/RadioGroup/RadioGroupItem.tsx"],"names":["radioGroupItemBehavior","Ref","customPropTypes","React","PropTypes","AutoControlledComponent","createShorthandFactory","commonPropTypes","applyAccessibilityKeyHandlers","Box","withSafeTypeForAs","RadioGroupItem","createRef","performClick","e","preventDefault","handleClick","props","checked","state","prevProps","prevState","shouldFocus","elementRef","current","focus","undefined","ElementType","classes","unhandledProps","styles","accessibility","label","indicator","handleChange","root","attributes","keyHandlers","create","defaultProps","className","slotClassNames","as","createCommon","content","bool","defaultChecked","disabled","shorthandAllowingChildren","itemShorthand","name","string","onClick","func","onChange","value","oneOfType","number","vertical","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, radioGroupItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  AutoControlledComponent,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\n\nexport interface RadioGroupItemSlotClassNames {\n  indicator: string;\n}\n\nexport interface RadioGroupItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Whether or not radio item is checked. */\n  checked?: boolean;\n\n  /**\n   * Called after radio item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** The label of the radio item. */\n  label?: ShorthandValue<BoxProps>;\n\n  /** Initial checked value. */\n  defaultChecked?: boolean;\n\n  /** A radio item can appear disabled and be unable to change states. */\n  disabled?: boolean;\n\n  /** The radio item indicator can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /**\n   * Called after radio item is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Whether should focus when checked */\n  shouldFocus?: boolean; // TODO: RFC #306\n\n  /** The HTML input value. */\n  value?: string | number;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport interface RadioGroupItemState {\n  checked: boolean;\n}\n\nclass RadioGroupItem extends AutoControlledComponent<WithAsProp<RadioGroupItemProps>, RadioGroupItemState> {\n  elementRef = React.createRef<HTMLElement>();\n\n  static create: ShorthandFactory<RadioGroupItemProps>;\n\n  static displayName = 'RadioGroupItem';\n\n  static className = 'ui-radiogroup__item';\n\n  static slotClassNames: RadioGroupItemSlotClassNames = {\n    indicator: `${RadioGroupItem.className}__indicator`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    checked: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    label: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n    shouldFocus: PropTypes.bool,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: radioGroupItemBehavior,\n    indicator: {},\n  };\n\n  static autoControlledProps = ['checked'];\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = e => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  handleChange = (e: React.ChangeEvent) => {\n    // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(this.props, 'onChange', e, { ...this.props, checked: this.state.checked });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const checked = this.state.checked;\n    if (checked !== prevState.checked) {\n      checked && this.props.shouldFocus && this.elementRef.current.focus();\n      _.invoke(this.props, 'onChange', undefined, { ...this.props, checked });\n    }\n  }\n\n  renderComponent({ ElementType, classes, unhandledProps, styles, accessibility }) {\n    const { label, indicator } = this.props;\n\n    return (\n      <Ref innerRef={this.elementRef}>\n        <ElementType\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n          className={classes.root}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {Box.create(indicator, {\n            defaultProps: () => ({\n              className: RadioGroupItem.slotClassNames.indicator,\n              styles: styles.indicator,\n            }),\n          })}\n          {Box.create(label, {\n            defaultProps: () => ({\n              as: 'span',\n            }),\n          })}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nRadioGroupItem.create = createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });\n\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\nexport default withSafeTypeForAs<typeof RadioGroupItem, RadioGroupItemProps>(RadioGroupItem);\n"],"file":"RadioGroupItem.js"}