{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["checkboxBehavior","getElementType","useUnhandledProps","useAccessibility","useStateManager","useStyles","useTelemetry","customPropTypes","createCheckboxManager","PropTypes","React","ThemeContext","createShorthandFactory","commonPropTypes","withSafeTypeForAs","Box","Text","Checkbox","props","context","useContext","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","label","labelPosition","indicator","styles","toggle","variables","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","create","defaultProps","slotClassNames","element","root","onClick","onChange","checkbox","propTypes","createCommon","content","bool","shorthandAllowingChildren","itemShorthand","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\n\nconst Checkbox: React.FC<WithAsProp<CheckboxProps>> &\n  FluentComponentStaticProps<CheckboxProps> & {\n    slotClassNames: CheckboxSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: Checkbox.className,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: Checkbox.slotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: Checkbox.slotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.className = 'ui-checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.slotClassNames = {\n  label: `${Checkbox.className}__label`,\n  indicator: `${Checkbox.className}__indicator`,\n};\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof Checkbox, CheckboxProps>(Checkbox);\n"],"file":"Checkbox.js"}