{"version":3,"sources":["components/Alert/Alert.tsx"],"names":["alertBehavior","customPropTypes","PropTypes","React","AutoControlledComponent","commonPropTypes","childrenExist","rtlTextContainer","withSafeTypeForAs","Box","Text","ButtonGroup","AlertDismissAction","Alert","predefinedProps","onClick","e","buttonProps","props","visible","setState","styles","accessibility","actions","dismissible","dismissAction","content","icon","header","body","danger","warning","info","success","variables","bodyContent","create","defaultProps","className","slotClassNames","attributes","id","state","bodyId","overrideProps","children","handleDismissOverrides","config","classes","ElementType","unhandledProps","root","handleFocus","getAttributes","forElements","renderContent","createCommon","oneOfType","itemShorthand","collectionShorthand","shorthandAllowingChildren","attached","bool","oneOf","fitted","defaultVisible","onVisibleChange","func","onFocus"],"mappings":"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","sourcesContent":["import { Accessibility, alertBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  UIComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  childrenExist,\n  rtlTextContainer,\n} from '../../utils';\nimport { RenderResultConfig } from '../../utils/renderComponent';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs, ShorthandCollection } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ButtonProps } from '../Button/Button';\nimport Text, { TextProps } from '../Text/Text';\n\nimport ButtonGroup, { ButtonGroupProps } from '../Button/ButtonGroup';\nimport AlertDismissAction, { AlertDismissActionProps } from './AlertDismissAction';\n\nexport interface AlertSlotClassNames {\n  content: string;\n  actions: string;\n  icon: string;\n  header: string;\n  body: string;\n}\n\nexport interface AlertProps extends UIComponentProps, ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available alertWarningBehavior\n   */\n  accessibility?: Accessibility;\n\n  /** An alert can contain action buttons. */\n  actions?: ShorthandValue<ButtonGroupProps> | ShorthandCollection<ButtonProps>;\n\n  /** An alert may contain an icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** An alert may contain a header. */\n  header?: ShorthandValue<TextProps>;\n\n  /** An alert's position relative to neighboring items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** An alert can only take up the width of its content. */\n  fitted?: boolean;\n\n  /** An alert may be formatted to display a danger message. */\n  danger?: boolean;\n\n  /** A default value for the `visible` prop. */\n  defaultVisible?: boolean;\n\n  /** An alert can be dismissible. */\n  dismissible?: boolean;\n\n  /**\n   * A button shorthand for the dismiss action slot. To use this slot the alert should be\n   * dismissible.\n   */\n  dismissAction?: ShorthandValue<AlertDismissActionProps>;\n\n  /** An alert may be formatted to display information. */\n  info?: boolean;\n\n  /**\n   * Called after user will dismiss the alert.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onVisibleChange?: ComponentEventHandler<AlertProps>;\n\n  /**\n   * Called after the alert is focused.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AlertProps>;\n\n  /** An alert can be formatted to display a successful message. */\n  success?: boolean;\n\n  /** An alert can be set to visible to force itself to be shown. */\n  visible?: boolean;\n\n  /** An alert can be formatted to display a warning message. */\n  warning?: boolean;\n\n  /** An alert can have a body that contains header and content elements. */\n  body?: ShorthandValue<BoxProps>;\n}\n\nexport interface AlertState {\n  visible: boolean;\n  bodyId: string;\n}\n\nclass Alert extends AutoControlledComponent<WithAsProp<AlertProps>, AlertState> {\n  static displayName = 'Alert';\n  static className = 'ui-alert';\n\n  static slotClassNames: AlertSlotClassNames = {\n    content: `${Alert.className}__content`,\n    actions: `${Alert.className}__actions`,\n    icon: `${Alert.className}__icon`,\n    header: `${Alert.className}__header`,\n    body: `${Alert.className}__body`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ content: 'shorthand' }),\n    actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    icon: customPropTypes.shorthandAllowingChildren,\n    header: customPropTypes.itemShorthand,\n    attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n    fitted: PropTypes.bool,\n    danger: PropTypes.bool,\n    defaultVisible: PropTypes.bool,\n    dismissible: PropTypes.bool,\n    dismissAction: customPropTypes.itemShorthand,\n    info: PropTypes.bool,\n    onVisibleChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    success: PropTypes.bool,\n    visible: PropTypes.bool,\n    warning: PropTypes.bool,\n    body: customPropTypes.itemShorthand,\n  };\n\n  static defaultProps = {\n    accessibility: alertBehavior,\n    dismissAction: {},\n    body: {},\n  };\n\n  static DismissAction = AlertDismissAction;\n\n  static autoControlledProps = ['visible'];\n\n  getInitialAutoControlledState(): AlertState {\n    return {\n      visible: true,\n      bodyId: _.uniqueId('alert-body-'),\n    };\n  }\n\n  handleDismissOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n      _.invoke(this.props, 'onVisibleChange', e, { ...this.props, visible: false });\n      this.setState({ visible: false });\n    },\n  });\n\n  handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onFocus', e, this.props);\n  };\n\n  renderContent = ({ styles, accessibility }: RenderResultConfig<AlertProps>) => {\n    const {\n      actions,\n      dismissible,\n      dismissAction,\n      content,\n      icon,\n      header,\n      body,\n      danger,\n      warning,\n      info,\n      success,\n      variables,\n    } = this.props;\n\n    const bodyContent = (\n      <>\n        {Text.create(header, {\n          defaultProps: () => ({\n            className: Alert.slotClassNames.header,\n            styles: styles.header,\n            ...accessibility.attributes.header,\n          }),\n        })}\n        {Box.create(content, {\n          defaultProps: () => ({\n            className: Alert.slotClassNames.content,\n            styles: styles.content,\n            ...accessibility.attributes.content,\n          }),\n        })}\n      </>\n    );\n\n    return (\n      <>\n        {Box.create(icon, {\n          defaultProps: () => ({\n            className: Alert.slotClassNames.icon,\n            styles: styles.icon,\n          }),\n        })}\n        {Box.create(body, {\n          defaultProps: () => ({\n            id: this.state.bodyId,\n            className: Alert.slotClassNames.body,\n            ...accessibility.attributes.body,\n            styles: styles.body,\n          }),\n          overrideProps: {\n            children: bodyContent,\n          },\n        })}\n\n        {ButtonGroup.create(actions, {\n          defaultProps: () => ({\n            className: Alert.slotClassNames.actions,\n            styles: styles.actions,\n          }),\n        })}\n        {dismissible &&\n          AlertDismissAction.create(dismissAction, {\n            defaultProps: () => ({\n              danger,\n              warning,\n              info,\n              success,\n              variables,\n              ...accessibility.attributes.dismissAction,\n            }),\n            overrideProps: this.handleDismissOverrides,\n          })}\n      </>\n    );\n  };\n\n  renderComponent(config: RenderResultConfig<AlertProps>) {\n    const { accessibility, classes, ElementType, unhandledProps } = config;\n    const { children } = this.props;\n\n    return (\n      <ElementType\n        className={classes.root}\n        onFocus={this.handleFocus}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n      >\n        {childrenExist(children) ? children : this.renderContent(config)}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.\n *\n * @accessibility\n * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.\n */\nexport default withSafeTypeForAs<typeof Alert, AlertProps>(Alert);\n"],"file":"Alert.js"}