import _invoke from "lodash/invoke";
import { treeTitleBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';
import { withSafeTypeForAs } from '../../types';

var TreeTitle = function TreeTitle(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(TreeTitle.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      content = props.content,
      design = props.design,
      hasSubtree = props.hasSubtree,
      level = props.level,
      index = props.index,
      styles = props.styles,
      treeSize = props.treeSize,
      variables = props.variables;
  var getA11Props = useAccessibility(accessibility, {
    debugName: TreeTitle.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        e.preventDefault();
        handleClick(e);
      }
    },
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        hasSubtree: hasSubtree,
        level: level,
        index: index,
        treeSize: treeSize
      };
    },
    rtl: context.rtl
  });

  var _useStyles = useStyles(TreeTitle.displayName, {
    className: TreeTitle.className,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);

  var handleClick = function handleClick(e) {
    _invoke(props, 'onClick', e, props);
  };

  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, rtlTextContainer.getAttributes({
    forElements: [children, content]
  }), {}, unhandledProps)), childrenExist(children) ? children : content);
  setEnd();
  return element;
};

TreeTitle.className = 'ui-tree__title';
TreeTitle.displayName = 'TreeTitle';
TreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {
  hasSubtree: PropTypes.bool,
  index: PropTypes.number,
  level: PropTypes.number,
  onClick: PropTypes.func,
  expanded: PropTypes.bool,
  treeSize: PropTypes.number
});
TreeTitle.defaultProps = {
  as: 'a',
  accessibility: treeTitleBehavior
};
TreeTitle.handledProps = Object.keys(TreeTitle.propTypes);
TreeTitle.create = createShorthandFactory({
  Component: TreeTitle,
  mappedProp: 'content'
});
/**
 * A TreeTitle renders a title of TreeItem.
 */

export default withSafeTypeForAs(TreeTitle);
//# sourceMappingURL=TreeTitle.js.map
