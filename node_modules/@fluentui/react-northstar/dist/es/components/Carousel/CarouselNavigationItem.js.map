{"version":3,"sources":["components/Carousel/CarouselNavigationItem.tsx"],"names":["PropTypes","React","customPropTypes","tabBehavior","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","applyAccessibilityKeyHandlers","UIComponent","withSafeTypeForAs","Box","CarouselNavigationItem","e","props","performClick","event","defaultPrevented","handleClick","ElementType","classes","accessibility","styles","variables","unhandledProps","children","content","indicator","root","handleBlur","handleFocus","attributes","getAttributes","forElements","keyHandlers","create","defaultProps","className","slotClassNames","as","createCommon","active","bool","shorthandAllowingChildren","iconOnly","index","number","onClick","func","primary","every","disallow","secondary","vertical","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport { Accessibility, tabBehavior } from '@fluentui/accessibility';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n  ContentComponentProps,\n  applyAccessibilityKeyHandlers,\n  UIComponent,\n} from '../../utils';\nimport { withSafeTypeForAs, WithAsProp, ShorthandValue, ComponentEventHandler } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface CarouselNavigationItemSlotClassNames {\n  indicator: string;\n}\n\nexport interface CarouselNavigationItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** A menu item can be active. */\n  active?: boolean;\n\n  /** Indicator for the Carousel Navigation Item. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A Carousel Navigation may have just icons. */\n  iconOnly?: boolean;\n\n  /** CarouselNavigationIntem index inside CarouselNavigation. */\n  index?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick?: ComponentEventHandler<CarouselNavigationItemProps>;\n\n  /** The carousel navigation item can have primary type. */\n  primary?: boolean;\n\n  /** The carousel navigation item can have secondary type. */\n  secondary?: boolean;\n\n  /** A vertical carousel navigation displays elements vertically. */\n  vertical?: boolean;\n}\n\nclass CarouselNavigationItem extends UIComponent<WithAsProp<CarouselNavigationItemProps>> {\n  static displayName = 'CarouselNavigationItem';\n\n  static className = 'ui-carousel__navigationitem';\n\n  static slotClassNames: CarouselNavigationItemSlotClassNames = {\n    indicator: `${CarouselNavigationItem.className}__indicator`,\n  };\n\n  static create: ShorthandFactory<CarouselNavigationItemProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    active: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    iconOnly: PropTypes.bool,\n    index: PropTypes.number,\n    onClick: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: tabBehavior as Accessibility,\n    as: 'li',\n    indicator: {},\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, variables, unhandledProps }) {\n    const { children, content, indicator } = this.props;\n\n    return childrenExist(children) ? (\n      children\n    ) : (\n      <ElementType\n        className={classes.root}\n        onBlur={this.handleBlur}\n        onFocus={this.handleFocus}\n        onClick={this.handleClick}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        {...unhandledProps}\n      >\n        {Box.create(indicator, {\n          defaultProps: () => ({\n            className: CarouselNavigationItem.slotClassNames.indicator,\n            styles: styles.indicator,\n          }),\n        })}\n        {Box.create(content, {\n          defaultProps: () => ({ as: 'span', styles: styles.content }),\n        })}\n      </ElementType>\n    );\n  }\n\n  handleClick = (e: Event | React.SyntheticEvent) => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  handleBlur = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onBlur', e, this.props);\n  };\n\n  handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onFocus', e, this.props);\n  };\n\n  actionHandlers = {\n    performClick: event => !event.defaultPrevented && this.handleClick(event),\n  };\n}\n\nCarouselNavigationItem.create = createShorthandFactory({\n  Component: CarouselNavigationItem,\n  mappedArrayProp: 'content',\n});\n\n/**\n * A CarouselItem is an actionable item within a Carousel.\n */\nexport default withSafeTypeForAs<typeof CarouselNavigationItem, CarouselNavigationItemProps, 'li'>(\n  CarouselNavigationItem,\n);\n"],"file":"CarouselNavigationItem.js"}