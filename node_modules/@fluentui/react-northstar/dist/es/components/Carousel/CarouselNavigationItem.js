import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as PropTypes from 'prop-types';
import * as React from 'react';
import * as customPropTypes from '@fluentui/react-proptypes';
import { tabBehavior } from '@fluentui/accessibility';
import { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers, UIComponent } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import Box from '../Box/Box';

var CarouselNavigationItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(CarouselNavigationItem, _UIComponent);

  function CarouselNavigationItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CarouselNavigationItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CarouselNavigationItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      _invoke(_this.props, 'onClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      _invoke(_this.props, 'onBlur', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        return !event.defaultPrevented && _this.handleClick(event);
      }
    });

    return _this;
  }

  _createClass(CarouselNavigationItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          styles = _ref.styles,
          variables = _ref.variables,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          indicator = _this$props.indicator;
      return childrenExist(children) ? children : React.createElement(ElementType, _extends({
        className: classes.root,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onClick: this.handleClick
      }, accessibility.attributes.root, rtlTextContainer.getAttributes({
        forElements: [children]
      }), applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), unhandledProps), Box.create(indicator, {
        defaultProps: function defaultProps() {
          return {
            className: CarouselNavigationItem.slotClassNames.indicator,
            styles: styles.indicator
          };
        }
      }), Box.create(content, {
        defaultProps: function defaultProps() {
          return {
            as: 'span',
            styles: styles.content
          };
        }
      }));
    }
  }]);

  return CarouselNavigationItem;
}(UIComponent);

_defineProperty(CarouselNavigationItem, "displayName", 'CarouselNavigationItem');

_defineProperty(CarouselNavigationItem, "className", 'ui-carousel__navigationitem');

_defineProperty(CarouselNavigationItem, "slotClassNames", {
  indicator: "".concat(CarouselNavigationItem.className, "__indicator")
});

_defineProperty(CarouselNavigationItem, "create", void 0);

_defineProperty(CarouselNavigationItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  indicator: customPropTypes.shorthandAllowingChildren,
  iconOnly: PropTypes.bool,
  index: PropTypes.number,
  onClick: PropTypes.func,
  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),
  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),
  vertical: PropTypes.bool
}));

_defineProperty(CarouselNavigationItem, "defaultProps", {
  accessibility: tabBehavior,
  as: 'li',
  indicator: {}
});

CarouselNavigationItem.create = createShorthandFactory({
  Component: CarouselNavigationItem,
  mappedArrayProp: 'content'
});
/**
 * A CarouselItem is an actionable item within a Carousel.
 */

export default withSafeTypeForAs(CarouselNavigationItem);
//# sourceMappingURL=CarouselNavigationItem.js.map
