{"version":3,"sources":["components/Carousel/CarouselNavigation.tsx"],"names":["tabListBehavior","mergeComponentVariables","PropTypes","React","customPropTypes","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","UIComponent","withSafeTypeForAs","CarouselNavigationItem","CarouselNavigation","variables","predefinedProps","onClick","e","itemProps","props","accessibility","activeIndex","iconOnly","items","primary","secondary","vertical","item","index","create","defaultProps","active","childBehaviors","undefined","overrideProps","handleItemOverrides","ElementType","classes","styles","unhandledProps","children","root","attributes","getAttributes","forElements","renderItems","createCommon","content","oneOfType","number","string","bool","collectionShorthand","onItemClick","func","every","disallow","as","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { tabListBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior } from '@fluentui/react-bindings';\nimport { ComponentVariablesObject, mergeComponentVariables } from '@fluentui/styles';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n  UIComponent,\n} from '../../utils';\nimport { withSafeTypeForAs, WithAsProp, ShorthandCollection, ComponentEventHandler } from '../../types';\nimport CarouselNavigationItem, { CarouselNavigationItemProps } from './CarouselNavigationItem';\n\nexport interface CarouselNavigationProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active item. */\n  activeIndex?: number | string;\n\n  /** A navigation may have just icons. */\n  iconOnly?: boolean;\n\n  /** Shorthand array of props for Navigation. */\n  items?: ShorthandCollection<CarouselNavigationItemProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All item props.\n   */\n  onItemClick?: ComponentEventHandler<CarouselNavigationItemProps>;\n\n  /** The carousel navigation can have primary type. */\n  primary?: boolean;\n\n  /** The carousel navigation can have secondary type. */\n  secondary?: boolean;\n\n  /** A vertical carousel navigation displays elements vertically. */\n  vertical?: boolean;\n}\n\nclass CarouselNavigation extends UIComponent<WithAsProp<CarouselNavigationProps>> {\n  static displayName = 'CarouselNavigation';\n\n  static className = 'ui-carousel__navigation';\n\n  static create: ShorthandFactory<CarouselNavigationProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    iconOnly: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    onItemClick: PropTypes.func,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: tabListBehavior,\n    as: 'ul',\n  };\n\n  handleItemOverrides = variables => predefinedProps => ({\n    onClick: (e, itemProps) => {\n      _.invoke(this.props, 'onItemClick', e, itemProps);\n      _.invoke(predefinedProps, 'onClick', e, itemProps);\n    },\n    variables: mergeComponentVariables(variables, predefinedProps.variables),\n  });\n\n  renderItems = (variables: ComponentVariablesObject, accessibility: ReactAccessibilityBehavior) => {\n    const { activeIndex, iconOnly, items, primary, secondary, vertical } = this.props;\n\n    return _.map(items, (item, index) =>\n      CarouselNavigationItem.create(item, {\n        defaultProps: () => ({\n          active: index === activeIndex,\n          iconOnly,\n          index,\n          primary,\n          secondary,\n          vertical,\n          accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n        }),\n        overrideProps: this.handleItemOverrides(variables),\n      }),\n    );\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, variables, unhandledProps }) {\n    const { children } = this.props;\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n      >\n        {childrenExist(children) ? children : this.renderItems(variables, accessibility)}\n      </ElementType>\n    );\n  }\n}\n\nCarouselNavigation.create = createShorthandFactory({\n  Component: CarouselNavigation,\n  mappedArrayProp: 'items',\n});\n\n/**\n * A Carousel navigation helps switching between Carousel items.\n */\nexport default withSafeTypeForAs<typeof CarouselNavigation, CarouselNavigationProps, 'ul'>(CarouselNavigation);\n"],"file":"CarouselNavigation.js"}