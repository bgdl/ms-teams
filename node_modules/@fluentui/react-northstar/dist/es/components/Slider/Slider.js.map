{"version":3,"sources":["components/Slider/Slider.tsx"],"names":["sliderBehavior","getElementType","useUnhandledProps","useAccessibility","useStateManager","useStyles","useTelemetry","handleRef","Ref","customPropTypes","createSliderManager","cx","PropTypes","React","ThemeContext","commonPropTypes","partitionHTMLProps","setWhatInputSource","createShorthandFactory","withSafeTypeForAs","Box","processInputValues","p","min","max","value","isNaN","Number","Slider","defaultProps","Math","valueAsPercentage","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","getA11yValueMessageOnChange","defaultValue","input","userInputRef","inputRef","step","className","styles","variables","design","fluid","vertical","disabled","createRef","mapPropsToInitialState","mapPropsToState","state","actions","numericMin","numericMax","numericValue","getA11Props","debugName","rtl","mapPropsToBehavior","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","handleInputOverrides","onChange","e","change","onMouseDown","target","ElementType","unhandledProps","handledProps","htmlInputProps","restProps","type","inputElement","create","as","slotClassNames","overrideProps","element","root","inputWrapper","rail","track","width","thumb","String","propTypes","createCommon","content","oneOfType","string","number","bool","func","itemShorthand","ref","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, sliderBehavior, SliderBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  partitionHTMLProps,\n  UIComponentProps,\n  setWhatInputSource,\n  createShorthandFactory,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  WithAsProp,\n  withSafeTypeForAs,\n  Omit,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport Box, { BoxProps } from '../Box/Box';\n\nconst processInputValues = (\n  p: Pick<SliderProps, 'min' | 'max'> & { value: string },\n): { min: number; max: number; value: number; valueAsPercentage: string } => {\n  let min = _.toNumber(p.min);\n  let max = _.toNumber(p.max);\n  let value = _.toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  const valueAsPercentage = `${(100 * (value - min)) / (max - min)}%`;\n\n  return { min, max, value, valueAsPercentage };\n};\n\nexport interface SliderSlotClassNames {\n  input: string;\n  inputWrapper: string;\n  rail: string;\n  thumb: string;\n  track: string;\n}\n\nexport interface SliderProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    Omit<SupportedIntrinsicInputProps, 'defaultValue'> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<SliderBehaviorProps>;\n\n  /** The default value of the slider. */\n  defaultValue?: string | number;\n\n  /** A slider can be read-only and unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A slider can take the width of its container. */\n  fluid?: boolean;\n\n  /**\n   * Callback that creates custom accessibility message a screen reader narrates when the value changes.\n   * @param props - Slider props.\n   */\n  getA11yValueMessageOnChange?: (props: SliderProps) => string;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The maximum value of the slider. */\n  max?: SupportedIntrinsicInputProps['max'];\n\n  /** The minimum value of the slider. */\n  min?: SupportedIntrinsicInputProps['min'];\n\n  /**\n   * Called after item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<SliderProps & { value: string }>;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to, or the special value 'any'.\n   * A string value of any means that no stepping is implied, and any value is allowed\n   * (barring other constraints, such as min and max).\n   */\n  step?: SupportedIntrinsicInputProps['step'];\n\n  /** The value of the slider. */\n  value?: string | number;\n\n  /** A slider can be displayed vertically. */\n  vertical?: boolean;\n}\n\nexport type SliderStylesProps = Pick<SliderProps, 'fluid' | 'disabled' | 'vertical'>;\n\nconst Slider: React.FC<WithAsProp<SliderProps>> &\n  FluentComponentStaticProps & { slotClassNames: SliderSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Slider.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    min,\n    max,\n    value,\n    getA11yValueMessageOnChange,\n    defaultValue,\n    input,\n    inputRef: userInputRef,\n    step,\n    className,\n    styles,\n    variables,\n    design,\n    fluid,\n    vertical,\n    disabled,\n  } = props;\n  const inputRef = React.createRef<HTMLElement>();\n\n  const { state, actions } = useStateManager(createSliderManager, {\n    mapPropsToInitialState: () => ({\n      value: defaultValue as string,\n    }),\n    mapPropsToState: () => ({\n      value: value as string,\n    }),\n  });\n  const { min: numericMin, max: numericMax, value: numericValue, valueAsPercentage } = processInputValues({\n    min,\n    max,\n    value: state.value || '',\n  });\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Slider.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: () => ({\n      disabled,\n      getA11yValueMessageOnChange,\n      max: numericMax,\n      min: numericMax,\n      value: numericValue,\n      vertical,\n    }),\n  });\n  const { classes, styles: resolvedStyles } = useStyles<SliderStylesProps>(Slider.displayName, {\n    className: Slider.className,\n    mapPropsToStyles: () => ({\n      fluid,\n      vertical,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleInputOverrides = () => ({\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = _.get(e, 'target.value');\n      _.invoke(props, 'onChange', e, { ...props, value });\n      actions.change(value);\n    },\n    onMouseDown: (e: React.MouseEvent<HTMLInputElement>) => {\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(props, 'onMouseDown', e, props);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Slider.handledProps, props);\n  const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n  const type = 'range';\n\n  // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n  const inputElement = Box.create(input || type, {\n    defaultProps: () =>\n      getA11Props('input', {\n        ...htmlInputProps,\n        as: 'input',\n        className: Slider.slotClassNames.input,\n        fluid,\n        min: numericMin,\n        max: numericMax,\n        step,\n        styles: resolvedStyles.input,\n        type,\n        value: numericValue,\n        vertical,\n      }),\n    overrideProps: handleInputOverrides,\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...restProps })}>\n      <div\n        {...getA11Props('inputWrapper', {\n          className: cx(Slider.slotClassNames.inputWrapper, classes.inputWrapper),\n        })}\n      >\n        <span {...getA11Props('rail', { className: cx(Slider.slotClassNames.rail, classes.rail) })} />\n        <span\n          {...getA11Props('track', { className: cx(Slider.slotClassNames.track, classes.track) })}\n          style={{ width: valueAsPercentage }}\n        />\n        <Ref\n          innerRef={(inputElement: HTMLElement) => {\n            handleRef(inputRef, inputElement);\n            handleRef(userInputRef, inputElement);\n          }}\n        >\n          {inputElement}\n        </Ref>\n        {/* the thumb slot needs to appear after the input slot */}\n        <span\n          {...getA11Props('thumb', { className: cx(Slider.slotClassNames.thumb, classes.thumb) })}\n          style={{ [context.rtl ? 'right' : 'left']: valueAsPercentage }}\n        />\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSlider.className = 'ui-slider';\nSlider.displayName = 'Slider';\n\nSlider.slotClassNames = {\n  input: `${Slider.className}__input`,\n  inputWrapper: `${Slider.className}__input-wrapper`,\n  rail: `${Slider.className}__rail`,\n  thumb: `${Slider.className}__thumb`,\n  track: `${Slider.className}__track`,\n};\n\nSlider.defaultProps = {\n  accessibility: sliderBehavior,\n  getA11yValueMessageOnChange: ({ value }) => String(value),\n  max: 100,\n  min: 0,\n  step: 1,\n};\nSlider.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fluid: PropTypes.bool,\n  getA11yValueMessageOnChange: PropTypes.func,\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\nSlider.handledProps = Object.keys(Slider.propTypes) as any;\n\nSlider.create = createShorthandFactory({ Component: Slider, mappedProp: 'value' });\n\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\nexport default withSafeTypeForAs<typeof Slider, SliderProps, 'input'>(Slider);\n"],"file":"Slider.js"}