{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["getElementType","useUnhandledProps","useAccessibility","useStyles","useTelemetry","customPropTypes","PropTypes","React","ThemeContext","withSafeTypeForAs","childrenExist","createShorthandFactory","commonPropTypes","rtlTextContainer","Box","ChatItemContextProvider","ChatItem","props","context","useContext","displayName","telemetry","setStart","setEnd","accessibility","attached","children","className","contentPosition","design","gutter","message","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","create","defaultProps","slotClassNames","messageElement","ElementType","unhandledProps","handledProps","element","root","getAttributes","forElements","as","propTypes","createCommon","content","oneOfType","bool","oneOf","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\nconst ChatItem: React.FC<WithAsProp<ChatItemProps>> &\n  FluentComponentStaticProps<ChatItemProps> & {\n    slotClassNames: ChatItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: ChatItem.className,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: ChatItem.slotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: ChatItem.slotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.className = 'ui-chat__item';\nChatItem.displayName = 'ChatItem';\n\nChatItem.slotClassNames = {\n  message: `${ChatItem.className}__message`,\n  gutter: `${ChatItem.className}__gutter`,\n};\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport default withSafeTypeForAs<typeof ChatItem, ChatItemProps, 'li'>(ChatItem);\n"],"file":"ChatItem.js"}