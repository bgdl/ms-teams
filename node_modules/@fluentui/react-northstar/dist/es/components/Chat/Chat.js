import _map from "lodash/map";
import { chatBehavior } from '@fluentui/accessibility';
import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';
import * as customPropTypes from '@fluentui/react-proptypes';
import * as PropTypes from 'prop-types';
import * as React from 'react'; // @ts-ignore

import { ThemeContext } from 'react-fela';
import { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';
import { withSafeTypeForAs } from '../../types';
import ChatItem from './ChatItem';
import ChatMessage from './ChatMessage';

var Chat = function Chat(props) {
  var context = React.useContext(ThemeContext);

  var _useTelemetry = useTelemetry(Chat.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      design = props.design,
      items = props.items,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = useAccessibility(accessibility, {
    debugName: Chat.displayName,
    rtl: context.rtl
  });

  var _useStyles = useStyles(Chat.displayName, {
    className: Chat.className,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = getElementType(props);
  var unhandledProps = useUnhandledProps(Chat.handledProps, props);
  var element = getA11Props.unstable_wrapWithFocusZone(React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, rtlTextContainer.getAttributes({
    forElements: [children]
  }), {}, unhandledProps)), childrenExist(children) ? children : _map(items, function (item) {
    return ChatItem.create(item, {
      defaultProps: function defaultProps() {
        return {
          className: Chat.slotClassNames.item
        };
      }
    });
  })));
  setEnd();
  return element;
};

Chat.className = 'ui-chat';
Chat.displayName = 'Chat';
Chat.slotClassNames = {
  item: "".concat(Chat.className, "__item")
};
Chat.defaultProps = {
  accessibility: chatBehavior,
  as: 'ul'
};
Chat.propTypes = Object.assign({}, commonPropTypes.createCommon({
  content: false
}), {
  items: PropTypes.arrayOf(customPropTypes.itemShorthand)
});
Chat.handledProps = Object.keys(Chat.propTypes);
Chat.Item = ChatItem;
Chat.Message = ChatMessage;
Chat.create = createShorthandFactory({
  Component: Chat
});
/**
 * A Chat displays messages from a conversation between multiple users.
 */

export default withSafeTypeForAs(Chat);
//# sourceMappingURL=Chat.js.map
