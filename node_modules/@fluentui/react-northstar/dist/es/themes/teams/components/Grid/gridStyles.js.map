{"version":3,"sources":["themes/teams/components/Grid/gridStyles.ts"],"names":["getCSSTemplateValue","template","templateAsNumber","Number","isNaN","String","gridStyles","root","props","variables","height","width","defaultColumnCount","gridGap","padding","rows","columns","display","justifyContent","gridAutoFlow","gridTemplateRows","gridTemplateColumns","outlineOffset"],"mappings":"AAIA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAuC;AACjE,MAAMC,gBAAgB,GAAGC,MAAM,CAACF,QAAD,CAA/B;AAEA,SAAO,CAACG,KAAK,CAACF,gBAAD,CAAN,IAA4BA,gBAAgB,GAAG,CAA/C,oBAA6DD,QAA7D,cAAgFI,MAAM,CAACJ,QAAD,CAA7F;AACD,CAJD;;AAMA,IAAMK,UAAiE,GAAG;AACxEC,EAAAA,IAAI,EAAE,oBAAkG;AAAA,QAA/FC,KAA+F,QAA/FA,KAA+F;AAAA,8BAAxFC,SAAwF;AAAA,QAA3EC,MAA2E,kBAA3EA,MAA2E;AAAA,QAAnEC,KAAmE,kBAAnEA,KAAmE;AAAA,QAA5DC,kBAA4D,kBAA5DA,kBAA4D;AAAA,QAAxCC,OAAwC,kBAAxCA,OAAwC;AAAA,QAA/BC,OAA+B,kBAA/BA,OAA+B;AAAA,QAC9FC,IAD8F,GACxCP,KADwC,CAC9FO,IAD8F;AAAA,yBACxCP,KADwC,CACxFQ,OADwF;AAAA,QACxFA,OADwF,+BAC9E,CAACR,KAAK,CAACO,IAAP,IAAeH,kBAD+D;AAGtG;AACEF,MAAAA,MAAM,EAANA,MADF;AAEEC,MAAAA,KAAK,EAALA,KAFF;AAGEG,MAAAA,OAAO,EAAPA,OAHF;AAIED,MAAAA,OAAO,EAAPA,OAJF;AAKEI,MAAAA,OAAO,EAAE,MALX;AAMEC,MAAAA,cAAc,EAAE;AANlB,OAQMH,IAAI,IAAI,CAACC,OAAT,IAAoB;AAAEG,MAAAA,YAAY,EAAE;AAAhB,KAR1B,MASMJ,IAAI,IAAI;AAAEK,MAAAA,gBAAgB,EAAEpB,mBAAmB,CAACe,IAAD;AAAvC,KATd,MAUMC,OAAO,IAAI;AAAEK,MAAAA,mBAAmB,EAAErB,mBAAmB,CAACgB,OAAD;AAA1C,KAVjB;AAYE,eAAS;AAAEM,QAAAA,aAAa,EAAE;AAAjB;AAZX;AAcD;AAlBuE,CAA1E;AAqBA,eAAehB,UAAf","sourcesContent":["import { GridVariables } from './gridVariables';\nimport { ComponentSlotStylesPrepared, ICSSInJSStyle } from '@fluentui/styles';\nimport { GridProps } from '../../../../components/Grid/Grid';\n\nconst getCSSTemplateValue = (template: string | number): string => {\n  const templateAsNumber = Number(template);\n\n  return !isNaN(templateAsNumber) && templateAsNumber > 0 ? `repeat(${template}, 1fr)` : String(template);\n};\n\nconst gridStyles: ComponentSlotStylesPrepared<GridProps, GridVariables> = {\n  root: ({ props, variables: { height, width, defaultColumnCount, gridGap, padding } }): ICSSInJSStyle => {\n    const { rows, columns = !props.rows && defaultColumnCount } = props;\n\n    return {\n      height,\n      width,\n      padding,\n      gridGap,\n      display: 'grid',\n      justifyContent: 'space-evenly',\n\n      ...(rows && !columns && { gridAutoFlow: 'column' }),\n      ...(rows && { gridTemplateRows: getCSSTemplateValue(rows) }),\n      ...(columns && { gridTemplateColumns: getCSSTemplateValue(columns) }),\n\n      '& > *': { outlineOffset: '-3px' },\n    };\n  },\n};\n\nexport default gridStyles;\n"],"file":"gridStyles.js"}