"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _reactBindings = require("@fluentui/react-bindings");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _PopperJS = _interopRequireWildcard(require("popper.js"));

var React = _interopRequireWildcard(require("react"));

var _isBrowser = _interopRequireDefault(require("../isBrowser"));

var _getScrollParent = _interopRequireDefault(require("./getScrollParent"));

var _positioningHelper = require("./positioningHelper");

/**
 * Memoize a result using deep equality. This hook has two advantages over
 * React.useMemo: it uses deep equality to compare memo keys, and it guarantees
 * that the memo function will only be called if the keys are unequal.
 * React.useMemo cannot be relied on to do this, since it is only a performance
 * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).
 *
 * Copied from https://github.com/apollographql/react-apollo/blob/master/packages/hooks/src/utils/useDeepMemo.ts.
 */
function useDeepMemo(memoFn, key) {
  var ref = React.useRef();

  if (!ref.current || !(0, _isEqual2.default)(key, ref.current.key)) {
    ref.current = {
      key: key,
      value: memoFn()
    };
  }

  return ref.current.value;
} // `popper.js` has a UMD build without `.default`, it breaks CJS builds:
// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320


var createPopper = function createPopper(reference, popper, options) {
  var instance = new (_PopperJS.default || _PopperJS)(reference, popper, Object.assign({}, options, {
    eventsEnabled: false
  }));
  var originalUpdate = instance.update;

  instance.update = function () {
    // Fix Popper.js initial positioning display issue
    // https://github.com/popperjs/popper.js/issues/457#issuecomment-367692177
    popper.style.left = '0';
    popper.style.top = '0';
    originalUpdate();
  };

  var actualWindow = popper.ownerDocument.defaultView;

  instance.scheduleUpdate = function () {
    return actualWindow.requestAnimationFrame(instance.update);
  };

  instance.enableEventListeners();
  return instance;
};
/**
 * Popper relies on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.
 */


var Popper = function Popper(props) {
  var align = props.align,
      children = props.children,
      enabled = props.enabled,
      flipBoundary = props.flipBoundary,
      userModifiers = props.modifiers,
      offset = props.offset,
      overflowBoundary = props.overflowBoundary,
      pointerTargetRef = props.pointerTargetRef,
      position = props.position,
      positionFixed = props.positionFixed,
      _props$positioningDep = props.positioningDependencies,
      positioningDependencies = _props$positioningDep === void 0 ? [] : _props$positioningDep,
      rtl = props.rtl,
      targetRef = props.targetRef,
      unstable_pinned = props.unstable_pinned;
  var proposedPlacement = (0, _positioningHelper.getPlacement)({
    align: align,
    position: position,
    rtl: rtl
  });
  var popperRef = React.useRef();
  var contentRef = React.useRef(null);
  var latestPlacement = React.useRef(proposedPlacement);

  var _React$useState = React.useState(proposedPlacement),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      computedPlacement = _React$useState2[0],
      setComputedPlacement = _React$useState2[1];

  var hasDocument = (0, _isBrowser.default)();
  var hasScrollableElement = React.useMemo(function () {
    if (hasDocument) {
      var scrollParentElement = (0, _getScrollParent.default)(contentRef.current);
      return scrollParentElement !== scrollParentElement.ownerDocument.body;
    }

    return false;
  }, [contentRef, hasDocument]); // Is a broken dependency and can cause potential bugs, we should rethink this as all other refs
  // in this component.

  var computedModifiers = useDeepMemo(function () {
    return (0, _merge2.default)(
    /**
     * This prevents blurrines in chrome, when the coordinates are odd numbers alternative
     * would be to use `fn` and manipulate the computed style or ask popper to fix it but
     * since there is presumably only handful of poppers displayed on the page, the
     * performance impact should be minimal.
     */
    {
      computeStyle: {
        gpuAcceleration: false
      }
    }, {
      flip: {
        padding: 0,
        flipVariationsByContent: true
      }
    }, {
      preventOverflow: {
        padding: 0
      }
    }, offset && {
      offset: {
        offset: rtl ? (0, _positioningHelper.applyRtlToOffset)(offset, position) : offset
      },
      keepTogether: {
        enabled: false
      }
    },
    /**
     * When the popper box is placed in the context of a scrollable element, we need to set
     * preventOverflow.escapeWithReference to true and flip.boundariesElement to 'scrollParent'
     * (default is 'viewport') so that the popper box will stick with the targetRef when we
     * scroll targetRef out of the viewport.
     */
    hasScrollableElement && {
      preventOverflow: {
        escapeWithReference: true
      },
      flip: {
        boundariesElement: 'scrollParent'
      }
    }, flipBoundary && {
      flip: {
        boundariesElement: flipBoundary
      }
    }, overflowBoundary && {
      preventOverflow: {
        boundariesElement: overflowBoundary
      }
    }, userModifiers,
    /**
     * unstable_pinned disables the flip modifier by setting flip.enabled to false; this
     * disables automatic repositioning of the popper box; it will always be placed according to
     * the values of `align` and `position` props, regardless of the size of the component, the
     * reference element or the viewport.
     */
    unstable_pinned && {
      flip: {
        enabled: false
      }
    });
  }, [hasScrollableElement, position, offset, rtl, unstable_pinned, userModifiers]);
  var scheduleUpdate = React.useCallback(function () {
    if (popperRef.current) {
      popperRef.current.scheduleUpdate();
    }
  }, []);
  var destroyInstance = React.useCallback(function () {
    if (popperRef.current) {
      popperRef.current.destroy();

      if (popperRef.current.popper) {
        // Popper keeps a reference to the DOM node, which needs to be cleaned up
        // temporarily fix it here until fixed properly in popper
        popperRef.current.popper = null;
      }

      popperRef.current = null;
    }
  }, []);
  var createInstance = React.useCallback(function () {
    destroyInstance();
    var reference = targetRef && (0, _reactComponentRef.isRefObject)(targetRef) ? targetRef.current : targetRef;

    if (!enabled || !reference || !contentRef.current) {
      return;
    }

    var hasPointer = !!(pointerTargetRef && pointerTargetRef.current);

    var handleUpdate = function handleUpdate(data) {
      // PopperJS performs computations that might update the computed placement: auto positioning, flipping the
      // placement in case the popper box should be rendered at the edge of the viewport and does not fit
      if (data.placement !== latestPlacement.current) {
        latestPlacement.current = data.placement;
        setComputedPlacement(data.placement);
      }
    };

    var options = {
      placement: proposedPlacement,
      positionFixed: positionFixed,
      modifiers: Object.assign({}, computedModifiers, {
        /**
         * This modifier is necessary in order to render the pointer. Refs are resolved in effects, so it can't be
         * placed under computed modifiers. Deep merge is not required as this modifier has only these properties.
         * `arrow` modifier also requires `keepTogether`.
         */
        keepTogether: {
          enabled: hasPointer
        },
        arrow: {
          enabled: hasPointer,
          element: pointerTargetRef && pointerTargetRef.current
        }
      }),
      onCreate: handleUpdate,
      onUpdate: handleUpdate
    };
    popperRef.current = createPopper(reference, contentRef.current, options);
  }, [// TODO review dependencies for popperHasScrollableParent
  enabled, computedModifiers, pointerTargetRef, positionFixed, proposedPlacement, targetRef, unstable_pinned]);
  (0, _reactBindings.useIsomorphicLayoutEffect)(function () {
    createInstance();
    return destroyInstance;
  }, [createInstance]);
  React.useEffect(scheduleUpdate, [].concat((0, _toConsumableArray2.default)(positioningDependencies), [computedPlacement]));
  var child = typeof children === 'function' ? children({
    placement: computedPlacement,
    scheduleUpdate: scheduleUpdate
  }) : children;
  return child ? React.createElement(_reactComponentRef.Ref, {
    innerRef: contentRef
  }, React.Children.only(child)) : null;
};

Popper.defaultProps = {
  enabled: true,
  positionFixed: false,
  positioningDependencies: []
};
var _default = Popper;
exports.default = _default;
//# sourceMappingURL=Popper.js.map
