"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = require("../../../../utils");

var _SvgIcon = _interopRequireDefault(require("../../../../components/SvgIcon/SvgIcon"));

var _getBorderFocusStyles = _interopRequireDefault(require("../../getBorderFocusStyles"));

var _getIconFillOrOutlineStyles = _interopRequireDefault(require("../../getIconFillOrOutlineStyles"));

var _Button = _interopRequireDefault(require("../../../../components/Button/Button"));

var attachmentStyles = {
  root: function root(_ref) {
    var _Object$assign, _hover;

    var p = _ref.props,
        v = _ref.variables,
        siteVariables = _ref.theme.siteVariables;
    var borderFocusStyles = (0, _getBorderFocusStyles.default)({
      variables: siteVariables,
      borderRadius: v.borderRadius
    });
    return Object.assign({
      position: 'relative',
      display: 'inline-flex',
      alignItems: 'center',
      width: '100%',
      maxWidth: (0, _utils.pxToRem)(440),
      minHeight: (0, _utils.pxToRem)(48),
      padding: v.padding,
      marginBottom: (0, _utils.pxToRem)(2),
      marginRight: (0, _utils.pxToRem)(2),
      background: v.backgroundColor,
      color: v.textColor,
      boxShadow: v.boxShadow,
      border: "".concat(siteVariables.borderWidth, " solid ").concat(v.borderColor),
      borderRadius: v.borderRadius
    }, borderFocusStyles, {}, p.actionable && {
      cursor: 'pointer',
      ':focus-visible': Object.assign({}, borderFocusStyles[':focus-visible'], (_Object$assign = {
        backgroundColor: v.focusBackgroundColor,
        color: v.focusColor
      }, (0, _defineProperty2.default)(_Object$assign, "& .".concat(_Button.default.className), {
        color: v.siblingsFocusColor
      }), (0, _defineProperty2.default)(_Object$assign, "& .".concat(_SvgIcon.default.className), {
        color: v.siblingsFocusColor
      }), _Object$assign)),
      ':hover': (_hover = {
        background: v.backgroundColorHover,
        color: v.textColorHover
      }, (0, _defineProperty2.default)(_hover, "& .".concat(_Button.default.className), {
        color: v.siblingsHoverColor
      }), (0, _defineProperty2.default)(_hover, "& .".concat(_SvgIcon.default.className), {
        color: v.siblingsHoverColor
      }), _hover)
    });
  },
  content: function content() {
    return {
      flex: 1
    };
  },
  header: function header(_ref2) {
    var v = _ref2.variables;
    return {
      fontSize: v.headerFontSize,
      fontWeight: v.headerFontWeight,
      lineHeight: v.headerLineHeight
    };
  },
  description: function description(_ref3) {
    var v = _ref3.variables;
    return {
      display: 'block',
      fontSize: v.descriptionFontSize,
      fontWeight: v.descriptionFontWeight,
      lineHeight: v.descriptionLineHeight
    };
  },
  icon: function icon(_ref4) {
    var _ref5;

    var v = _ref4.variables;
    return _ref5 = {
      flex: '0 0 auto',
      height: v.iconSize,
      width: v.iconSize
    }, (0, _defineProperty2.default)(_ref5, "& .".concat(_SvgIcon.default.className), {
      height: '100%',
      width: '100%',
      '& svg': {
        height: '100%',
        width: '100%'
      }
    }), (0, _defineProperty2.default)(_ref5, "marginRight", v.iconSpace), _ref5;
  },
  action: function action(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables,
        siteVariables = _ref6.theme.siteVariables;
    var iconFilledStyles = (0, _getIconFillOrOutlineStyles.default)({
      outline: false
    });
    var borderFocusStyles = (0, _getBorderFocusStyles.default)({
      variables: siteVariables,
      borderRadius: v.borderRadius
    });
    return Object.assign((0, _defineProperty2.default)({}, "& .".concat(_SvgIcon.default.className), {
      color: v.textColor // this breaks the color change on hover

    }), (0, _getIconFillOrOutlineStyles.default)({
      outline: true
    }), {
      ':hover': Object.assign({}, iconFilledStyles, {
        background: 'transparent'
      }),
      ':focus': borderFocusStyles[':focus'],
      ':focus-visible': Object.assign({}, iconFilledStyles, {}, borderFocusStyles[':focus-visible'])
    });
  },
  progress: function progress(_ref7) {
    var p = _ref7.props,
        v = _ref7.variables;
    return {
      transition: 'width 0.2s',
      position: 'absolute',
      display: 'block',
      bottom: 0,
      left: 0,
      maxWidth: '100%',
      height: (0, _utils.pxToRem)(v.progressHeight),
      background: v.progressColor
    };
  }
};
var _default = attachmentStyles;
exports.default = _default;
//# sourceMappingURL=attachmentStyles.js.map
