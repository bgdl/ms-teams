{"version":3,"sources":["components/Table/TableCell.tsx"],"names":["TableCell","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","cellRef","useRef","children","content","truncateContent","className","design","styles","variables","hasChildren","ElementType","unhandledProps","handledProps","getA11yProps","accessibility","debugName","actionHandlers","focusCell","e","preventDefault","current","focus","performClick","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","currentTarget","target","element","unstable_wrapWithFocusZone","root","onClick","Box","create","defaultProps","slotClassNames","propTypes","commonPropTypes","createCommon","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","nodeContent","bool","Object","keys","tableCellBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport Box, { BoxProps } from '../Box/Box';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nconst TableCell: React.FC<WithAsProp<TableCellProps>> &\n  FluentComponentStaticProps<TableCellProps> & {\n    slotClassNames: TableCellSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: TableCell.className,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\n\nTableCell.className = 'ui-table__cell';\n\nTableCell.slotClassNames = {\n  content: `${TableCell.className}__content`,\n};\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n\n/**\n * Component represents a table cell\n */\nexport default withSafeTypeForAs<typeof TableCell, TableCellProps, 'div'>(TableCell);\n"],"file":"TableCell.js"}