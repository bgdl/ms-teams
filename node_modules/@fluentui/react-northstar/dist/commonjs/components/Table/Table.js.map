{"version":3,"sources":["components/Table/Table.tsx"],"names":["handleVariablesOverrides","variables","predefinedProps","Table","accessibility","props","rows","compact","row","index","onClick","e","overrideProps","TableRow","create","defaultProps","childBehaviors","undefined","header","headerRowProps","className","slotClassNames","ElementType","classes","unhandledProps","children","hasChildren","root","attributes","keyHandlers","renderHeader","renderRows","UIComponent","TableCell","commonPropTypes","createCommon","content","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","nodeContent","itemShorthand","collectionShorthand","bool","as","tableBehavior"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAEA;;AACA;;AASA;;AACA;;AACA;;AACA;;AA0BA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,SAAS;AAAA,SAAI,UAAAC,eAAe;AAAA,WAAK;AAChED,MAAAA,SAAS,EAAE,qCAAwBA,SAAxB,EAAmCC,eAAe,CAACD,SAAnD;AADqD,KAAL;AAAA,GAAnB;AAAA,CAA1C;;IAIME,K;;;;;;;;;;;;+BA6BOC,a,EAA2CH,S,EAAqC;AAAA,wBAC/D,KAAKI,KAD0D;AAAA,UACjFC,IADiF,eACjFA,IADiF;AAAA,UAC3EC,OAD2E,eAC3EA,OAD2E;AAGzF,aAAO,mBAAMD,IAAN,EAAY,UAACE,GAAD,EAAqBC,KAArB,EAAuC;AACxD,YAAMJ,KAAK,GAAG;AACZE,UAAAA,OAAO,EAAPA,OADY;AAEZG,UAAAA,OAAO,EAAE,iBAACC,CAAD,EAAIN,KAAJ,EAAc;AACrB,kCAASG,GAAT,EAAc,SAAd,EAAyBG,CAAzB,EAA4BN,KAA5B;AACD;AAJW,SAAd;AAMA,YAAMO,aAAa,GAAGZ,wBAAwB,CAACC,SAAD,CAA9C;AACA,eAAOY,kBAASC,MAAT,CAAgBN,GAAhB,EAAqB;AAC1BO,UAAAA,YAAY,EAAE;AAAA,qCACTV,KADS;AAEZD,cAAAA,aAAa,EAAEA,aAAa,CAACY,cAAd,GAA+BZ,aAAa,CAACY,cAAd,CAA6BR,GAA5D,GAAkES;AAFrE;AAAA,WADY;AAK1BL,UAAAA,aAAa,EAAbA;AAL0B,SAArB,CAAP;AAOD,OAfM,CAAP;AAgBD;;;iCAEYR,a,EAA2CH,S,EAAqC;AAAA,yBAC/D,KAAKI,KAD0D;AAAA,UACnFa,MADmF,gBACnFA,MADmF;AAAA,UAC3EX,OAD2E,gBAC3EA,OAD2E;;AAE3F,UAAI,CAACW,MAAL,EAAa;AACX,eAAO,IAAP;AACD;;AAED,UAAMC,cAAc,GAAG;AACrBD,QAAAA,MAAM,EAAE,IADa;AAErBX,QAAAA,OAAO,EAAPA,OAFqB;AAGrBa,QAAAA,SAAS,EAAEjB,KAAK,CAACkB,cAAN,CAAqBH;AAHX,OAAvB;AAMA,UAAMN,aAAa,GAAGZ,wBAAwB,CAACC,SAAD,CAA9C;AAEA,aAAOY,kBAASC,MAAT,CAAgBI,MAAhB,EAAwB;AAC7BH,QAAAA,YAAY,EAAE;AAAA,mCACTI,cADS;AAEZf,YAAAA,aAAa,EAAEA,aAAa,CAACY,cAAd,GAA+BZ,aAAa,CAACY,cAAd,CAA6BR,GAA5D,GAAkES;AAFrE;AAAA,SADe;AAK7BL,QAAAA,aAAa,EAAbA;AAL6B,OAAxB,CAAP;AAOD;;;0CAQ4C;AAAA,UAL3CR,aAK2C,QAL3CA,aAK2C;AAAA,UAJ3CkB,WAI2C,QAJ3CA,WAI2C;AAAA,UAH3CC,OAG2C,QAH3CA,OAG2C;AAAA,UAF3CtB,SAE2C,QAF3CA,SAE2C;AAAA,UAD3CuB,cAC2C,QAD3CA,cAC2C;AAAA,UACnCC,QADmC,GACtB,KAAKpB,KADiB,CACnCoB,QADmC;AAE3C,UAAMC,WAAW,GAAG,0BAAcD,QAAd,CAApB;AAEA,aACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAEF,OAAO,CAACI;AADrB,SAEMvB,aAAa,CAACwB,UAAd,CAAyBD,IAF/B,EAGMH,cAHN,EAIM,0CAA8BpB,aAAa,CAACyB,WAAd,CAA0BF,IAAxD,EAA8DH,cAA9D,CAJN,GAMGE,WAAW,IAAID,QANlB,EAQG,CAACC,WAAD,IAAgB,KAAKI,YAAL,CAAkB1B,aAAlB,EAAiCH,SAAjC,CARnB,EAWG,CAACyB,WAAD,IAAgB,KAAKK,UAAL,CAAgB3B,aAAhB,EAA+BH,SAA/B,CAXnB,CADF;AAgBD;;;EAnGiB+B,kB;AAsGpB;;;;;;;;;;;;;;;;;;;;;8BAtGM7B,K,iBACiB,O;8BADjBA,K,eAEe,U;8BAFfA,K,UAIU8B,kB;8BAJV9B,K,SAKSU,iB;8BALTV,K,oBAOyC;AAC3Ce,EAAAA,MAAM,YAAKf,KAAK,CAACiB,SAAX;AADqC,C;8BAPzCjB,K,iCAYC+B,uBAAgBC,YAAhB,CAA6B;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHA,EAAAA,OAAO,EAAEC,eAAe,CAACC,KAAhB,CAAsB,CAC7BD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAD6B,EAE7BC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,OAAV,CAAkBL,eAAe,CAACM,WAAlC,CAAD,EAAiDN,eAAe,CAACM,WAAjE,CAApB,CAF6B,CAAtB,C;AAITzB,EAAAA,MAAM,EAAEmB,eAAe,CAACO,a;AACxBtC,EAAAA,IAAI,EAAE+B,eAAe,CAACQ,mB;AACtBtC,EAAAA,OAAO,EAAEiC,SAAS,CAACM;;8BArBjB3C,K,kBAwBkB;AACpB4C,EAAAA,EAAE,EAAE,KADgB;AAEpB3C,EAAAA,aAAa,EAAE4C;AAFK,C;;eAiGT,8BAAmD7C,KAAnD,C","sourcesContent":["import { Accessibility, tableBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  RenderResultConfig,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  UIComponent,\n  applyAccessibilityKeyHandlers,\n  childrenExist,\n} from '../../utils';\nimport { ComponentVariablesObject, mergeComponentVariables } from '@fluentui/styles';\nimport TableRow, { TableRowProps } from './TableRow';\nimport TableCell from './TableCell';\nimport { WithAsProp, ShorthandCollection, ShorthandValue, withSafeTypeForAs } from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nclass Table extends UIComponent<WithAsProp<TableProps>> {\n  static displayName = 'Table';\n  static className = 'ui-table';\n\n  static Cell = TableCell;\n  static Row = TableRow;\n\n  static slotClassNames: TableSlotClassNames = {\n    header: `${Table.className}__header`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    content: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n    ]),\n    header: customPropTypes.itemShorthand,\n    rows: customPropTypes.collectionShorthand,\n    compact: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: tableBehavior as Accessibility,\n  };\n\n  renderRows(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { rows, compact } = this.props;\n\n    return _.map(rows, (row: TableRowProps, index: number) => {\n      const props = {\n        compact,\n        onClick: (e, props) => {\n          _.invoke(row, 'onClick', e, props);\n        },\n      } as TableRowProps;\n      const overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(row, {\n        defaultProps: () => ({\n          ...props,\n          accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined,\n        }),\n        overrideProps,\n      });\n    });\n  }\n\n  renderHeader(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { header, compact } = this.props;\n    if (!header) {\n      return null;\n    }\n\n    const headerRowProps = {\n      header: true,\n      compact,\n      className: Table.slotClassNames.header,\n    } as TableRowProps;\n\n    const overrideProps = handleVariablesOverrides(variables);\n\n    return TableRow.create(header, {\n      defaultProps: () => ({\n        ...headerRowProps,\n        accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined,\n      }),\n      overrideProps,\n    });\n  }\n\n  renderComponent({\n    accessibility,\n    ElementType,\n    classes,\n    variables,\n    unhandledProps,\n  }: RenderResultConfig<any>): React.ReactNode {\n    const { children } = this.props;\n    const hasChildren = childrenExist(children);\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {hasChildren && children}\n        {/* <thead> */}\n        {!hasChildren && this.renderHeader(accessibility, variables)}\n        {/* </thead> */}\n        {/* <tbody> */}\n        {!hasChildren && this.renderRows(accessibility, variables)}\n        {/* </tbody> */}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport default withSafeTypeForAs<typeof Table, TableProps, 'div'>(Table);\n"],"file":"Table.js"}