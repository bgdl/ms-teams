{"version":3,"sources":["components/Table/TableRow.tsx"],"names":["handleVariablesOverrides","variables","predefinedProps","TableRow","React","createRef","unsetRowTabbable","e","rowRef","current","setAttribute","performClick","handleClick","currentTarget","target","props","preventDefault","accessibility","items","cellAccessibility","childBehaviors","cell","undefined","item","index","cellProps","overrideProps","TableCell","create","defaultProps","ElementType","classes","unhandledProps","children","hasChildren","root","attributes","keyHandlers","renderCells","UIComponent","commonPropTypes","createCommon","content","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","nodeContent","collectionShorthand","header","bool","compact","selected","tableRowBehavior","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { ReactAccessibilityBehavior } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport TableCell, { TableCellProps } from './TableCell';\nimport {\n  UIComponent,\n  RenderResultConfig,\n  UIComponentProps,\n  commonPropTypes,\n  ShorthandFactory,\n  createShorthandFactory,\n  applyAccessibilityKeyHandlers,\n  childrenExist,\n} from '../../utils';\nimport { ShorthandCollection, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { Accessibility, tableRowBehavior } from '@fluentui/accessibility';\nimport { ComponentVariablesObject, mergeComponentVariables } from '@fluentui/styles';\n\nexport interface TableRowProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility;\n\n  /**\n   * Row cells\n   */\n  items?: ShorthandCollection<TableCellProps>;\n\n  /**\n   * Is the row a table header\n   */\n  header?: boolean;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n\n  /**\n   * Whether a row is currently selected or not.\n   */\n  selected?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nclass TableRow extends UIComponent<WithAsProp<TableRowProps>> {\n  static displayName = 'TableRow';\n\n  static className = 'ui-table__row';\n\n  static create: ShorthandFactory<TableRowProps>;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    content: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n    ]),\n    items: customPropTypes.collectionShorthand,\n    header: PropTypes.bool,\n    compact: PropTypes.bool,\n    selected: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: tableRowBehavior as Accessibility,\n  };\n\n  rowRef = React.createRef<HTMLElement>();\n\n  actionHandlers = {\n    // https://github.com/microsoft/fluent-ui-react/issues/2150\n    unsetRowTabbable: e => {\n      this.rowRef.current.setAttribute('tabindex', '-1');\n    },\n    performClick: e => {\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = (e: React.SyntheticEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(this.props, 'onClick', e, this.props);\n      e.preventDefault();\n    }\n  };\n\n  renderCells(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { items } = this.props;\n\n    const cellAccessibility = accessibility.childBehaviors ? accessibility.childBehaviors.cell : undefined;\n\n    return _.map(items, (item: TableCellProps, index: number) => {\n      const cellProps = {\n        accessibility: cellAccessibility as Accessibility,\n      };\n      const overrideProps = handleVariablesOverrides(variables);\n\n      return TableCell.create(item, {\n        defaultProps: () => cellProps,\n        overrideProps,\n      });\n    });\n  }\n\n  renderComponent({\n    accessibility,\n    ElementType,\n    classes,\n    variables,\n    unhandledProps,\n  }: RenderResultConfig<any>): React.ReactNode {\n    const { children } = this.props;\n    const hasChildren = childrenExist(children);\n\n    return (\n      <Ref innerRef={this.rowRef}>\n        <ElementType\n          className={classes.root}\n          onClick={this.handleClick}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {hasChildren && children}\n          {!hasChildren && this.renderCells(accessibility, variables)}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nTableRow.create = createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });\n\n/**\n * Component represents a single row in a tabular structure\n */\nexport default withSafeTypeForAs<typeof TableRow, TableRowProps, 'div'>(TableRow);\n"],"file":"TableRow.js"}