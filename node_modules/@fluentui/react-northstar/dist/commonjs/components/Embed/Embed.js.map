{"version":3,"sources":["components/Embed/Embed.tsx"],"names":["Embed","performClick","event","handleClick","React","createRef","e","stopPropagation","preventDefault","iframeNil","props","iframe","newActive","state","active","setState","predefinedProps","onLoad","iframeLoaded","frameRef","current","contentWindow","focus","ElementType","classes","accessibility","unhandledProps","styles","variables","control","placeholder","video","placeholderElement","image","width","height","hasIframe","hasVideo","controlVisible","placeholderVisible","root","attributes","keyHandlers","Video","create","defaultProps","autoPlay","controls","loop","muted","poster","Box","as","overrideProps","handleFrameOverrides","className","slotClassNames","AutoControlledComponent","commonPropTypes","createCommon","children","content","PropTypes","bool","defaultActive","customPropTypes","itemShorthand","every","disallow","onActiveChange","func","onClick","string","embedBehavior","Component"],"mappings":"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","sourcesContent":["import { Accessibility, embedBehavior } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  applyAccessibilityKeyHandlers,\n  commonPropTypes,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport Image from '../Image/Image';\nimport Video, { VideoProps } from '../Video/Video';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\n\nexport interface EmbedSlotClassNames {\n  control: string;\n}\n\nexport interface EmbedProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Whether the embedded object should be active. */\n  active?: boolean;\n\n  /** Whether the embedded object should start active. */\n  defaultActive?: boolean;\n\n  /** Shorthand for an control. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for an embedded iframe. */\n  iframe?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'active' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveChange?: ComponentEventHandler<EmbedProps>;\n\n  /**\n   * Called when is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onClick?: ComponentEventHandler<EmbedProps>;\n\n  /** Image source URL for when video isn't playing. */\n  placeholder?: string;\n\n  /** Shorthand for an embedded video. */\n  video?: ShorthandValue<VideoProps>;\n}\n\nexport interface EmbedState {\n  active: boolean;\n  iframeLoaded: boolean;\n}\n\nclass Embed extends AutoControlledComponent<WithAsProp<EmbedProps>, EmbedState> {\n  static create: ShorthandFactory<EmbedProps>;\n\n  static className = 'ui-embed';\n\n  static displayName = 'Embed';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    active: PropTypes.bool,\n    defaultActive: PropTypes.bool,\n    control: customPropTypes.itemShorthand,\n    iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n    onActiveChange: PropTypes.func,\n    onClick: PropTypes.func,\n    placeholder: PropTypes.string,\n    video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]),\n  };\n\n  static defaultProps = {\n    as: 'span',\n    accessibility: embedBehavior as Accessibility,\n    control: {},\n  };\n\n  static autoControlledProps = ['active'];\n\n  static slotClassNames: EmbedSlotClassNames = {\n    control: `${Embed.className}__control`,\n  };\n\n  actionHandlers = {\n    performClick: event => this.handleClick(event),\n  };\n\n  frameRef = React.createRef<HTMLFrameElement>();\n\n  getInitialAutoControlledState(): EmbedState {\n    return { active: false, iframeLoaded: false };\n  }\n\n  handleClick = e => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const iframeNil = _.isNil(this.props.iframe);\n    const newActive = !this.state.active;\n\n    if (iframeNil || (!iframeNil && newActive)) {\n      this.setState({ active: newActive });\n      _.invoke(this.props, 'onActiveChange', e, { ...this.props, active: newActive });\n    }\n\n    _.invoke(this.props, 'onClick', e, { ...this.props, active: newActive });\n  };\n\n  handleFrameOverrides = predefinedProps => ({\n    onLoad: (e: React.SyntheticEvent) => {\n      _.invoke(predefinedProps, 'onLoad', e);\n\n      this.setState({ iframeLoaded: true });\n      this.frameRef.current.contentWindow.focus();\n    },\n  });\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, variables }) {\n    const { control, iframe, placeholder, video } = this.props;\n    const { active, iframeLoaded } = this.state;\n\n    const placeholderElement = placeholder ? (\n      <Image src={placeholder} styles={styles.image} variables={{ width: variables.width, height: variables.height }} />\n    ) : null;\n\n    const hasIframe = !_.isNil(iframe);\n    const hasVideo = !_.isNil(video);\n    const controlVisible = !active || hasVideo;\n    const placeholderVisible = !active || (hasIframe && active && !iframeLoaded);\n\n    return (\n      <ElementType\n        className={classes.root}\n        onClick={this.handleClick}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {active && (\n          <>\n            {Video.create(video, {\n              defaultProps: () => ({\n                autoPlay: true,\n                controls: false,\n                loop: true,\n                muted: true,\n                poster: placeholder,\n                styles: styles.video,\n                variables: {\n                  width: variables.width,\n                  height: variables.height,\n                },\n              }),\n            })}\n            {iframe && (\n              <Ref innerRef={this.frameRef}>\n                {Box.create(iframe, {\n                  defaultProps: () => ({\n                    as: 'iframe',\n                    styles: styles.iframe,\n                  }),\n                  overrideProps: this.handleFrameOverrides,\n                })}\n              </Ref>\n            )}\n          </>\n        )}\n\n        {placeholderVisible && placeholderElement}\n        {controlVisible &&\n          Box.create(control, {\n            defaultProps: () => ({\n              className: Embed.slotClassNames.control,\n              styles: styles.control,\n            }),\n          })}\n      </ElementType>\n    );\n  }\n}\n\nEmbed.create = createShorthandFactory({ Component: Embed });\n\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\nexport default withSafeTypeForAs<typeof Embed, EmbedProps, 'span'>(Embed);\n"],"file":"Embed.js"}