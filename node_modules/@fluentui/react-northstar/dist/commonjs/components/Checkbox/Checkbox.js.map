{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":["Checkbox","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","checked","className","defaultChecked","design","disabled","label","labelPosition","indicator","styles","toggle","variables","createCheckboxManager","mapPropsToInitialState","mapPropsToState","state","actions","getA11Props","accessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","e","preventDefault","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleChange","labelElement","Text","create","defaultProps","slotClassNames","element","root","onClick","onChange","Box","checkbox","checkboxBehavior","propTypes","commonPropTypes","createCommon","content","PropTypes","bool","customPropTypes","shorthandAllowingChildren","itemShorthand","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, checkboxBehavior, CheckboxBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createCheckboxManager } from '@fluentui/state';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { createShorthandFactory, ChildrenComponentProps, commonPropTypes, UIComponentProps } from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ProviderContextPrepared,\n  FluentComponentStaticProps,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Text, { TextProps } from '../Text/Text';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\n\nexport interface CheckboxSlotClassNames {\n  label: string;\n  indicator: string;\n}\n\nexport interface CheckboxProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<CheckboxBehaviorProps>;\n\n  /** A checkbox can be checked by default. */\n  defaultChecked?: SupportedIntrinsicInputProps['defaultChecked'];\n\n  /** A checkbox's checked state can be controlled. */\n  checked?: SupportedIntrinsicInputProps['checked'];\n\n  /** A checkbox can appear disabled and be unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A checkbox's indicator icon can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** A checkbox can render a label next to its indicator. */\n  label?: ShorthandValue<TextProps>;\n\n  /** A checkbox's label can be rendered in different positions. */\n  labelPosition?: 'start' | 'end';\n\n  /**\n   * Called after a checkbox's checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<CheckboxProps>;\n\n  /**\n   * Called after a checkbox is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CheckboxProps>;\n\n  /** A checkbox can be formatted to show an \"on or off\" choice. */\n  toggle?: boolean;\n}\n\nexport type CheckboxStylesProps = Pick<CheckboxProps, 'checked' | 'disabled' | 'labelPosition' | 'toggle'>;\n\nconst Checkbox: React.FC<WithAsProp<CheckboxProps>> &\n  FluentComponentStaticProps<CheckboxProps> & {\n    slotClassNames: CheckboxSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Checkbox.displayName, context.telemetry);\n  setStart();\n\n  const {\n    checked,\n    className,\n    defaultChecked,\n    design,\n    disabled,\n    label,\n    labelPosition,\n    indicator,\n    styles,\n    toggle,\n    variables,\n  } = props;\n\n  const { state, actions } = useStateManager(createCheckboxManager, {\n    mapPropsToInitialState: () => ({ checked: defaultChecked }),\n    mapPropsToState: () => ({ checked }),\n  });\n  const getA11Props = useAccessibility(props.accessibility, {\n    debugName: Checkbox.displayName,\n    mapPropsToBehavior: () => ({\n      checked: state.checked,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<CheckboxStylesProps>(Checkbox.displayName, {\n    className: Checkbox.className,\n    mapPropsToStyles: () => ({\n      checked: state.checked,\n      disabled,\n      labelPosition,\n      toggle,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Checkbox.handledProps, props);\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (!disabled) {\n      // Checkbox component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      const checked = !state.checked;\n\n      actions.toggle(checked);\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (!disabled) {\n      const checked = !state.checked;\n      actions.toggle(checked);\n\n      _.invoke(props, 'onClick', e, { ...props, checked });\n      _.invoke(props, 'onChange', e, { ...props, checked });\n    }\n  };\n\n  const labelElement = Text.create(label, {\n    defaultProps: () =>\n      getA11Props('label', {\n        styles: resolvedStyles.label,\n        className: Checkbox.slotClassNames.label,\n      }),\n  });\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        onChange: handleChange,\n        ...unhandledProps,\n      })}\n    >\n      {labelPosition === 'start' && labelElement}\n      {Box.create(indicator, {\n        defaultProps: () =>\n          getA11Props('indicator', {\n            className: Checkbox.slotClassNames.indicator,\n            styles: toggle ? resolvedStyles.toggle : resolvedStyles.checkbox,\n          }),\n      })}\n      {labelPosition === 'end' && labelElement}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.className = 'ui-checkbox';\n\nCheckbox.defaultProps = {\n  accessibility: checkboxBehavior,\n  indicator: {},\n  labelPosition: 'end',\n};\nCheckbox.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  indicator: customPropTypes.shorthandAllowingChildren,\n  label: customPropTypes.itemShorthand,\n  labelPosition: PropTypes.oneOf(['start', 'end']),\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  toggle: PropTypes.bool,\n};\nCheckbox.handledProps = Object.keys(Checkbox.propTypes) as any;\n\nCheckbox.slotClassNames = {\n  label: `${Checkbox.className}__label`,\n  indicator: `${Checkbox.className}__indicator`,\n};\n\nCheckbox.create = createShorthandFactory({\n  Component: Checkbox,\n  mappedProp: 'label',\n});\n\n/**\n * A Checkbox allows a user to make a choice between two mutually exclusive options.\n *\n * @accessibility\n * Implements [ARIA Checkbox](https://www.w3.org/TR/wai-aria-practices-1.1/#checkbox) design pattern.\n */\nexport default withSafeTypeForAs<typeof Checkbox, CheckboxProps>(Checkbox);\n"],"file":"Checkbox.js"}