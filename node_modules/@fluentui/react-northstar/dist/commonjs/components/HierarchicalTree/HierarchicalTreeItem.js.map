{"version":3,"sources":["components/HierarchicalTree/HierarchicalTreeItem.tsx"],"names":["HierarchicalTreeItem","React","createRef","performClick","e","preventDefault","stopPropagation","props","receiveFocus","eventComesFromChildItem","itemRef","current","focus","collapse","handleTitleClick","expand","focusSubtree","element","treeRef","currentTarget","target","predefinedProps","onClick","titleProps","items","title","renderItemTitle","open","exclusive","hasSubtree","HierarchicalTreeTitle","create","defaultProps","className","slotClassNames","as","render","overrideProps","handleTitleOverrides","HierarchicalTree","accessibility","hierarchicalSubtreeBehavior","subtree","ElementType","classes","unhandledProps","styles","variables","children","root","attributes","rtlTextContainer","getAttributes","forElements","keyHandlers","renderContent","UIComponent","commonPropTypes","createCommon","content","customPropTypes","collectionShorthand","index","PropTypes","number","bool","onTitleClick","func","itemShorthand","hierarchicalTreeItemBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, hierarchicalTreeItemBehavior, hierarchicalSubtreeBehavior } from '@fluentui/accessibility';\nimport { getFirstFocusable } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport HierarchicalTree, { HierarchicalTreeProps } from './HierarchicalTree';\nimport HierarchicalTreeTitle, { HierarchicalTreeTitleProps } from './HierarchicalTreeTitle';\nimport {\n  UIComponent,\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandRenderFunction,\n  ShorthandValue,\n  withSafeTypeForAs,\n  ShorthandCollection,\n} from '../../types';\n\nexport interface HierarchicalTreeItemSlotClassNames {\n  title: string;\n  subtree: string;\n}\n\nexport interface HierarchicalTreeItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Only allow one subtree to be open at a time. */\n  exclusive?: boolean;\n\n  /** The index of the item among its sibbling */\n  index?: number;\n\n  /** Array of props for sub tree. */\n  items?: ShorthandValue<HierarchicalTreeProps> | ShorthandCollection<HierarchicalTreeItemProps>;\n\n  /** Called when a tree title is clicked. */\n  onTitleClick?: ComponentEventHandler<HierarchicalTreeItemProps>;\n\n  /** Whether or not the subtree of the item is in the open state. */\n  open?: boolean;\n\n  /**\n   * A custom render iterator for rendering each Accordion panel title.\n   * The default component, props, and children are available for each panel title.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<HierarchicalTreeTitleProps>;\n\n  /** Properties for TreeTitle. */\n  title?: ShorthandValue<HierarchicalTreeTitleProps>;\n}\n\nclass HierarchicalTreeItem extends UIComponent<WithAsProp<HierarchicalTreeItemProps>> {\n  static create: ShorthandFactory<HierarchicalTreeItemProps>;\n\n  static displayName = 'HierarchicalTreeItem';\n\n  static className = 'ui-hierarchicaltree__item';\n\n  static slotClassNames: HierarchicalTreeItemSlotClassNames = {\n    title: `${HierarchicalTreeItem.className}__title`,\n    subtree: `${HierarchicalTreeItem.className}__subtree`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    items: customPropTypes.collectionShorthand,\n    index: PropTypes.number,\n    exclusive: PropTypes.bool,\n    onTitleClick: PropTypes.func,\n    open: PropTypes.bool,\n    renderItemTitle: PropTypes.func,\n    title: customPropTypes.itemShorthand,\n  };\n\n  static defaultProps = {\n    as: 'li',\n    accessibility: hierarchicalTreeItemBehavior,\n  };\n\n  itemRef = React.createRef<HTMLElement>();\n  treeRef = React.createRef<HTMLElement>();\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _.invoke(this.props, 'onTitleClick', e, this.props);\n    },\n    receiveFocus: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Focuses the title if the event comes from a child item.\n      if (this.eventComesFromChildItem(e)) {\n        this.itemRef.current.focus();\n      }\n    },\n    collapse: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Handle click on title if the keyboard event was dispatched on that title\n      if (!this.eventComesFromChildItem(e)) {\n        this.handleTitleClick(e);\n      }\n    },\n    expand: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      this.handleTitleClick(e);\n    },\n    focusSubtree: e => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const element = getFirstFocusable(this.treeRef.current, this.treeRef.current, true);\n      if (element) {\n        element.focus();\n      }\n    },\n  };\n\n  eventComesFromChildItem = e => {\n    return e.currentTarget !== e.target;\n  };\n\n  handleTitleClick = e => {\n    _.invoke(this.props, 'onTitleClick', e, this.props);\n  };\n\n  handleTitleOverrides = (predefinedProps: HierarchicalTreeTitleProps) => ({\n    onClick: (e, titleProps) => {\n      this.handleTitleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n    },\n  });\n\n  renderContent() {\n    const { items, title, renderItemTitle, open, exclusive } = this.props;\n    const hasSubtree = !_.isNil(items);\n\n    return (\n      <>\n        {HierarchicalTreeTitle.create(title, {\n          defaultProps: () => ({\n            className: HierarchicalTreeItem.slotClassNames.title,\n            open,\n            hasSubtree,\n            as: hasSubtree ? 'span' : 'a',\n          }),\n          render: renderItemTitle,\n          overrideProps: this.handleTitleOverrides,\n        })}\n        {hasSubtree && open && (\n          <Ref innerRef={this.treeRef}>\n            {HierarchicalTree.create(items, {\n              defaultProps: () => ({\n                accessibility: hierarchicalSubtreeBehavior,\n                className: HierarchicalTreeItem.slotClassNames.subtree,\n                exclusive,\n                renderItemTitle,\n              }),\n            })}\n          </Ref>\n        )}\n      </>\n    );\n  }\n\n  renderComponent({ ElementType, accessibility, classes, unhandledProps, styles, variables }) {\n    const { children } = this.props;\n\n    return (\n      <Ref innerRef={this.itemRef}>\n        <ElementType\n          className={classes.root}\n          {...accessibility.attributes.root}\n          {...rtlTextContainer.getAttributes({ forElements: [children] })}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {childrenExist(children) ? children : this.renderContent()}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nHierarchicalTreeItem.create = createShorthandFactory({\n  Component: HierarchicalTreeItem,\n  mappedProp: 'title',\n});\n\n/**\n * A TreeItem renders an item of a Tree.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n */\nexport default withSafeTypeForAs<typeof HierarchicalTreeItem, HierarchicalTreeItemProps, 'li'>(HierarchicalTreeItem);\n"],"file":"HierarchicalTreeItem.js"}