{"version":3,"sources":["components/Layout/Layout.tsx"],"names":["Layout","ElementType","classes","unhandledProps","props","reducing","disappearing","start","main","end","renderStartArea","renderMainArea","renderEndArea","renderGap","startArea","mainArea","endArea","root","activeAreas","filter","Boolean","isSingleArea","length","composedClasses","slotClassNames","reducedStart","reducedMain","reducedEnd","UIComponent","commonPropTypes","createCommon","accessibility","children","content","debug","PropTypes","bool","func","rootCSS","object","any","startCSS","startSize","string","mainCSS","mainSize","endCSS","endSize","justifyItems","alignItems","gap","vertical","rtlTextContainer","getAttributes","forElements","className"],"mappings":"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","sourcesContent":["import { ICSSInJSStyle } from '@fluentui/styles';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { UIComponent, UIComponentProps, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface LayoutSlotClassNames {\n  start: string;\n  main: string;\n  end: string;\n  gap: string;\n  reducedStart: string;\n  reducedMain: string;\n  reducedEnd: string;\n}\n\nexport interface LayoutProps extends UIComponentProps {\n  debug?: boolean;\n  renderStartArea?: (params: object) => React.ReactNode;\n  renderMainArea?: (params: object) => React.ReactNode;\n  renderEndArea?: (params: object) => React.ReactNode;\n  renderGap?: (params: object) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: ICSSInJSStyle;\n  start?: any;\n  startCSS?: ICSSInJSStyle;\n  startSize?: string;\n  main?: any;\n  mainCSS?: ICSSInJSStyle;\n  mainSize?: string;\n  end?: any;\n  endCSS?: ICSSInJSStyle;\n  endSize?: string;\n  /** How to align items on-axis within the layout (i.e. vertical or not). */\n  justifyItems?: React.CSSProperties['justifyItems'];\n  /** How to align cross-axis items within the layout (i.e. vertical or not). */\n  alignItems?: React.CSSProperties['alignItems'];\n  /** A layout can have gaps of whitespace between areas. */\n  gap?: string;\n  /** A layout can reduce to the minimum required areas. */\n  reducing?: boolean;\n  /** A layout can render its content directly if only one piece of content exists. */\n  disappearing?: boolean;\n  vertical?: boolean;\n}\n\nclass Layout extends UIComponent<WithAsProp<LayoutProps>, any> {\n  static className = 'ui-layout';\n\n  static displayName = 'Layout';\n\n  static slotClassNames: LayoutSlotClassNames;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    debug: PropTypes.bool,\n\n    renderStartArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    renderEndArea: PropTypes.func,\n    renderGap: PropTypes.func,\n\n    rootCSS: PropTypes.object,\n\n    start: PropTypes.any,\n    startCSS: PropTypes.object,\n    startSize: PropTypes.string,\n\n    main: PropTypes.any,\n    mainCSS: PropTypes.object,\n    mainSize: PropTypes.string,\n\n    end: PropTypes.any,\n    endCSS: PropTypes.object,\n    endSize: PropTypes.string,\n\n    justifyItems: PropTypes.any,\n\n    alignItems: PropTypes.any,\n\n    gap: PropTypes.string,\n    reducing: PropTypes.bool,\n    disappearing: PropTypes.bool,\n\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    startSize: 'auto',\n    mainSize: '1fr',\n    endSize: 'auto',\n\n    // TODO: when an area is another Layout, do not wrap them in an extra div\n    // TODO: option 1) higher value layouts could use start={Layout.create(start)} to ensure Areas are layout root\n    renderStartArea({ start, classes }) {\n      return (\n        start && (\n          <div\n            className={cx(Layout.slotClassNames.start, classes.start)}\n            {...rtlTextContainer.getAttributes({ forElements: [start] })}\n          >\n            {start}\n          </div>\n        )\n      );\n    },\n\n    renderMainArea({ main, classes }) {\n      return (\n        main && (\n          <div\n            className={cx(Layout.slotClassNames.main, classes.main)}\n            {...rtlTextContainer.getAttributes({ forElements: [main] })}\n          >\n            {main}\n          </div>\n        )\n      );\n    },\n\n    renderEndArea({ end, classes }) {\n      return (\n        end && (\n          <div\n            className={cx(Layout.slotClassNames.end, classes.end)}\n            {...rtlTextContainer.getAttributes({ forElements: [end] })}\n          >\n            {end}\n          </div>\n        )\n      );\n    },\n\n    // Heads up!\n    // IE11 Doesn't support grid-gap, insert virtual columns instead\n    renderGap({ gap, classes }) {\n      return gap && <span className={cx(Layout.slotClassNames.gap, classes.gap)} />;\n    },\n  };\n\n  renderComponent({ ElementType, classes, unhandledProps }) {\n    const {\n      reducing,\n      disappearing,\n      start,\n      main,\n      end,\n      renderStartArea,\n      renderMainArea,\n      renderEndArea,\n      renderGap,\n    } = this.props;\n\n    const startArea = renderStartArea({ ...this.props, classes });\n    const mainArea = renderMainArea({ ...this.props, classes });\n    const endArea = renderEndArea({ ...this.props, classes });\n\n    if (!startArea && !mainArea && !endArea) {\n      return <ElementType {...unhandledProps} className={classes.root} />;\n    }\n\n    const activeAreas = [startArea, mainArea, endArea].filter(Boolean);\n    const isSingleArea = activeAreas.length === 1;\n\n    // disappear: render the content directly without wrapping layout or area elements\n    if (disappearing && isSingleArea) {\n      return start || main || end;\n    }\n\n    if (reducing && isSingleArea) {\n      const composedClasses = cx(\n        classes.root,\n        startArea && Layout.slotClassNames.reducedStart,\n        mainArea && Layout.slotClassNames.reducedMain,\n        endArea && Layout.slotClassNames.reducedEnd,\n      );\n      return (\n        <ElementType {...unhandledProps} className={composedClasses}>\n          {start || main || end}\n        </ElementType>\n      );\n    }\n\n    return (\n      <ElementType {...unhandledProps} className={classes.root}>\n        {startArea}\n        {startArea && mainArea && renderGap({ ...this.props, classes })}\n        {mainArea}\n        {(startArea || mainArea) && endArea && renderGap({ ...this.props, classes })}\n        {endArea}\n      </ElementType>\n    );\n  }\n}\n\nLayout.slotClassNames = {\n  start: `${Layout.className}__start`,\n  main: `${Layout.className}__main`,\n  end: `${Layout.className}__end`,\n  gap: `${Layout.className}__gap`,\n  reducedStart: `${Layout.className}--reduced__start`,\n  reducedMain: `${Layout.className}--reduced__main`,\n  reducedEnd: `${Layout.className}--reduced__end`,\n};\n\n/**\n * (DEPRECATED) A layout is a utility for arranging the content of a component.\n */\nexport default withSafeTypeForAs<typeof Layout, LayoutProps>(Layout);\n"],"file":"Layout.js"}