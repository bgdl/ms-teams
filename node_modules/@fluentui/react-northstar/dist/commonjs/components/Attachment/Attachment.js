"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _types = require("../../types");

var _utils = require("../../utils");

var _Box = _interopRequireDefault(require("../Box/Box"));

var _Button = _interopRequireDefault(require("../Button/Button"));

var _Text = _interopRequireDefault(require("../Text/Text"));

// @ts-ignore
var Attachment = function Attachment(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(Attachment.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      action = props.action,
      actionable = props.actionable,
      className = props.className,
      description = props.description,
      design = props.design,
      disabled = props.disabled,
      header = props.header,
      icon = props.icon,
      onClick = props.onClick,
      progress = props.progress,
      styles = props.styles,
      variables = props.variables;
  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: Attachment.displayName,
    actionHandlers: {
      performClick: function performClick(e) {
        if (e.currentTarget === e.target) {
          e.stopPropagation();
          handleClick(e);
        }
      }
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(Attachment.displayName, {
    className: Attachment.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        actionable: actionable || !!onClick,
        disabled: disabled
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes,
      resolvedStyles = _useStyles.styles;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(Attachment.handledProps, props);

  var handleClick = function handleClick(e) {
    if (disabled) {
      e.preventDefault();
      return;
    }

    (0, _invoke2.default)(props, 'onClick', e, props);
  };

  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root,
    onClick: handleClick
  }, unhandledProps)), _Box.default.create(icon, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.icon
      };
    }
  }), (header || description) && React.createElement("div", {
    className: classes.content
  }, _Text.default.create(header, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.header
      };
    }
  }), _Text.default.create(description, {
    defaultProps: function defaultProps() {
      return {
        styles: resolvedStyles.description
      };
    }
  })), _Button.default.create(action, {
    defaultProps: function defaultProps() {
      return {
        iconOnly: true,
        text: true,
        styles: resolvedStyles.action,
        className: Attachment.slotClassNames.action
      };
    }
  }), !(0, _isNil2.default)(progress) && React.createElement("div", {
    className: classes.progress,
    style: {
      width: "".concat(progress, "%")
    }
  }));
  setEnd();
  return element;
};

Attachment.create = (0, _utils.createShorthandFactory)({
  Component: Attachment,
  mappedProp: 'header'
});
Attachment.slotClassNames = {
  action: "".concat(Attachment.className, "__action")
};
Attachment.className = 'ui-attachment';
Attachment.displayName = 'Attachment';
Attachment.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  action: customPropTypes.itemShorthand,
  actionable: PropTypes.bool,
  description: customPropTypes.itemShorthand,
  header: customPropTypes.itemShorthand,
  icon: customPropTypes.shorthandAllowingChildren,
  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
});
Attachment.defaultProps = {
  accessibility: _accessibility.attachmentBehavior
};
Attachment.handledProps = Object.keys(Attachment.propTypes);
/**
 * An Attachment represents a file or media attachment, which may contain some metadata or actions.
 */

var _default = (0, _types.withSafeTypeForAs)(Attachment);

exports.default = _default;
//# sourceMappingURL=Attachment.js.map
