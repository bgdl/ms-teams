{"version":3,"sources":["components/Attachment/Attachment.tsx"],"names":["Attachment","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","action","actionable","className","description","design","disabled","header","icon","onClick","progress","styles","variables","getA11Props","debugName","actionHandlers","performClick","e","currentTarget","target","stopPropagation","handleClick","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","ElementType","unhandledProps","handledProps","preventDefault","element","root","Box","create","defaultProps","content","Text","Button","iconOnly","text","slotClassNames","width","Component","mappedProp","propTypes","commonPropTypes","createCommon","customPropTypes","itemShorthand","PropTypes","bool","shorthandAllowingChildren","oneOfType","string","number","attachmentBehavior","Object","keys"],"mappings":"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","sourcesContent":["import { Accessibility, attachmentBehavior, AttachmentBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { createShorthandFactory, commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport Button, { ButtonProps } from '../Button/Button';\nimport Text, { TextProps } from '../Text/Text';\n\nexport interface AttachmentProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<AttachmentBehaviorProps>;\n\n  /** Button shorthand for the action slot. */\n  action?: ShorthandValue<ButtonProps>;\n\n  /** An Attachment can be styled to indicate possible user interaction. */\n  actionable?: boolean;\n\n  /** A string describing the attachment. */\n  description?: ShorthandValue<TextProps>;\n\n  /** An attachment can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** The name of the attachment. */\n  header?: ShorthandValue<TextProps>;\n\n  /** Shorthand for the icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Value indicating percent complete. */\n  progress?: string | number;\n\n  /**\n   * Called after user's click.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AttachmentProps>;\n}\n\nexport type AttachmentStylesProps = Required<Pick<AttachmentProps, 'actionable' | 'disabled'>>;\n\nexport interface AttachmentSlotClassNames {\n  action: string;\n}\n\nconst Attachment: React.FC<WithAsProp<AttachmentProps>> &\n  FluentComponentStaticProps<AttachmentProps> & { slotClassNames: AttachmentSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Attachment.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    action,\n    actionable,\n    className,\n    description,\n    design,\n    disabled,\n    header,\n    icon,\n    onClick,\n    progress,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Attachment.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          e.stopPropagation();\n          handleClick(e);\n        }\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<AttachmentStylesProps>(Attachment.displayName, {\n    className: Attachment.className,\n    mapPropsToStyles: () => ({\n      actionable: actionable || !!onClick,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Attachment.handledProps, props);\n\n  const handleClick = (e: React.KeyboardEvent | React.MouseEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, onClick: handleClick, ...unhandledProps })}>\n      {Box.create(icon, {\n        defaultProps: () => ({ styles: resolvedStyles.icon }),\n      })}\n      {(header || description) && (\n        <div className={classes.content}>\n          {Text.create(header, {\n            defaultProps: () => ({ styles: resolvedStyles.header }),\n          })}\n\n          {Text.create(description, {\n            defaultProps: () => ({ styles: resolvedStyles.description }),\n          })}\n        </div>\n      )}\n      {Button.create(action, {\n        defaultProps: () => ({\n          iconOnly: true,\n          text: true,\n          styles: resolvedStyles.action,\n          className: Attachment.slotClassNames.action,\n        }),\n      })}\n      {!_.isNil(progress) && <div className={classes.progress} style={{ width: `${progress}%` }} />}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAttachment.create = createShorthandFactory({ Component: Attachment, mappedProp: 'header' });\nAttachment.slotClassNames = {\n  action: `${Attachment.className}__action`,\n};\n\nAttachment.className = 'ui-attachment';\nAttachment.displayName = 'Attachment';\n\nAttachment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior,\n};\n\nAttachment.handledProps = Object.keys(Attachment.propTypes) as any;\n\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\nexport default withSafeTypeForAs<typeof Attachment, AttachmentProps>(Attachment);\n"],"file":"Attachment.js"}