{"version":3,"sources":["components/RadioGroup/RadioGroupItem.tsx"],"names":["RadioGroupItem","React","createRef","performClick","e","preventDefault","handleClick","props","checked","state","prevProps","prevState","shouldFocus","elementRef","current","focus","undefined","ElementType","classes","unhandledProps","styles","accessibility","label","indicator","handleChange","root","attributes","keyHandlers","Box","create","defaultProps","className","slotClassNames","as","AutoControlledComponent","commonPropTypes","createCommon","content","PropTypes","bool","defaultChecked","disabled","customPropTypes","shorthandAllowingChildren","itemShorthand","name","string","onClick","func","onChange","value","oneOfType","number","vertical","radioGroupItemBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, radioGroupItemBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n\nimport {\n  AutoControlledComponent,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\n\nexport interface RadioGroupItemSlotClassNames {\n  indicator: string;\n}\n\nexport interface RadioGroupItemProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Whether or not radio item is checked. */\n  checked?: boolean;\n\n  /**\n   * Called after radio item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** The label of the radio item. */\n  label?: ShorthandValue<BoxProps>;\n\n  /** Initial checked value. */\n  defaultChecked?: boolean;\n\n  /** A radio item can appear disabled and be unable to change states. */\n  disabled?: boolean;\n\n  /** The radio item indicator can be customized. */\n  indicator?: ShorthandValue<BoxProps>;\n\n  /** The HTML input name. */\n  name?: string;\n\n  /**\n   * Called after radio item is clicked.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<RadioGroupItemProps>;\n\n  /** Whether should focus when checked */\n  shouldFocus?: boolean; // TODO: RFC #306\n\n  /** The HTML input value. */\n  value?: string | number;\n\n  /** A vertical radio group displays elements vertically. */\n  vertical?: boolean;\n}\n\nexport interface RadioGroupItemState {\n  checked: boolean;\n}\n\nclass RadioGroupItem extends AutoControlledComponent<WithAsProp<RadioGroupItemProps>, RadioGroupItemState> {\n  elementRef = React.createRef<HTMLElement>();\n\n  static create: ShorthandFactory<RadioGroupItemProps>;\n\n  static displayName = 'RadioGroupItem';\n\n  static className = 'ui-radiogroup__item';\n\n  static slotClassNames: RadioGroupItemSlotClassNames = {\n    indicator: `${RadioGroupItem.className}__indicator`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    checked: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    disabled: PropTypes.bool,\n    indicator: customPropTypes.shorthandAllowingChildren,\n    label: customPropTypes.itemShorthand,\n    name: PropTypes.string,\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n    shouldFocus: PropTypes.bool,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: radioGroupItemBehavior,\n    indicator: {},\n  };\n\n  static autoControlledProps = ['checked'];\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = e => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  handleChange = (e: React.ChangeEvent) => {\n    // RadioGroupItem component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(this.props, 'onChange', e, { ...this.props, checked: this.state.checked });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const checked = this.state.checked;\n    if (checked !== prevState.checked) {\n      checked && this.props.shouldFocus && this.elementRef.current.focus();\n      _.invoke(this.props, 'onChange', undefined, { ...this.props, checked });\n    }\n  }\n\n  renderComponent({ ElementType, classes, unhandledProps, styles, accessibility }) {\n    const { label, indicator } = this.props;\n\n    return (\n      <Ref innerRef={this.elementRef}>\n        <ElementType\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n          className={classes.root}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n          {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        >\n          {Box.create(indicator, {\n            defaultProps: () => ({\n              className: RadioGroupItem.slotClassNames.indicator,\n              styles: styles.indicator,\n            }),\n          })}\n          {Box.create(label, {\n            defaultProps: () => ({\n              as: 'span',\n            }),\n          })}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\nRadioGroupItem.create = createShorthandFactory({ Component: RadioGroupItem, mappedProp: 'label' });\n\n/**\n * A RadioGroupItem represents single input element within a RadioGroup.\n *\n * @accessibility\n * Radio items need to be grouped to correctly handle accessibility.\n */\nexport default withSafeTypeForAs<typeof RadioGroupItem, RadioGroupItemProps>(RadioGroupItem);\n"],"file":"RadioGroupItem.js"}