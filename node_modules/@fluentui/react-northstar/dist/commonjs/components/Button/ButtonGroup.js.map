{"version":3,"sources":["components/Button/ButtonGroup.tsx"],"names":["ButtonGroup","styles","isFirst","isLast","resultStyles","firstButton","lastButton","middleButton","ElementType","classes","accessibility","unhandledProps","props","children","buttons","circular","content","attributes","root","rtlTextContainer","getAttributes","forElements","button","idx","Button","create","defaultProps","getStyleForButtonIndex","length","UIComponent","commonPropTypes","createCommon","customPropTypes","collectionShorthand","PropTypes","bool","as","Component","mappedProp","mappedArrayProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAWA;;IAeMA,W;;;;;;;;;;;;;;;;;yGA8CqB,UAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA6B;AACpD,UAAIC,YAAY,GAAG,EAAnB;;AACA,UAAIF,OAAJ,EAAa;AACXE,QAAAA,YAAY,GAAGH,MAAM,CAACI,WAAtB;AACD;;AACD,UAAIF,MAAJ,EAAY;AACVC,QAAAA,YAAY,qBAAQA,YAAR,MAAyBH,MAAM,CAACK,UAAhC,CAAZ;AACD;;AACD,UAAI,CAACJ,OAAD,IAAY,CAACC,MAAjB,EAAyB;AACvBC,QAAAA,YAAY,GAAGH,MAAM,CAACM,YAAtB;AACD;;AACD,aAAOH,YAAP;AACD,K;;;;;;0CAzCiG;AAAA;;AAAA,UAAhFI,WAAgF,QAAhFA,WAAgF;AAAA,UAAnEC,OAAmE,QAAnEA,OAAmE;AAAA,UAA1DC,aAA0D,QAA1DA,aAA0D;AAAA,UAA3CT,MAA2C,QAA3CA,MAA2C;AAAA,UAAnCU,cAAmC,QAAnCA,cAAmC;AAAA,wBAC/C,KAAKC,KAD0C;AAAA,UACxFC,QADwF,eACxFA,QADwF;AAAA,UAC9EC,OAD8E,eAC9EA,OAD8E;AAAA,UACrEC,QADqE,eACrEA,QADqE;AAAA,UAC3DC,OAD2D,eAC3DA,OAD2D;;AAEhG,UAAI,qBAAQF,OAAR,CAAJ,EAAsB;AACpB,eACE,oBAAC,WAAD,6BACMJ,aAAa,CAACO,UAAd,CAAyBC,IAD/B,EAEMC,wBAAiBC,aAAjB,CAA+B;AAAEC,UAAAA,WAAW,EAAE,CAACR,QAAD,EAAWG,OAAX;AAAf,SAA/B,CAFN,EAGML,cAHN;AAIE,UAAA,SAAS,EAAEF,OAAO,CAACS;AAJrB,YAMG,0BAAcL,QAAd,IAA0BA,QAA1B,GAAqCG,OANxC,CADF;AAUD;;AAED,aACE,oBAAC,WAAD,6BAAiBL,cAAjB;AAAiC,QAAA,SAAS,EAAEF,OAAO,CAACS;AAApD,UACG,mBAAMJ,OAAN,EAAe,UAACQ,MAAD,EAASC,GAAT;AAAA,eACdC,gBAAOC,MAAP,CAAcH,MAAd,EAAsB;AACpBI,UAAAA,YAAY,EAAE;AAAA,mBAAO;AACnBX,cAAAA,QAAQ,EAARA,QADmB;AAEnBd,cAAAA,MAAM,EAAE,MAAI,CAAC0B,sBAAL,CAA4B1B,MAA5B,EAAoCsB,GAAG,KAAK,CAA5C,EAA+CA,GAAG,KAAKT,OAAO,CAACc,MAAR,GAAiB,CAAxE;AAFW,aAAP;AAAA;AADM,SAAtB,CADc;AAAA,OAAf,CADH,CADF;AAYD;;;EA5CuBC,kB;;8BAApB7B,W;8BAAAA,W,iBAGiB,a;8BAHjBA,W,eAKe,Y;8BALfA,W,iCAQC8B,uBAAgBC,YAAhB,E;AACHjB,EAAAA,OAAO,EAAEkB,eAAe,CAACC,mB;AACzBlB,EAAAA,QAAQ,EAAEmB,SAAS,CAACC;;8BAVlBnC,W,kBAakB;AACpBoC,EAAAA,EAAE,EAAE;AADgB,C;AAgDxBpC,WAAW,CAACyB,MAAZ,GAAqB,mCAAuB;AAC1CY,EAAAA,SAAS,EAAErC,WAD+B;AAE1CsC,EAAAA,UAAU,EAAE,SAF8B;AAG1CC,EAAAA,eAAe,EAAE;AAHyB,CAAvB,CAArB;AAMA;;;;eAGe,8BAAwDvC,WAAxD,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport { WithAsProp, withSafeTypeForAs, ShorthandCollection } from '../../types';\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ShorthandFactory,\n} from '../../utils';\nimport Button, { ButtonProps } from './Button';\n\nexport interface ButtonGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** The buttons contained inside the ButtonGroup. */\n  buttons?: ShorthandCollection<ButtonProps>;\n\n  /** The buttons inside group can appear circular. */\n  circular?: boolean;\n}\n\nclass ButtonGroup extends UIComponent<WithAsProp<ButtonGroupProps>, any> {\n  static create: ShorthandFactory<ButtonGroupProps>;\n\n  static displayName = 'ButtonGroup';\n\n  static className = 'ui-buttons';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    buttons: customPropTypes.collectionShorthand,\n    circular: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, unhandledProps }): React.ReactNode {\n    const { children, buttons, circular, content } = this.props;\n    if (_.isNil(buttons)) {\n      return (\n        <ElementType\n          {...accessibility.attributes.root}\n          {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n          {...unhandledProps}\n          className={classes.root}\n        >\n          {childrenExist(children) ? children : content}\n        </ElementType>\n      );\n    }\n\n    return (\n      <ElementType {...unhandledProps} className={classes.root}>\n        {_.map(buttons, (button, idx) =>\n          Button.create(button, {\n            defaultProps: () => ({\n              circular,\n              styles: this.getStyleForButtonIndex(styles, idx === 0, idx === buttons.length - 1),\n            }),\n          }),\n        )}\n      </ElementType>\n    );\n  }\n\n  getStyleForButtonIndex = (styles, isFirst, isLast) => {\n    let resultStyles = {};\n    if (isFirst) {\n      resultStyles = styles.firstButton;\n    }\n    if (isLast) {\n      resultStyles = { ...resultStyles, ...styles.lastButton };\n    }\n    if (!isFirst && !isLast) {\n      resultStyles = styles.middleButton;\n    }\n    return resultStyles;\n  };\n}\n\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons',\n});\n\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\nexport default withSafeTypeForAs<typeof ButtonGroup, ButtonGroupProps>(ButtonGroup);\n"],"file":"ButtonGroup.js"}