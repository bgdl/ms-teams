{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["Divider","accessibility","ElementType","classes","unhandledProps","props","children","content","rtlTextContainer","getAttributes","forElements","attributes","root","UIComponent","commonPropTypes","createCommon","color","fitted","PropTypes","bool","size","number","important","vertical","create","Component","mappedProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;AAEA;;AAaA;;IAyBMA,O;;;;;;;;;;;;0CAmBqE;AAAA,UAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBACzC,KAAKC,KADoC;AAAA,UAC/DC,QAD+D,eAC/DA,QAD+D;AAAA,UACrDC,OADqD,eACrDA,OADqD;AAGvE,aACE,oBAAC,WAAD,6BACMC,wBAAiBC,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACJ,QAAD,EAAWC,OAAX;AAAf,OAA/B,CADN,EAEMN,aAAa,CAACU,UAAd,CAAyBC,IAF/B,EAGMR,cAHN;AAIE,QAAA,SAAS,EAAED,OAAO,CAACS;AAJrB,UAMG,0BAAcN,QAAd,IAA0BA,QAA1B,GAAqCC,OANxC,CADF;AAUD;;;EAhCmBM,kB;;8BAAhBb,O,iBACiB,S;8BADjBA,O;8BAAAA,O,eAKe,Y;8BALfA,O,iCAQCc,uBAAgBC,YAAhB,CAA6B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7B,C;AACHC,EAAAA,MAAM,EAAEC,SAAS,CAACC,I;AAClBC,EAAAA,IAAI,EAAEF,SAAS,CAACG,M;AAChBC,EAAAA,SAAS,EAAEJ,SAAS,CAACC,I;AACrBI,EAAAA,QAAQ,EAAEL,SAAS,CAACC;;8BAZlBnB,O,kBAekB;AACpBoB,EAAAA,IAAI,EAAE;AADc,C;AAoBxBpB,OAAO,CAACwB,MAAR,GAAiB,mCAAuB;AAAEC,EAAAA,SAAS,EAAEzB,OAAb;AAAsB0B,EAAAA,UAAU,EAAE;AAAlC,CAAvB,CAAjB;AAEA;;;;eAGe,8BAAgD1B,OAAhD,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nclass Divider extends UIComponent<WithAsProp<DividerProps>, any> {\n  static displayName = 'Divider';\n\n  static create: ShorthandFactory<DividerProps>;\n\n  static className = 'ui-divider';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ color: true }),\n    fitted: PropTypes.bool,\n    size: PropTypes.number,\n    important: PropTypes.bool,\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    size: 0,\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n}\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"],"file":"Divider.js"}