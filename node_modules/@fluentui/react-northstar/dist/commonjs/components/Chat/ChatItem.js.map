{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["ChatItem","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","attached","children","className","contentPosition","design","gutter","message","styles","variables","getA11Props","debugName","rtl","mapPropsToStyles","mapPropsToInlineStyles","classes","resolvedStyles","renderContent","gutterElement","Box","create","defaultProps","slotClassNames","messageElement","ElementType","unhandledProps","handledProps","element","root","rtlTextContainer","getAttributes","forElements","as","propTypes","commonPropTypes","createCommon","content","PropTypes","oneOfType","bool","oneOf","customPropTypes","itemShorthand","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\nconst ChatItem: React.FC<WithAsProp<ChatItemProps>> &\n  FluentComponentStaticProps<ChatItemProps> & {\n    slotClassNames: ChatItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: ChatItem.className,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: ChatItem.slotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: ChatItem.slotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.className = 'ui-chat__item';\nChatItem.displayName = 'ChatItem';\n\nChatItem.slotClassNames = {\n  message: `${ChatItem.className}__message`,\n  gutter: `${ChatItem.className}__gutter`,\n};\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport default withSafeTypeForAs<typeof ChatItem, ChatItemProps, 'li'>(ChatItem);\n"],"file":"ChatItem.js"}