{"version":3,"sources":["components/Chat/ChatMessage.tsx"],"names":["ChatMessage","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","parentAttached","ChatItemContext","v","attached","accessibility","actionMenu","author","badge","badgePosition","children","className","content","design","mine","positionActionMenu","reactionGroup","reactionGroupPosition","timestamp","styles","variables","overflow","unstable_overflow","useState","focused","setFocused","messageNode","setMessageNode","menuRef","useRef","updateActionsMenuPosition","getA11Props","actionHandlers","preventDefault","event","currentTarget","target","focus","stopPropagation","mapPropsToStyles","hasBadge","hasReactionGroup","mapPropsToInlineStyles","rtl","classes","resolvedStyles","handleFocus","e","handleBlur","shouldPreserveFocusState","relatedTarget","handleMouseEnter","renderActionMenu","actionMenuElement","Menu","create","defaultProps","IS_FOCUSABLE_ATTRIBUTE","menuAsToolbarBehavior","slotClassNames","messageRect","getBoundingClientRect","overflowPadding","top","Math","round","height","flip","behavior","preventOverflow","escapeWithReference","priority","boundariesElement","padding","scheduleUpdate","current","childrenPropExists","rootClasses","root","ElementType","unhandledProps","handledProps","badgeElement","Label","reactionGroupElement","Reaction","Group","authorElement","Text","size","timestampElement","messageContent","Box","element","unstable_wrapWithFocusZone","onBlur","onFocus","onMouseEnter","rtlTextContainer","getAttributes","forElements","chatMessageBehavior","propTypes","commonPropTypes","createCommon","PropTypes","oneOfType","customPropTypes","itemShorthand","collectionShorthand","bool","oneOf","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import {\n  Accessibility,\n  IS_FOCUSABLE_ATTRIBUTE,\n  chatMessageBehavior,\n  menuAsToolbarBehavior,\n  ChatMessageBehaviorProps,\n} from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport PopperJs from 'popper.js';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { Popper, PopperShorthandProps, getPopperPropsFromShorthand } from '../../utils/positioner';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\nimport Label, { LabelProps } from '../Label/Label';\nimport Menu, { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport Text, { TextProps } from '../Text/Text';\nimport Reaction, { ReactionProps } from '../Reaction/Reaction';\nimport { ReactionGroupProps } from '../Reaction/ReactionGroup';\nimport { ChatItemContext } from './chatItemContext';\n\nexport interface ChatMessageSlotClassNames {\n  actionMenu: string;\n  author: string;\n  timestamp: string;\n  badge: string;\n  content: string;\n  reactionGroup: string;\n}\n\nexport interface ChatMessageProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatMessageBehaviorProps>;\n\n  /** Menu with actions of the message. */\n  actionMenu?: ShorthandValue<MenuProps & { popper?: PopperShorthandProps }> | ShorthandCollection<MenuItemProps>;\n\n  /** Controls messages's relation to other chat messages. Is automatically set by the ChatItem. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Author of the message. */\n  author?: ShorthandValue<TextProps>;\n\n  /** Indicates whether message belongs to the current user. */\n  mine?: boolean;\n\n  /** Timestamp of the message. */\n  timestamp?: ShorthandValue<TextProps>;\n\n  /** Badge attached to the message. */\n  badge?: ShorthandValue<LabelProps>;\n\n  /** A message can format the badge to appear at the start or the end of the message. */\n  badgePosition?: 'start' | 'end';\n\n  /**\n   * Called after user's blur.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onBlur?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<ChatMessageProps>;\n\n  /**\n   * Called after user enters by mouse.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<ChatMessageProps>;\n\n  /** Allows suppression of action menu positioning for performance reasons */\n  positionActionMenu?: boolean;\n\n  /** Reaction group applied to the message. */\n  reactionGroup?: ShorthandValue<ReactionGroupProps> | ShorthandCollection<ReactionProps>;\n\n  /** A message can format the reactions group to appear at the start or the end of the message. */\n  reactionGroupPosition?: 'start' | 'end';\n\n  /** Positions an actionMenu slot in \"fixed\" mode. */\n  unstable_overflow?: boolean;\n}\n\nexport type ChatMessageStylesProps = Pick<ChatMessageProps, 'attached' | 'badgePosition' | 'mine'> & {\n  focused: boolean;\n  hasBadge: boolean;\n  hasReactionGroup: boolean;\n};\n\nconst ChatMessage: React.FC<WithAsProp<ChatMessageProps>> &\n  FluentComponentStaticProps<ChatMessageProps> & {\n    slotClassNames: ChatMessageSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatMessage.displayName, context.telemetry);\n  setStart();\n\n  const parentAttached = useContextSelector(ChatItemContext, v => v.attached);\n  const {\n    accessibility,\n    actionMenu,\n    attached = parentAttached,\n    author,\n    badge,\n    badgePosition,\n    children,\n    className,\n    content,\n    design,\n    mine,\n    positionActionMenu,\n    reactionGroup,\n    reactionGroupPosition,\n    timestamp,\n    styles,\n    variables,\n    unstable_overflow: overflow,\n  } = props;\n\n  const [focused, setFocused] = React.useState<boolean>(false);\n  const [messageNode, setMessageNode] = React.useState<HTMLElement | null>(null);\n\n  const menuRef = React.useRef<HTMLElement>();\n  const updateActionsMenuPosition = React.useRef<(() => void) | null>(null);\n\n  const getA11Props = useAccessibility(accessibility, {\n    actionHandlers: {\n      // prevents default FocusZone behavior, e.g., in ChatMessageBehavior, it prevents FocusZone from using arrow keys\n      // as navigation (only Tab key should work)\n      preventDefault: event => {\n        // preventDefault only if event coming from inside the message\n        if (event.currentTarget !== event.target) {\n          event.preventDefault();\n        }\n      },\n\n      focus: event => {\n        if (messageNode) {\n          messageNode.focus();\n          event.stopPropagation();\n        }\n      },\n    },\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatMessageStylesProps>(ChatMessage.displayName, {\n    className: ChatMessage.className,\n    mapPropsToStyles: () => ({\n      attached,\n      badgePosition,\n      focused,\n      mine,\n      hasBadge: !!badge,\n      hasReactionGroup: !!reactionGroup,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleFocus = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n\n    setFocused(true);\n    _.invoke(props, 'onFocus', e, props);\n  };\n\n  const handleBlur = (e: React.SyntheticEvent) => {\n    // `focused` controls is focused the whole `ChatMessage` or any of its children. When we're navigating\n    // with keyboard the focused element will be changed and there is no way to use `:focus` selector\n    const shouldPreserveFocusState = _.invoke(e, 'currentTarget.contains', (e as any).relatedTarget);\n\n    setFocused(shouldPreserveFocusState);\n    _.invoke(props, 'onBlur', e, props);\n  };\n\n  const handleMouseEnter = (e: React.SyntheticEvent) => {\n    _.invoke(updateActionsMenuPosition, 'current');\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const renderActionMenu = () => {\n    const actionMenuElement = Menu.create(actionMenu, {\n      defaultProps: () => ({\n        [IS_FOCUSABLE_ATTRIBUTE]: true,\n        accessibility: menuAsToolbarBehavior,\n        className: ChatMessage.slotClassNames.actionMenu,\n        styles: resolvedStyles.actionMenu,\n      }),\n    });\n\n    if (!actionMenuElement) {\n      return actionMenuElement;\n    }\n\n    const messageRect: DOMRect | undefined = positionActionMenu && messageNode?.getBoundingClientRect();\n    const overflowPadding: PopperJs.Padding = { top: Math.round(messageRect?.height || 0) };\n\n    return (\n      <Popper\n        enabled={positionActionMenu}\n        align=\"end\"\n        modifiers={\n          positionActionMenu && {\n            // https://popper.js.org/popper-documentation.html#modifiers..flip.behavior\n            // Forces to flip only in \"top-*\" positions\n            flip: { behavior: ['top'] },\n            preventOverflow: {\n              escapeWithReference: false,\n              // https://popper.js.org/popper-documentation.html#modifiers..preventOverflow.priority\n              // Forces to stop prevent overflow on bottom and bottom\n              priority: ['left', 'right'],\n\n              // Is required to properly position action items\n              ...(overflow && {\n                boundariesElement: 'scrollParent',\n                padding: overflowPadding,\n              }),\n            },\n          }\n        }\n        position=\"above\"\n        positionFixed={overflow}\n        targetRef={messageNode}\n        {...getPopperPropsFromShorthand(actionMenu)}\n      >\n        {({ scheduleUpdate }) => {\n          updateActionsMenuPosition.current = scheduleUpdate;\n\n          return <Ref innerRef={menuRef}>{actionMenuElement}</Ref>;\n        }}\n      </Popper>\n    );\n  };\n\n  const childrenPropExists = childrenExist(children);\n  const rootClasses = childrenPropExists ? cx(classes.root, classes.content) : classes.root;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatMessage.handledProps, props);\n\n  const badgeElement = Label.create(badge, {\n    defaultProps: () => ({\n      className: ChatMessage.slotClassNames.badge,\n      styles: resolvedStyles.badge,\n    }),\n  });\n\n  const reactionGroupElement = Reaction.Group.create(reactionGroup, {\n    defaultProps: () => ({\n      className: ChatMessage.slotClassNames.reactionGroup,\n      styles: resolvedStyles.reactionGroup,\n    }),\n  });\n\n  const actionMenuElement = renderActionMenu();\n\n  const authorElement = Text.create(author, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.author,\n      className: ChatMessage.slotClassNames.author,\n    }),\n  });\n\n  const timestampElement = Text.create(timestamp, {\n    defaultProps: () => ({\n      size: 'small',\n      styles: resolvedStyles.timestamp,\n      timestamp: true,\n      className: ChatMessage.slotClassNames.timestamp,\n    }),\n  });\n\n  const messageContent = Box.create(content, {\n    defaultProps: () => ({\n      className: ChatMessage.slotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n\n  const element = (\n    <Ref innerRef={setMessageNode}>\n      {getA11Props.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11Props('root', {\n            className: rootClasses,\n            onBlur: handleBlur,\n            onFocus: handleFocus,\n            onMouseEnter: handleMouseEnter,\n            ...rtlTextContainer.getAttributes({ forElements: [children] }),\n            ...unhandledProps,\n          })}\n        >\n          {childrenPropExists ? (\n            children\n          ) : (\n            <>\n              {actionMenuElement}\n              {badgePosition === 'start' && badgeElement}\n              {authorElement}\n              {timestampElement}\n              {reactionGroupPosition === 'start' && reactionGroupElement}\n              {messageContent}\n              {reactionGroupPosition === 'end' && reactionGroupElement}\n              {badgePosition === 'end' && badgeElement}\n            </>\n          )}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatMessage.className = 'ui-chat__message';\nChatMessage.displayName = 'ChatMessage';\n\nChatMessage.defaultProps = {\n  accessibility: chatMessageBehavior,\n  badgePosition: 'end',\n  positionActionMenu: true,\n  reactionGroupPosition: 'start',\n};\nChatMessage.propTypes = {\n  ...commonPropTypes.createCommon({ content: 'shorthand' }),\n  actionMenu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  author: customPropTypes.itemShorthand,\n  badge: customPropTypes.itemShorthand,\n  badgePosition: PropTypes.oneOf(['start', 'end']),\n  mine: PropTypes.bool,\n  timestamp: customPropTypes.itemShorthand,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  positionActionMenu: PropTypes.bool,\n  reactionGroup: PropTypes.oneOfType([customPropTypes.collectionShorthand, customPropTypes.itemShorthand]),\n  reactionGroupPosition: PropTypes.oneOf(['start', 'end']),\n  unstable_overflow: PropTypes.bool,\n};\nChatMessage.handledProps = Object.keys(ChatMessage.propTypes) as any;\n\nChatMessage.create = createShorthandFactory({ Component: ChatMessage, mappedProp: 'content' });\nChatMessage.slotClassNames = {\n  actionMenu: `${ChatMessage.className}__actions`,\n  author: `${ChatMessage.className}__author`,\n  timestamp: `${ChatMessage.className}__timestamp`,\n  badge: `${ChatMessage.className}__badge`,\n  content: `${ChatMessage.className}__content`,\n  reactionGroup: `${ChatMessage.className}__reactions`,\n};\n\n/**\n * A ChatMessage represents a single message in chat.\n */\nexport default withSafeTypeForAs<typeof ChatMessage, ChatMessageProps>(ChatMessage);\n"],"file":"ChatMessage.js"}