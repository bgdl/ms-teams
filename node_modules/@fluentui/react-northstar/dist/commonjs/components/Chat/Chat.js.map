{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["Chat","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","design","items","styles","variables","getA11Props","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","unstable_wrapWithFocusZone","root","rtlTextContainer","getAttributes","forElements","item","ChatItem","create","defaultProps","slotClassNames","chatBehavior","as","propTypes","commonPropTypes","createCommon","content","PropTypes","arrayOf","customPropTypes","itemShorthand","Object","keys","Item","Message","ChatMessage","Component"],"mappings":"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","sourcesContent":["import { Accessibility, chatBehavior, ChatBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  createShorthandFactory,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport ChatItem, { ChatItemProps } from './ChatItem';\nimport ChatMessage from './ChatMessage';\n\nexport interface ChatSlotClassNames {\n  item: string;\n}\n\nexport interface ChatProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ChatBehaviorProps>;\n\n  /** Shorthand array of the items inside the chat. */\n  items?: ShorthandCollection<ChatItemProps>;\n}\n\nexport type ChatStylesProps = {};\n\nconst Chat: React.FC<WithAsProp<ChatProps>> &\n  FluentComponentStaticProps<ChatProps> & {\n    slotClassNames: ChatSlotClassNames;\n    Item: typeof ChatItem;\n    Message: typeof ChatMessage;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Chat.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, children, className, design, items, styles, variables } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Chat.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ChatStylesProps>(Chat.displayName, {\n    className: Chat.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Chat.handledProps, props);\n\n  const element = getA11Props.unstable_wrapWithFocusZone(\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children)\n        ? children\n        : _.map(items, item =>\n            ChatItem.create(item, {\n              defaultProps: () => ({ className: Chat.slotClassNames.item }),\n            }),\n          )}\n    </ElementType>,\n  );\n  setEnd();\n\n  return element;\n};\n\nChat.className = 'ui-chat';\nChat.displayName = 'Chat';\n\nChat.slotClassNames = {\n  item: `${Chat.className}__item`,\n};\n\nChat.defaultProps = {\n  accessibility: chatBehavior,\n  as: 'ul',\n};\nChat.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  items: PropTypes.arrayOf(customPropTypes.itemShorthand),\n};\nChat.handledProps = Object.keys(Chat.propTypes) as any;\n\nChat.Item = ChatItem;\nChat.Message = ChatMessage;\n\nChat.create = createShorthandFactory({ Component: Chat });\n\n/**\n * A Chat displays messages from a conversation between multiple users.\n */\nexport default withSafeTypeForAs<typeof Chat, ChatProps, 'ul'>(Chat);\n"],"file":"Chat.js"}