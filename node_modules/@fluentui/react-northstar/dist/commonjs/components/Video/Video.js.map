{"version":3,"sources":["components/Video/Video.tsx"],"names":["Video","React","createRef","videoRef","current","muted","props","setVideoAttributes","accessibility","ElementType","classes","unhandledProps","controls","autoPlay","loop","poster","src","root","attributes","UIComponent","commonPropTypes","createCommon","children","content","PropTypes","bool","string","as","create","Component","mappedProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;IAsBMA,K;;;;;;;;;;;;;;;;;2FA2BOC,KAAK,CAACC,SAAN,E;qGAUU,YAAM;AACzB;AACA;AACA,UAAI,MAAKC,QAAL,CAAcC,OAAlB,EAA2B;AACzB,cAAKD,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8B,CAAC,CAAC,MAAKC,KAAL,CAAWD,KAA3C;AACD;AACF,K;;;;;;wCAdmB;AAClB,WAAKE,kBAAL;AACD;;;yCAEoB;AACnB,WAAKA,kBAAL;AACD;;;0CAUwE;AAAA,UAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBACrB,KAAKL,KADgB;AAAA,UAC/DM,QAD+D,eAC/DA,QAD+D;AAAA,UACrDC,QADqD,eACrDA,QADqD;AAAA,UAC3CC,IAD2C,eAC3CA,IAD2C;AAAA,UACrCC,MADqC,eACrCA,MADqC;AAAA,UAC7BC,GAD6B,eAC7BA,GAD6B;AAGvE,aACE,oBAAC,sBAAD;AAAK,QAAA,QAAQ,EAAE,KAAKb;AAApB,SACE,oBAAC,WAAD;AACE,QAAA,QAAQ,EAAEU,QADZ;AAEE,QAAA,SAAS,EAAEH,OAAO,CAACO,IAFrB;AAGE,QAAA,QAAQ,EAAEL,QAHZ;AAIE,QAAA,IAAI,EAAEE,IAJR;AAKE,QAAA,MAAM,EAAEC,MALV;AAME,QAAA,GAAG,EAAEC;AANP,SAOMR,aAAa,CAACU,UAAd,CAAyBD,IAP/B,EAQMN,cARN,EADF,CADF;AAcD;;;EA9DiBQ,kB;;8BAAdnB,K;8BAAAA,K,eAGe,U;8BAHfA,K,iBAKiB,O;8BALjBA,K,iCAQCoB,uBAAgBC,YAAhB,CAA6B;AAC9BC,EAAAA,QAAQ,EAAE,KADoB;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAA7B,C;AAIHV,EAAAA,QAAQ,EAAEW,SAAS,CAACC,I;AACpBb,EAAAA,QAAQ,EAAEY,SAAS,CAACC,I;AACpBX,EAAAA,IAAI,EAAEU,SAAS,CAACC,I;AAChBpB,EAAAA,KAAK,EAAEmB,SAAS,CAACC,I;AACjBV,EAAAA,MAAM,EAAES,SAAS,CAACE,M;AAClBV,EAAAA,GAAG,EAAEQ,SAAS,CAACE;;8BAjBb1B,K,kBAoBkB;AACpB2B,EAAAA,EAAE,EAAE,OADgB;AAEpBf,EAAAA,QAAQ,EAAE,IAFU;AAGpBC,EAAAA,QAAQ,EAAE,KAHU;AAIpBR,EAAAA,KAAK,EAAE;AAJa,C;AA6CxBL,KAAK,CAAC4B,MAAN,GAAe,mCAAuB;AAAEC,EAAAA,SAAS,EAAE7B,KAAb;AAAoB8B,EAAAA,UAAU,EAAE;AAAhC,CAAvB,CAAf;AAEA;;;;eAGe,8BAAqD9B,KAArD,C","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponent, UIComponentProps, commonPropTypes, ShorthandFactory } from '../../utils';\n\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface VideoProps extends UIComponentProps {\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nclass Video extends UIComponent<WithAsProp<VideoProps>> {\n  static create: ShorthandFactory<VideoProps>;\n\n  static className = 'ui-video';\n\n  static displayName = 'Video';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    autoPlay: PropTypes.bool,\n    controls: PropTypes.bool,\n    loop: PropTypes.bool,\n    muted: PropTypes.bool,\n    poster: PropTypes.string,\n    src: PropTypes.string,\n  };\n\n  static defaultProps = {\n    as: 'video',\n    controls: true,\n    autoPlay: false,\n    muted: false,\n  };\n\n  videoRef = React.createRef<HTMLVideoElement>();\n\n  componentDidMount() {\n    this.setVideoAttributes();\n  }\n\n  componentDidUpdate() {\n    this.setVideoAttributes();\n  }\n\n  setVideoAttributes = () => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (this.videoRef.current) {\n      this.videoRef.current.muted = !!this.props.muted;\n    }\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { controls, autoPlay, loop, poster, src } = this.props;\n\n    return (\n      <Ref innerRef={this.videoRef}>\n        <ElementType\n          autoPlay={autoPlay}\n          className={classes.root}\n          controls={controls}\n          loop={loop}\n          poster={poster}\n          src={src}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n        />\n      </Ref>\n    );\n  }\n}\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\n/**\n * A Video provides ability to embed video content.\n */\nexport default withSafeTypeForAs<typeof Video, VideoProps, 'video'>(Video);\n"],"file":"Video.js"}