{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["Accordion","props","context","moveNext","e","preventDefault","focusHandler","movePrevious","moveFirst","moveLast","index","setState","focusedIndex","targetComponent","itemRefs","current","focus","panels","length","activeIndex","state","exclusive","isIndexActionable","predefinedProps","onClick","titleProps","computeNewIndex","onFocus","isIndexActive","expanded","children","renderPanelContent","renderPanelTitle","syncFocusedIndex","panel","content","title","active","canBeCollapsed","contentRef","React","createRef","titleId","defaultAccordionTitleId","contentId","defaultAccordionContentId","push","AccordionTitle","create","defaultProps","className","slotClassNames","id","accordionContentId","overrideProps","handleTitleOverrides","render","AccordionContent","accordionTitleId","ContainerFocusHandler","getNavigationItemsSize","handleNavigationFocus","alwaysActiveIndex","ElementType","classes","accessibility","unhandledProps","attributes","root","rtlTextContainer","getAttributes","forElements","keyHandlers","renderPanels","AutoControlledComponent","commonPropTypes","createCommon","customPropTypes","every","disallow","PropTypes","oneOfType","arrayOf","number","defaultActiveIndex","bool","onTitleClick","func","onActiveIndexChange","shape","itemShorthand","accordionBehavior","as"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;AASA;;AACA;;AAEA;;AAOA;;IAoEMA,S;;;;;AA0EJ,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;AAC1B,+GAAMD,KAAN,EAAaC,OAAb;AAD0B,+FAxBU,IAwBV;AAAA,2FAvBjB,EAuBiB;AAAA,0GAtBF,wBAAW,kBAAX,CAsBE;AAAA,4GArBA,wBAAW,oBAAX,CAqBA;AAAA,iGAnBX;AACfC,MAAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACbA,QAAAA,CAAC,CAACC,cAAF;;AACA,cAAKC,YAAL,CAAkBH,QAAlB;AACD,OAJc;AAKfI,MAAAA,YAAY,EAAE,sBAAAH,CAAC,EAAI;AACjBA,QAAAA,CAAC,CAACC,cAAF;;AACA,cAAKC,YAAL,CAAkBC,YAAlB;AACD,OARc;AASfC,MAAAA,SAAS,EAAE,mBAAAJ,CAAC,EAAI;AACdA,QAAAA,CAAC,CAACC,cAAF;;AACA,cAAKC,YAAL,CAAkBE,SAAlB;AACD,OAZc;AAafC,MAAAA,QAAQ,EAAE,kBAAAL,CAAC,EAAI;AACbA,QAAAA,CAAC,CAACC,cAAF;;AACA,cAAKC,YAAL,CAAkBG,QAAlB;AACD;AAhBc,KAmBW;AAAA,wGAMJ,UAACC,KAAD,EAAmB;AACzC,YAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEF;AAAhB,OAAd,EAAuC,YAAM;AAC3C,YAAMG,eAAe,GAAG,MAAKC,QAAL,CAAcJ,KAAd,KAAwB,MAAKI,QAAL,CAAcJ,KAAd,EAAqBK,OAArE;AACAF,QAAAA,eAAe,IAAIA,eAAe,CAACG,KAAhB,EAAnB;AACD,OAHD;AAID,KAX2B;AAAA,yGAaH;AAAA,aAAM,MAAKf,KAAL,CAAWgB,MAAX,CAAkBC,MAAxB;AAAA,KAbG;AAAA,kGAoBV,UAACR,KAAD,EAAsC;AAAA,UAC9CS,WAD8C,GAC9B,MAAKC,KADyB,CAC9CD,WAD8C;AAAA,UAE9CE,SAF8C,GAEhC,MAAKpB,KAF2B,CAE9CoB,SAF8C;;AAItD,UAAI,CAAC,MAAKC,iBAAL,CAAuBZ,KAAvB,CAAL,EAAoC;AAClC,eAAOS,WAAP;AACD;;AAED,UAAIE,SAAJ,EAAe,OAAOX,KAAK,KAAKS,WAAV,GAAwB,CAAC,CAAzB,GAA6BT,KAApC,CARuC,CAStD;;AACA,aAAO,wBAAWS,WAAX,EAAoCT,KAApC,IACH,uBAAUS,WAAV,EAAmCT,KAAnC,CADG,8CAEES,WAFF,IAE4BT,KAF5B,EAAP;AAGD,KAjC2B;AAAA,uGAmCL,UAACa,eAAD;AAAA,aAA2C;AAChEC,QAAAA,OAAO,EAAE,iBAACpB,CAAD,EAA0BqB,UAA1B,EAA8D;AAAA,cAC7Df,KAD6D,GACnDe,UADmD,CAC7Df,KAD6D;;AAErE,cAAMS,WAAW,GAAG,MAAKO,eAAL,CAAqBhB,KAArB,CAApB;;AAEA,gBAAKC,QAAL,CAAc;AAAEQ,YAAAA,WAAW,EAAXA,WAAF;AAAeP,YAAAA,YAAY,EAAEF;AAA7B,WAAd;;AAEA,gCAAS,MAAKT,KAAd,EAAqB,qBAArB,EAA4CG,CAA5C,oBAAoD,MAAKH,KAAzD;AAAgEkB,YAAAA,WAAW,EAAXA;AAAhE;AACA,gCAASI,eAAT,EAA0B,SAA1B,EAAqCnB,CAArC,EAAwCqB,UAAxC;AACA,gCAAS,MAAKxB,KAAd,EAAqB,cAArB,EAAqCG,CAArC,EAAwCqB,UAAxC;AACD,SAV+D;AAWhEE,QAAAA,OAAO,EAAE,iBAACvB,CAAD,EAA0BqB,UAA1B,EAA8D;AACrE,gCAASF,eAAT,EAA0B,SAA1B,EAAqCnB,CAArC,EAAwCqB,UAAxC;;AACA,gBAAKd,QAAL,CAAc;AAAEC,YAAAA,YAAY,EAAEW,eAAe,CAACb;AAAhC,WAAd;AACD;AAd+D,OAA3C;AAAA,KAnCK;AAAA,gGAoDZ,UAACA,KAAD,EAA4B;AAAA,UAClCW,SADkC,GACpB,MAAKpB,KADe,CAClCoB,SADkC;AAAA,UAElCF,WAFkC,GAElB,MAAKC,KAFa,CAElCD,WAFkC;AAI1C,aAAOE,SAAS,GAAGF,WAAW,KAAKT,KAAnB,GAA2B,wBAAWS,WAAX,EAAoCT,KAApC,CAA3C;AACD,KAzD2B;AAAA,oGAoER,UAACA,KAAD,EAA4B;AAC9C,UAAI,CAAC,MAAKkB,aAAL,CAAmBlB,KAAnB,CAAL,EAAgC;AAC9B,eAAO,IAAP;AACD;;AAH6C,UAKtCS,WALsC,GAKtB,MAAKC,KALiB,CAKtCD,WALsC;AAAA,wBAMd,MAAKlB,KANS;AAAA,UAMtC4B,QANsC,eAMtCA,QANsC;AAAA,UAM5BR,SAN4B,eAM5BA,SAN4B;AAQ9C,aAAO,CAACQ,QAAD,IAAc,CAACR,SAAD,IAAeF,WAAD,CAA0BD,MAA1B,GAAmC,CAAtE;AACD,KA7E2B;AAAA,+FA+Eb,YAAM;AACnB,UAAMY,QAAe,GAAG,EAAxB;AADmB,yBAEsC,MAAK7B,KAF3C;AAAA,UAEXgB,MAFW,gBAEXA,MAFW;AAAA,UAEHc,kBAFG,gBAEHA,kBAFG;AAAA,UAEiBC,gBAFjB,gBAEiBA,gBAFjB;AAAA,UAGXpB,YAHW,GAGM,MAAKQ,KAHX,CAGXR,YAHW;AAKnB,YAAKE,QAAL,GAAgB,EAAhB;;AACA,YAAKR,YAAL,CAAkB2B,gBAAlB,CAAmCrB,YAAnC;;AAEA,0BAAOK,MAAP,EAAe,UAACiB,KAAD,EAAQxB,KAAR,EAAkB;AAAA,YACvByB,OADuB,GACJD,KADI,CACvBC,OADuB;AAAA,YACdC,KADc,GACJF,KADI,CACdE,KADc;;AAE/B,YAAMC,MAAM,GAAG,MAAKT,aAAL,CAAmBlB,KAAnB,CAAf;;AACA,YAAM4B,cAAc,GAAG,MAAKhB,iBAAL,CAAuBZ,KAAvB,CAAvB;;AACA,YAAM6B,UAAU,GAAGC,KAAK,CAACC,SAAN,EAAnB;AACA,YAAMC,OAAO,GAAGN,KAAK,CAAC,IAAD,CAAL,cAAkB,MAAKO,uBAAvB,SAAiDjC,KAAjD,CAAhB;AACA,YAAMkC,SAAS,GAAGT,OAAO,CAAC,IAAD,CAAP,cAAoB,MAAKU,yBAAzB,SAAqDnC,KAArD,CAAlB;AACA,cAAKI,QAAL,CAAcJ,KAAd,IAAuB6B,UAAvB;AAEAT,QAAAA,QAAQ,CAACgB,IAAT,CACEC,wBAAeC,MAAf,CAAsBZ,KAAtB,EAA6B;AAC3Ba,UAAAA,YAAY,EAAE;AAAA,mBAAO;AACnBC,cAAAA,SAAS,EAAElD,SAAS,CAACmD,cAAV,CAAyBf,KADjB;AAEnBC,cAAAA,MAAM,EAANA,MAFmB;AAGnB3B,cAAAA,KAAK,EAALA,KAHmB;AAInB6B,cAAAA,UAAU,EAAVA,UAJmB;AAKnBD,cAAAA,cAAc,EAAdA,cALmB;AAMnBc,cAAAA,EAAE,EAAEV,OANe;AAOnBW,cAAAA,kBAAkB,EAAET;AAPD,aAAP;AAAA,WADa;AAU3BU,UAAAA,aAAa,EAAE,MAAKC,oBAVO;AAW3BC,UAAAA,MAAM,EAAExB;AAXmB,SAA7B,CADF;AAeAF,QAAAA,QAAQ,CAACgB,IAAT,CACEW,0BAAiBT,MAAjB,CAAwBb,OAAxB,EAAiC;AAC/Bc,UAAAA,YAAY,EAAE;AAAA,mBAAO;AACnBC,cAAAA,SAAS,EAAElD,SAAS,CAACmD,cAAV,CAAyBhB,OADjB;AAEnBE,cAAAA,MAAM,EAANA,MAFmB;AAGnBe,cAAAA,EAAE,EAAER,SAHe;AAInBc,cAAAA,gBAAgB,EAAEhB;AAJC,aAAP;AAAA,WADiB;AAO/Bc,UAAAA,MAAM,EAAEzB;AAPuB,SAAjC,CADF;AAWD,OAnCD;AAqCA,aAAOD,QAAP;AACD,KA7H2B;AAG1B,UAAKxB,YAAL,GAAoB,IAAIqD,qCAAJ,CAA0B,MAAKC,sBAA/B,EAAuD,MAAKC,qBAA5D,EAAmF,IAAnF,CAApB;AAH0B;AAI3B;;;;wDAWsE;AAAA,UAAvChC,QAAuC,QAAvCA,QAAuC;AAAA,UAA7BR,SAA6B,QAA7BA,SAA6B;AACrE,UAAMyC,iBAAiB,GAAGjC,QAAQ,GAAG,CAAH,GAAO,CAAC,CAA1C;AACA,aAAO;AAAEV,QAAAA,WAAW,EAAEE,SAAS,GAAGyC,iBAAH,GAAuB,CAACA,iBAAD;AAA/C,OAAP;AACD;;;2CA6GwE;AAAA,UAAvDC,WAAuD,SAAvDA,WAAuD;AAAA,UAA1CC,OAA0C,SAA1CA,OAA0C;AAAA,UAAjCC,aAAiC,SAAjCA,aAAiC;AAAA,UAAlBC,cAAkB,SAAlBA,cAAkB;AAAA,UAC/DpC,QAD+D,GAClD,KAAK7B,KAD6C,CAC/D6B,QAD+D;AAGvE,aACE,oBAAC,WAAD,6BACMmC,aAAa,CAACE,UAAd,CAAyBC,IAD/B,EAEMC,wBAAiBC,aAAjB,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAACzC,QAAD;AAAf,OAA/B,CAFN,EAGMoC,cAHN,EAIM,0CAA8BD,aAAa,CAACO,WAAd,CAA0BJ,IAAxD,EAA8DF,cAA9D,CAJN;AAKE,QAAA,SAAS,EAAEF,OAAO,CAACI;AALrB,UAOG,0BAActC,QAAd,IAA0BA,QAA1B,GAAqC,KAAK2C,YAAL,EAPxC,CADF;AAWD;;;EAvNqBC,8B;AA0NxB;;;;;;;;8BA1NM1E,S,iBACiB,W;8BADjBA,S,eAGe,c;8BAHfA,S,oBAK6C;AAC/CmC,EAAAA,OAAO,YAAKnC,SAAS,CAACkD,SAAf,cADwC;AAE/Cd,EAAAA,KAAK,YAAKpC,SAAS,CAACkD,SAAf;AAF0C,C;8BAL7ClD,S,iCAWC2E,uBAAgBC,YAAhB,CAA6B;AAC9BzC,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHhB,EAAAA,WAAW,EAAE0D,eAAe,CAACC,KAAhB,CAAsB,CACjCD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CADiC,EAEjCC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,OAAV,CAAkBF,SAAS,CAACG,MAA5B,CAAD,EAAsCH,SAAS,CAACG,MAAhD,CAApB,CAFiC,CAAtB,C;AAIbC,EAAAA,kBAAkB,EAAEP,eAAe,CAACC,KAAhB,CAAsB,CACxCD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CADwC,EAExCC,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,OAAV,CAAkBF,SAAS,CAACG,MAA5B,CAAD,EAAsCH,SAAS,CAACG,MAAhD,CAApB,CAFwC,CAAtB,C;AAIpB9D,EAAAA,SAAS,EAAE2D,SAAS,CAACK,I;AACrBxD,EAAAA,QAAQ,EAAEmD,SAAS,CAACK,I;AACpBC,EAAAA,YAAY,EAAET,eAAe,CAACC,KAAhB,CAAsB,CAACD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAAD,EAAyCC,SAAS,CAACO,IAAnD,CAAtB,C;AACdC,EAAAA,mBAAmB,EAAER,SAAS,CAACO,I;AAC/BtE,EAAAA,MAAM,EAAE4D,eAAe,CAACC,KAAhB,CAAsB,CAC5BD,eAAe,CAACE,QAAhB,CAAyB,CAAC,UAAD,CAAzB,CAD4B,EAE5BC,SAAS,CAACE,OAAV,CACEF,SAAS,CAACS,KAAV,CAAgB;AACdtD,IAAAA,OAAO,EAAE0C,eAAe,CAACa,aADX;AAEdtD,IAAAA,KAAK,EAAEyC,eAAe,CAACa;AAFT,GAAhB,CADF,CAF4B,CAAtB,C;AAUR1D,EAAAA,gBAAgB,EAAEgD,SAAS,CAACO,I;AAC5BxD,EAAAA,kBAAkB,EAAEiD,SAAS,CAACO;;8BArC5BvF,S,kBAwCkB;AACpBiE,EAAAA,aAAa,EAAE0B,gCADK;AAEpBC,EAAAA,EAAE,EAAE;AAFgB,C;8BAxClB5F,S,yBA6CyB,CAAC,aAAD,C;8BA7CzBA,S,WA+CW+C,uB;8BA/CX/C,S,aAgDayD,yB;;eAgLJ,8BAAoDzD,SAApD,C","sourcesContent":["import { Accessibility, accordionBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\nimport AccordionTitle, { AccordionTitleProps } from './AccordionTitle';\nimport AccordionContent, { AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  withSafeTypeForAs,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n}\n\nexport interface AccordionState {\n  activeIndex: number[] | number;\n  focusedIndex: number;\n}\n\nclass Accordion extends AutoControlledComponent<WithAsProp<AccordionProps>, AccordionState> {\n  static displayName = 'Accordion';\n\n  static className = 'ui-accordion';\n\n  static slotClassNames: AccordionSlotClassNames = {\n    content: `${Accordion.className}__content`,\n    title: `${Accordion.className}__title`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    defaultActiveIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    exclusive: PropTypes.bool,\n    expanded: PropTypes.bool,\n    onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n    onActiveIndexChange: PropTypes.func,\n    panels: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.arrayOf(\n        PropTypes.shape({\n          content: customPropTypes.itemShorthand,\n          title: customPropTypes.itemShorthand,\n        }),\n      ),\n    ]),\n\n    renderPanelTitle: PropTypes.func,\n    renderPanelContent: PropTypes.func,\n  };\n\n  static defaultProps = {\n    accessibility: accordionBehavior,\n    as: 'dl',\n  };\n\n  static autoControlledProps = ['activeIndex'];\n\n  static Title = AccordionTitle;\n  static Content = AccordionContent;\n\n  focusHandler: ContainerFocusHandler = null;\n  itemRefs = [];\n  defaultAccordionTitleId = _.uniqueId('accordion-title-');\n  defaultAccordionContentId = _.uniqueId('accordion-content-');\n\n  actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      this.focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      this.focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      this.focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      this.focusHandler.moveLast();\n    },\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.focusHandler = new ContainerFocusHandler(this.getNavigationItemsSize, this.handleNavigationFocus, true);\n  }\n\n  handleNavigationFocus = (index: number) => {\n    this.setState({ focusedIndex: index }, () => {\n      const targetComponent = this.itemRefs[index] && this.itemRefs[index].current;\n      targetComponent && targetComponent.focus();\n    });\n  };\n\n  getNavigationItemsSize = () => this.props.panels.length;\n\n  getInitialAutoControlledState({ expanded, exclusive }: AccordionProps) {\n    const alwaysActiveIndex = expanded ? 0 : -1;\n    return { activeIndex: exclusive ? alwaysActiveIndex : [alwaysActiveIndex] };\n  }\n\n  computeNewIndex = (index: number): number | number[] => {\n    const { activeIndex } = this.state;\n    const { exclusive } = this.props;\n\n    if (!this.isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = this.computeNewIndex(index);\n\n      this.setState({ activeIndex, focusedIndex: index });\n\n      _.invoke(this.props, 'onActiveIndexChange', e, { ...this.props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(this.props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      this.setState({ focusedIndex: predefinedProps.index });\n    },\n  });\n\n  isIndexActive = (index: number): boolean => {\n    const { exclusive } = this.props;\n    const { activeIndex } = this.state;\n\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  isIndexActionable = (index: number): boolean => {\n    if (!this.isIndexActive(index)) {\n      return true;\n    }\n\n    const { activeIndex } = this.state;\n    const { expanded, exclusive } = this.props;\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  renderPanels = () => {\n    const children: any[] = [];\n    const { panels, renderPanelContent, renderPanelTitle } = this.props;\n    const { focusedIndex } = this.state;\n\n    this.itemRefs = [];\n    this.focusHandler.syncFocusedIndex(focusedIndex);\n\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = this.isIndexActive(index);\n      const canBeCollapsed = this.isIndexActionable(index);\n      const contentRef = React.createRef<HTMLElement>();\n      const titleId = title['id'] || `${this.defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${this.defaultAccordionContentId}${index}`;\n      this.itemRefs[index] = contentRef;\n\n      children.push(\n        AccordionTitle.create(title, {\n          defaultProps: () => ({\n            className: Accordion.slotClassNames.title,\n            active,\n            index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: this.handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      children.push(\n        AccordionContent.create(content, {\n          defaultProps: () => ({\n            className: Accordion.slotClassNames.content,\n            active,\n            id: contentId,\n            accordionTitleId: titleId,\n          }),\n          render: renderPanelContent,\n        }),\n      );\n    });\n\n    return children;\n  };\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children } = this.props;\n\n    return (\n      <ElementType\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : this.renderPanels()}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport default withSafeTypeForAs<typeof Accordion, AccordionProps>(Accordion);\n"],"file":"Accordion.js"}