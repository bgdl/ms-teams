{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["AccordionTitle","performClick","e","preventDefault","handleClick","props","disabled","stopPropagation","predefinedProps","onFocus","handleFocus","onClick","ElementType","classes","unhandledProps","styles","accessibility","contentRef","children","content","indicator","contentWrapper","contentWrapperElement","Box","create","defaultProps","className","slotClassNames","attributes","keyHandlers","overrideProps","indicatorBehavior","as","handleWrapperOverrides","root","rtlTextContainer","getAttributes","forElements","UIComponent","commonPropTypes","createCommon","accordionContentId","PropTypes","string","active","bool","customPropTypes","ref","wrapperShorthand","canBeCollapsed","index","number","func","shorthandAllowingChildren","accordionTitleBehavior","Component","mappedProp"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport { WithAsProp, ComponentEventHandler, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nclass AccordionTitle extends UIComponent<WithAsProp<AccordionTitleProps>, any> {\n  static displayName = 'AccordionTitle';\n\n  static create: ShorthandFactory<AccordionTitleProps>;\n\n  static className = 'ui-accordion__title';\n\n  static slotClassNames: AccordionTitleSlotClassNames;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ content: 'shorthand' }),\n    accordionContentId: PropTypes.string,\n    active: PropTypes.bool,\n    contentRef: customPropTypes.ref,\n    contentWrapper: customPropTypes.wrapperShorthand,\n    canBeCollapsed: PropTypes.bool,\n    disabled: PropTypes.bool,\n    index: PropTypes.number,\n    onClick: PropTypes.func,\n    indicator: customPropTypes.shorthandAllowingChildren,\n  };\n\n  static defaultProps = {\n    accessibility: accordionTitleBehavior,\n    as: 'dt',\n    contentRef: _.noop,\n    indicator: {},\n    contentWrapper: {},\n  };\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = (e: React.SyntheticEvent) => {\n    if (!this.props.disabled) {\n      _.invoke(this.props, 'onClick', e, this.props);\n    }\n  };\n\n  handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(this.props, 'onFocus', e, this.props);\n  };\n\n  handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      this.handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, this.props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      this.handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, this.props);\n    },\n  });\n\n  renderComponent({ ElementType, classes, unhandledProps, styles, accessibility }) {\n    const { contentRef, children, content, indicator, contentWrapper } = this.props;\n\n    const contentWrapperElement = (\n      <Ref innerRef={contentRef}>\n        {Box.create(contentWrapper, {\n          defaultProps: () => ({\n            className: AccordionTitle.slotClassNames.contentWrapper,\n            styles: styles.contentWrapper,\n            ...accessibility.attributes.content,\n            ...applyAccessibilityKeyHandlers(accessibility.keyHandlers.content, unhandledProps),\n          }),\n          overrideProps: predefinedProps => ({\n            children: (\n              <>\n                {Box.create(indicator, {\n                  defaultProps: () => ({\n                    styles: styles.indicator,\n                    accessibility: indicatorBehavior,\n                  }),\n                })}\n                {Box.create(content, {\n                  defaultProps: () => ({\n                    as: 'span',\n                    styles: styles.content,\n                  }),\n                })}\n              </>\n            ),\n            ...this.handleWrapperOverrides(predefinedProps),\n          }),\n        })}\n      </Ref>\n    );\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : contentWrapperElement}\n      </ElementType>\n    );\n  }\n}\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n\nAccordionTitle.slotClassNames = {\n  contentWrapper: `${AccordionTitle.className}__content-wrapper`,\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport default withSafeTypeForAs<typeof AccordionTitle, AccordionTitleProps>(AccordionTitle);\n"],"file":"AccordionTitle.js"}