"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _noop2 = _interopRequireDefault(require("lodash/noop"));

var _accessibility = require("@fluentui/accessibility");

var _reactComponentRef = require("@fluentui/react-component-ref");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _utils = require("../../utils");

var _types = require("../../types");

var _Box = _interopRequireDefault(require("../Box/Box"));

var AccordionTitle =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(AccordionTitle, _UIComponent);

  function AccordionTitle() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, AccordionTitle);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "actionHandlers", {
      performClick: function performClick(e) {
        e.preventDefault();

        _this.handleClick(e);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClick", function (e) {
      if (!_this.props.disabled) {
        (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFocus", function (e) {
      e.stopPropagation();
      (0, _invoke2.default)(_this.props, 'onFocus', e, _this.props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleWrapperOverrides", function (predefinedProps) {
      return {
        onFocus: function onFocus(e) {
          _this.handleFocus(e);

          (0, _invoke2.default)(predefinedProps, 'onFocus', e, _this.props);
        },
        onClick: function onClick(e) {
          _this.handleClick(e);

          (0, _invoke2.default)(predefinedProps, 'onClick', e, _this.props);
        }
      };
    });
    return _this;
  }

  (0, _createClass2.default)(AccordionTitle, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this2 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          styles = _ref.styles,
          accessibility = _ref.accessibility;
      var _this$props = this.props,
          contentRef = _this$props.contentRef,
          children = _this$props.children,
          content = _this$props.content,
          indicator = _this$props.indicator,
          contentWrapper = _this$props.contentWrapper;
      var contentWrapperElement = React.createElement(_reactComponentRef.Ref, {
        innerRef: contentRef
      }, _Box.default.create(contentWrapper, {
        defaultProps: function defaultProps() {
          return Object.assign({
            className: AccordionTitle.slotClassNames.contentWrapper,
            styles: styles.contentWrapper
          }, accessibility.attributes.content, {}, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.content, unhandledProps));
        },
        overrideProps: function overrideProps(predefinedProps) {
          return Object.assign({
            children: React.createElement(React.Fragment, null, _Box.default.create(indicator, {
              defaultProps: function defaultProps() {
                return {
                  styles: styles.indicator,
                  accessibility: _accessibility.indicatorBehavior
                };
              }
            }), _Box.default.create(content, {
              defaultProps: function defaultProps() {
                return {
                  as: 'span',
                  styles: styles.content
                };
              }
            }))
          }, _this2.handleWrapperOverrides(predefinedProps));
        }
      }));
      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, _utils.rtlTextContainer.getAttributes({
        forElements: [children]
      }), accessibility.attributes.root, unhandledProps, (0, _utils.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.root, unhandledProps)), (0, _utils.childrenExist)(children) ? children : contentWrapperElement);
    }
  }]);
  return AccordionTitle;
}(_utils.UIComponent);

(0, _defineProperty2.default)(AccordionTitle, "displayName", 'AccordionTitle');
(0, _defineProperty2.default)(AccordionTitle, "create", void 0);
(0, _defineProperty2.default)(AccordionTitle, "className", 'ui-accordion__title');
(0, _defineProperty2.default)(AccordionTitle, "slotClassNames", void 0);
(0, _defineProperty2.default)(AccordionTitle, "propTypes", Object.assign({}, _utils.commonPropTypes.createCommon({
  content: 'shorthand'
}), {
  accordionContentId: PropTypes.string,
  active: PropTypes.bool,
  contentRef: customPropTypes.ref,
  contentWrapper: customPropTypes.wrapperShorthand,
  canBeCollapsed: PropTypes.bool,
  disabled: PropTypes.bool,
  index: PropTypes.number,
  onClick: PropTypes.func,
  indicator: customPropTypes.shorthandAllowingChildren
}));
(0, _defineProperty2.default)(AccordionTitle, "defaultProps", {
  accessibility: _accessibility.accordionTitleBehavior,
  as: 'dt',
  contentRef: _noop2.default,
  indicator: {},
  contentWrapper: {}
});
AccordionTitle.create = (0, _utils.createShorthandFactory)({
  Component: AccordionTitle,
  mappedProp: 'content'
});
AccordionTitle.slotClassNames = {
  contentWrapper: "".concat(AccordionTitle.className, "__content-wrapper")
};
/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */

var _default = (0, _types.withSafeTypeForAs)(AccordionTitle);

exports.default = _default;
//# sourceMappingURL=AccordionTitle.js.map
