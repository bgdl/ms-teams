{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["TreeTitle","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","getA11Props","debugName","actionHandlers","performClick","e","preventDefault","handleClick","mapPropsToBehavior","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","onClick","rtlTextContainer","getAttributes","forElements","propTypes","commonPropTypes","createCommon","PropTypes","bool","number","func","expanded","defaultProps","as","treeTitleBehavior","Object","keys","create","Component","mappedProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n}\n\nexport type TreeTitleStylesProps = never;\n\nconst TreeTitle: React.FC<WithAsProp<TreeTitleProps>> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: TreeTitle.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.className = 'ui-tree__title';\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  treeSize: PropTypes.number,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport default withSafeTypeForAs<typeof TreeTitle, TreeTitleProps, 'a'>(TreeTitle);\n"],"file":"TreeTitle.js"}