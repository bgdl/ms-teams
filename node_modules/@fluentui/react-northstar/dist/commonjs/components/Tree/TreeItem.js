"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _invoke2 = _interopRequireDefault(require("lodash/invoke"));

var _accessibility = require("@fluentui/accessibility");

var _reactBindings = require("@fluentui/react-bindings");

var customPropTypes = _interopRequireWildcard(require("@fluentui/react-proptypes"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactFela = require("react-fela");

var _reactComponentRef = require("@fluentui/react-component-ref");

var _utils = require("../../utils");

var _types = require("../../types");

var _TreeTitle = _interopRequireDefault(require("./TreeTitle"));

var _utils2 = require("./utils");

// @ts-ignore
var TreeItem = function TreeItem(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(TreeItem.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      children = props.children,
      className = props.className,
      contentRef = props.contentRef,
      design = props.design,
      title = props.title,
      renderItemTitle = props.renderItemTitle,
      expanded = props.expanded,
      level = props.level,
      index = props.index,
      styles = props.styles,
      variables = props.variables,
      treeSize = props.treeSize;
  var hasSubtreeItem = (0, _utils2.hasSubtree)(props);

  var _React$useContext = React.useContext(_utils2.TreeContext),
      onFocusParent = _React$useContext.onFocusParent,
      onSiblingsExpand = _React$useContext.onSiblingsExpand,
      onFocusFirstChild = _React$useContext.onFocusFirstChild,
      onTitleClick = _React$useContext.onTitleClick;

  var getA11Props = (0, _reactBindings.useAccessibility)(accessibility, {
    actionHandlers: {
      performClick: function performClick(e) {
        e.preventDefault();
        e.stopPropagation();
        handleTitleClick(e);
      },
      focusParent: function focusParent(e) {
        e.preventDefault();
        e.stopPropagation();
        handleFocusParent(e);
      },
      collapse: function collapse(e) {
        e.preventDefault();
        e.stopPropagation();
        handleTitleClick(e);
      },
      expand: function expand(e) {
        e.preventDefault();
        e.stopPropagation();
        handleTitleClick(e);
      },
      focusFirstChild: function focusFirstChild(e) {
        e.preventDefault();
        e.stopPropagation();
        handleFocusFirstChild(e);
      },
      expandSiblings: function expandSiblings(e) {
        e.preventDefault();
        e.stopPropagation();
        handleSiblingsExpand(e);
      }
    },
    debugName: TreeItem.className,
    mapPropsToBehavior: function mapPropsToBehavior() {
      return {
        expanded: expanded,
        level: level,
        index: index,
        hasSubtree: hasSubtreeItem,
        treeSize: treeSize
      };
    },
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(TreeItem.displayName, {
    className: TreeItem.className,
    mapPropsToStyles: function mapPropsToStyles() {
      return {
        level: level
      };
    },
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: variables
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var handleTitleClick = function handleTitleClick(e) {
    onTitleClick(e, props);
    (0, _invoke2.default)(props, 'onTitleClick', e, props);
  };

  var handleFocusFirstChild = function handleFocusFirstChild(e) {
    (0, _invoke2.default)(props, 'onFocusFirstChild', e, props);
    onFocusFirstChild(props.id);
  };

  var handleFocusParent = function handleFocusParent(e) {
    (0, _invoke2.default)(props, 'onFocusParent', e, props);
    onFocusParent(props.parent);
  };

  var handleSiblingsExpand = function handleSiblingsExpand(e) {
    (0, _invoke2.default)(props, 'onSiblingsExpand', e, props);
    onSiblingsExpand(e, props);
  };

  var handleTitleOverrides = function handleTitleOverrides(predefinedProps) {
    return {
      onClick: function onClick(e, titleProps) {
        handleTitleClick(e);
        (0, _invoke2.default)(predefinedProps, 'onClick', e, titleProps);
      }
    };
  };

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(TreeItem.handledProps, props);
  var element = React.createElement(ElementType, getA11Props('root', Object.assign({
    className: classes.root
  }, _utils.rtlTextContainer.getAttributes({
    forElements: [children]
  }), {}, unhandledProps)), (0, _utils.childrenExist)(children) ? children : _TreeTitle.default.create(title, {
    defaultProps: function defaultProps() {
      return getA11Props('title', {
        className: TreeItem.slotClassNames.title,
        expanded: expanded,
        hasSubtree: hasSubtreeItem,
        as: hasSubtreeItem ? 'span' : 'a',
        level: level,
        treeSize: treeSize,
        index: index
      });
    },
    render: renderItemTitle,
    overrideProps: handleTitleOverrides
  }));
  var elementWithRef = contentRef ? React.createElement(_reactComponentRef.Ref, {
    innerRef: contentRef
  }, element) : element;
  setEnd();
  return elementWithRef;
};

TreeItem.className = 'ui-tree__item';
TreeItem.displayName = 'TreeItem';
TreeItem.slotClassNames = {
  title: "".concat(TreeItem.className, "__title"),
  subtree: "".concat(TreeItem.className, "__subtree")
};
TreeItem.propTypes = Object.assign({}, _utils.commonPropTypes.createCommon({
  content: false
}), {
  contentRef: customPropTypes.ref,
  id: PropTypes.string.isRequired,
  index: PropTypes.number,
  items: customPropTypes.collectionShorthand,
  level: PropTypes.number,
  onFocusFirstChild: PropTypes.func,
  onFocusParent: PropTypes.func,
  onTitleClick: PropTypes.func,
  onSiblingsExpand: PropTypes.func,
  expanded: PropTypes.bool,
  parent: PropTypes.string,
  renderItemTitle: PropTypes.func,
  treeSize: PropTypes.number,
  title: customPropTypes.itemShorthand
});
TreeItem.defaultProps = {
  accessibility: _accessibility.treeItemBehavior
};
TreeItem.handledProps = Object.keys(TreeItem.propTypes);
TreeItem.create = (0, _utils.createShorthandFactory)({
  Component: TreeItem,
  mappedProp: 'title'
});
/**
 * A TreeItem renders an item of a Tree.
 *
 * @accessibility
 * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.
 */

var _default = (0, _types.withSafeTypeForAs)(TreeItem);

exports.default = _default;
//# sourceMappingURL=TreeItem.js.map
