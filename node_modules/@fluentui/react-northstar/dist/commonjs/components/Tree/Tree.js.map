{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["Tree","React","createRef","Map","parent","parentRef","itemsRef","get","current","focus","e","treeItemProps","activeItemIds","state","id","props","exclusive","items","siblings","activeItemIdIndex","indexOf","some","sibling","activeSiblingIdIndex","setActiveItemIds","itemId","currentElement","elementToBeFocused","treeRef","forEach","isActiveItem","push","setState","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","accessibility","renderItemTitle","renderItems","level","reduce","renderedItems","item","index","isSubtree","isSubtreeExpanded","has","set","renderedItem","TreeItem","create","defaultProps","childBehaviors","undefined","className","slotClassNames","expanded","key","contentRef","treeSize","length","ElementType","classes","unhandledProps","children","contextValue","root","attributes","rtlTextContainer","getAttributes","forElements","keyHandlers","renderContent","nextProps","prevState","expandedItemsGenerator","acc","AutoControlledComponent","commonPropTypes","createCommon","content","customPropTypes","collectionShorthand","defaultActiveItemIds","PropTypes","bool","onActiveItemIdsChange","func","as","treeBehavior","TreeTitle","Component","mappedArrayProp"],"mappings":"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","sourcesContent":["import { Accessibility, treeBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior, getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport TreeItem, { TreeItemProps } from './TreeItem';\nimport TreeTitle, { TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ShorthandValue,\n  ComponentEventHandler,\n} from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext, TreeRenderContextValue } from './utils';\n\nexport interface TreeSlotClassNames {\n  item: string;\n}\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport interface TreeState {\n  activeItemIds: string[];\n}\n\nclass Tree extends AutoControlledComponent<WithAsProp<TreeProps>, TreeState> {\n  static create: ShorthandFactory<TreeProps>;\n\n  static displayName = 'Tree';\n\n  static className = 'ui-tree';\n\n  static slotClassNames: TreeSlotClassNames = {\n    item: `${Tree.className}__item`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeItemIds: customPropTypes.collectionShorthand,\n    defaultActiveItemIds: customPropTypes.collectionShorthand,\n    exclusive: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    onActiveItemIdsChange: PropTypes.func,\n    renderItemTitle: PropTypes.func,\n    renderedItems: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: treeBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['activeItemIds'];\n\n  static Item = TreeItem;\n  static Title = TreeTitle;\n\n  static getAutoControlledStateFromProps(nextProps: TreeProps, prevState: TreeState) {\n    const { items } = nextProps;\n    let { activeItemIds } = nextProps;\n\n    if (!activeItemIds && items) {\n      activeItemIds = prevState.activeItemIds;\n\n      const expandedItemsGenerator = (items, acc = activeItemIds) =>\n        _.reduce(\n          items,\n          (acc, item) => {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          },\n          acc,\n        );\n\n      expandedItemsGenerator(items);\n    }\n\n    return {\n      activeItemIds,\n    };\n  }\n\n  getInitialAutoControlledState() {\n    return { activeItemIds: [] };\n  }\n\n  treeRef = React.createRef<HTMLElement>();\n  itemsRef = new Map<string, React.RefObject<HTMLElement>>();\n\n  onFocusParent = (parent: string) => {\n    const parentRef = this.itemsRef.get(parent);\n\n    if (!parentRef || !parentRef.current) {\n      return;\n    }\n\n    parentRef.current.focus();\n  };\n\n  onTitleClick = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    if (!hasSubtree(treeItemProps)) {\n      return;\n    }\n\n    let { activeItemIds } = this.state;\n    const { id } = treeItemProps;\n    const { exclusive, items } = this.props;\n    const siblings = getSiblings(items, id);\n\n    const activeItemIdIndex = activeItemIds.indexOf(id);\n\n    if (activeItemIdIndex > -1) {\n      activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n    } else {\n      if (exclusive) {\n        siblings.some(sibling => {\n          const activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n          if (activeSiblingIdIndex > -1) {\n            activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n\n            return true;\n          }\n          return false;\n        });\n      }\n\n      activeItemIds = [...activeItemIds, id];\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  onFocusFirstChild = (itemId: string) => {\n    const currentElement = this.itemsRef.get(itemId);\n\n    if (!currentElement || !currentElement.current) {\n      return;\n    }\n\n    const elementToBeFocused = getNextElement(this.treeRef.current, currentElement.current);\n\n    if (!elementToBeFocused) {\n      return;\n    }\n\n    elementToBeFocused.focus();\n  };\n\n  onSiblingsExpand = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    const { exclusive, items } = this.props;\n    if (exclusive) {\n      return;\n    }\n\n    const { id } = treeItemProps;\n    const { activeItemIds } = this.state;\n    const siblings = getSiblings(items, id);\n\n    siblings.forEach(sibling => {\n      if (hasSubtree(sibling) && !this.isActiveItem(sibling['id'])) {\n        activeItemIds.push(sibling['id']);\n      }\n    });\n\n    if (hasSubtree(treeItemProps) && !this.isActiveItem(id)) {\n      activeItemIds.push(id);\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  setActiveItemIds = (e: React.SyntheticEvent, activeItemIds: string[]) => {\n    _.invoke(this.props, 'onActiveItemIdsChange', e, { ...this.props, activeItemIds });\n\n    this.setState({\n      activeItemIds,\n    });\n  };\n\n  contextValue: TreeRenderContextValue = {\n    onFocusParent: this.onFocusParent,\n    onSiblingsExpand: this.onSiblingsExpand,\n    onFocusFirstChild: this.onFocusFirstChild,\n    onTitleClick: this.onTitleClick,\n  };\n\n  renderContent(accessibility: ReactAccessibilityBehavior): React.ReactElement[] {\n    const { items, renderItemTitle } = this.props;\n\n    if (!items) return null;\n\n    const renderItems = (\n      items: ShorthandCollection<TreeItemProps>,\n      level = 1,\n      parent?: string,\n    ): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: ShorthandValue<TreeItemProps>, index: number) => {\n        const itemId = item['id'];\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && this.isActiveItem(itemId);\n\n        if (!this.itemsRef.has(itemId)) {\n          this.itemsRef.set(itemId, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () => ({\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n            className: Tree.slotClassNames.item,\n            expanded: isSubtreeExpanded,\n            renderItemTitle,\n            key: item['id'],\n            parent,\n            level,\n            index: index + 1, // Used for aria-posinset and it's 1-based.\n            contentRef: this.itemsRef.get(itemId),\n            treeSize: items.length,\n          }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item['items'], level + 1, itemId) : ([] as any)),\n        ];\n      }, []);\n    };\n\n    return renderItems(items);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, renderedItems } = this.props;\n\n    return (\n      <TreeContext.Provider value={this.contextValue}>\n        <Ref innerRef={this.treeRef}>\n          <ElementType\n            className={classes.root}\n            {...accessibility.attributes.root}\n            {...rtlTextContainer.getAttributes({ forElements: [children] })}\n            {...unhandledProps}\n            {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n          >\n            {childrenExist(children)\n              ? children\n              : renderedItems\n              ? renderedItems(this.renderContent(accessibility))\n              : this.renderContent(accessibility)}\n          </ElementType>\n        </Ref>\n      </TreeContext.Provider>\n    );\n  }\n\n  isActiveItem = (id: string): boolean => {\n    const { activeItemIds } = this.state;\n    return activeItemIds.indexOf(id) > -1;\n  };\n}\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs<typeof Tree, TreeProps, 'ul'>(Tree);\n"],"file":"Tree.js"}