{"version":3,"sources":["components/ItemLayout/ItemLayout.tsx"],"names":["ItemLayout","classes","unhandledProps","styles","props","as","debug","endMedia","media","renderMainArea","rootCSS","mediaCSS","endMediaCSS","startArea","mainArea","state","endArea","mergedMediaClasses","slotClassNames","mergedEndMediaClasses","root","rtlTextContainer","createFor","element","UIComponent","commonPropTypes","createCommon","accessibility","children","content","contentMedia","PropTypes","any","bool","header","headerMedia","renderContentArea","func","renderHeaderArea","object","headerCSS","headerMediaCSS","contentCSS","contentMediaCSS","headerArea","contentArea","main","gridTemplateRows","mergedClasses","mediaClasses","create","Component","mappedProp","className"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport {\n  createShorthandFactory,\n  pxToRem,\n  UIComponent,\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport Layout from '../Layout/Layout';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface ItemLayoutSlotClassNames {\n  header: string;\n  headerMedia: string;\n  main: string;\n  content: string;\n  contentMedia: string;\n  media: string;\n  endMedia: string;\n}\n\nexport interface ItemLayoutProps extends UIComponentProps, ContentComponentProps<any> {\n  contentMedia?: any;\n  /** Toggle debug mode */\n  debug?: boolean;\n  header?: any;\n  endMedia?: any;\n  headerMedia?: any;\n  media?: any;\n  renderContentArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderHeaderArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderMainArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: React.CSSProperties;\n  /** Styled applied to the media element of the rendered component. */\n  mediaCSS?: React.CSSProperties;\n  /** Styled applied to the header element of the rendered component. */\n  headerCSS?: React.CSSProperties;\n  /** Styled applied to the header media element of the rendered component. */\n  headerMediaCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentMediaCSS?: React.CSSProperties;\n  /** Styled applied to the end media element of the rendered component. */\n  endMediaCSS?: React.CSSProperties;\n}\n\nclass ItemLayout extends UIComponent<WithAsProp<ItemLayoutProps>, any> {\n  static create: ShorthandFactory<ItemLayoutProps>;\n\n  static displayName = 'ItemLayout';\n\n  static className = 'ui-itemlayout';\n\n  static slotClassNames: ItemLayoutSlotClassNames;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    contentMedia: PropTypes.any,\n    content: PropTypes.any,\n    debug: PropTypes.bool,\n    header: PropTypes.any,\n    endMedia: PropTypes.any,\n    headerMedia: PropTypes.any,\n    media: PropTypes.any,\n    renderContentArea: PropTypes.func,\n    renderHeaderArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    rootCSS: PropTypes.object,\n    mediaCSS: PropTypes.object,\n    headerCSS: PropTypes.object,\n    headerMediaCSS: PropTypes.object,\n    contentCSS: PropTypes.object,\n    contentMediaCSS: PropTypes.object,\n    endMediaCSS: PropTypes.object,\n  };\n\n  static defaultProps = {\n    as: 'div',\n\n    renderMainArea: (props, state, classes) => {\n      const { renderHeaderArea, renderContentArea } = props;\n\n      const headerArea = renderHeaderArea(props, state, classes);\n      const contentArea = renderContentArea(props, state, classes);\n\n      return (\n        <div\n          className={ItemLayout.slotClassNames.main}\n          style={{\n            gridTemplateRows: '1fr 1fr',\n          }}\n        >\n          {headerArea}\n          {contentArea}\n        </div>\n      );\n    },\n\n    renderHeaderArea: (props, state, classes) => {\n      const { debug, header, headerMedia, headerCSS, headerMediaCSS } = props;\n\n      const mergedClasses = cx(ItemLayout.slotClassNames.header, classes.header);\n      const mediaClasses = cx(ItemLayout.slotClassNames.headerMedia, classes.headerMedia);\n\n      return !header && !headerMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"end\"\n          gap={pxToRem(8)}\n          debug={debug}\n          main={rtlTextContainer.createFor({ element: header })}\n          rootCSS={headerCSS}\n          end={\n            headerMedia && (\n              <span style={headerMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: headerMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n\n    renderContentArea: (props, state, classes) => {\n      const { debug, content, contentMedia, contentCSS, contentMediaCSS } = props;\n\n      const mergedClasses = cx(ItemLayout.slotClassNames.content, classes.content);\n      const mediaClasses = cx(ItemLayout.slotClassNames.contentMedia, classes.contentMedia);\n\n      return !content && !contentMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"start\"\n          gap={pxToRem(8)}\n          debug={debug}\n          rootCSS={contentCSS}\n          main={rtlTextContainer.createFor({ element: content })}\n          end={\n            contentMedia && (\n              <span style={contentMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: contentMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n  };\n\n  renderComponent({ classes, unhandledProps, styles }) {\n    const { as, debug, endMedia, media, renderMainArea, rootCSS, mediaCSS, endMediaCSS } = this.props;\n\n    const startArea = media;\n    const mainArea = renderMainArea(this.props, this.state, classes);\n    const endArea = endMedia;\n\n    const mergedMediaClasses = cx(ItemLayout.slotClassNames.media, classes.media);\n    const mergedEndMediaClasses = cx(ItemLayout.slotClassNames.endMedia, classes.endMedia);\n\n    return (\n      <Layout\n        as={as}\n        className={classes.root}\n        styles={styles.root}\n        rootCSS={rootCSS}\n        alignItems=\"center\"\n        gap={pxToRem(8)}\n        debug={debug}\n        reducing\n        start={\n          startArea && (\n            <span style={mediaCSS} className={mergedMediaClasses}>\n              {rtlTextContainer.createFor({ element: startArea })}\n            </span>\n          )\n        }\n        main={mainArea}\n        end={\n          endArea && (\n            <span style={endMediaCSS} className={mergedEndMediaClasses}>\n              {rtlTextContainer.createFor({ element: endArea })}\n            </span>\n          )\n        }\n        {...unhandledProps}\n      />\n    );\n  }\n}\n\nItemLayout.create = createShorthandFactory({ Component: ItemLayout, mappedProp: 'content' });\nItemLayout.slotClassNames = {\n  header: `${ItemLayout.className}__header`,\n  headerMedia: `${ItemLayout.className}__headerMedia`,\n  main: `${ItemLayout.className}__main`,\n  content: `${ItemLayout.className}__content`,\n  contentMedia: `${ItemLayout.className}__contentMedia`,\n  media: `${ItemLayout.className}__media`,\n  endMedia: `${ItemLayout.className}__endMedia`,\n};\n\n/**\n * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.\n */\nexport default withSafeTypeForAs<typeof ItemLayout, ItemLayoutProps>(ItemLayout);\n"],"file":"ItemLayout.js"}