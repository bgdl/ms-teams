{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["DropdownItem","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","active","accessibilityItemProps","className","content","design","header","image","isFromKeyboard","styles","checkable","checkableIndicator","selected","variables","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","classes","resolvedStyles","ElementType","unhandledProps","handledProps","handleClick","e","contentElement","Box","create","defaultProps","slotClassNames","headerElement","endMediaElement","accessibility","indicatorBehavior","imageElement","Image","avatar","media","element","root","main","as","propTypes","commonPropTypes","createCommon","children","PropTypes","object","bool","customPropTypes","itemShorthand","shorthandAllowingChildren","disabled","itemShorthandWithoutJSX","onClick","func","Object","keys","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport {\n  ShorthandValue,\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport Image, { ImageProps } from '../Image/Image';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nconst DropdownItem: React.FC<WithAsProp<DropdownItemProps> & { index: number }> &\n  FluentComponentStaticProps<DropdownItemProps> & {\n    slotClassNames: DropdownItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: DropdownItem.className,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: DropdownItem.slotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType className={classes.root} onClick={handleClick} {...accessibilityItemProps} {...unhandledProps}>\n      {imageElement}\n\n      <div className={cx(DropdownItem.slotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nDropdownItem.className = 'ui-dropdown__item';\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.slotClassNames = {\n  main: `${DropdownItem.className}__main`,\n  content: `${DropdownItem.className}__content`,\n  header: `${DropdownItem.className}__header`,\n  image: `${DropdownItem.className}__image`,\n  checkableIndicator: `${DropdownItem.className}__checkable-indicator`,\n};\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport default withSafeTypeForAs<typeof DropdownItem, DropdownItemProps>(DropdownItem);\n"],"file":"DropdownItem.js"}