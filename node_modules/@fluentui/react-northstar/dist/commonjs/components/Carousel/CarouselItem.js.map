{"version":3,"sources":["components/Carousel/CarouselItem.tsx"],"names":["CarouselItem","arrowKeysNavigationStopPropagation","e","currentTarget","target","stopPropagation","ElementType","classes","styles","accessibility","unhandledProps","props","children","content","itemPositionText","root","attributes","keyHandlers","slotClassNames","screenReaderContainerStyles","UIComponent","commonPropTypes","createCommon","active","PropTypes","bool","navigation","string","carouselItemBehavior","className","create","Component","mappedProp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAWA;;AACA;;IAoBMA,Y;;;;;;;;;;;;;;;;;iGAsBa;AACfC,MAAAA,kCAAkC,EAAE,4CAAAC,CAAC,EAAI;AACvC;AACA,YAAIA,CAAC,CAACC,aAAF,KAAoBD,CAAC,CAACE,MAA1B,EAAkC;AAChCF,UAAAA,CAAC,CAACG,eAAF;AACD;AACF;AANc,K;;;;;;0CASgE;AAAA,UAA/DC,WAA+D,QAA/DA,WAA+D;AAAA,UAAlDC,OAAkD,QAAlDA,OAAkD;AAAA,UAAzCC,MAAyC,QAAzCA,MAAyC;AAAA,UAAjCC,aAAiC,QAAjCA,aAAiC;AAAA,UAAlBC,cAAkB,QAAlBA,cAAkB;AAAA,wBAC/B,KAAKC,KAD0B;AAAA,UACvEC,QADuE,eACvEA,QADuE;AAAA,UAC7DC,OAD6D,eAC7DA,OAD6D;AAAA,UACpDC,gBADoD,eACpDA,gBADoD;AAE/E,aACE,oBAAC,WAAD;AACE,QAAA,SAAS,EAAEP,OAAO,CAACQ;AADrB,SAEMN,aAAa,CAACO,UAAd,CAAyBD,IAF/B,EAGML,cAHN,EAIM,0CAA8BD,aAAa,CAACQ,WAAd,CAA0BF,IAAxD,EAA8DL,cAA9D,CAJN,GAMG,0BAAcE,QAAd,IAA0BA,QAA1B,GAAqCC,OANxC,EAOE;AAAK,QAAA,SAAS,EAAEb,YAAY,CAACkB,cAAb,CAA4BJ,gBAA5C;AAA8D,QAAA,KAAK,EAAEK;AAArE,SACGL,gBADH,CAPF,CADF;AAaD;;;EA9CwBM,kB;;8BAArBpB,Y;8BAAAA,Y,iBAGiB,c;8BAHjBA,Y,eAKe,mB;8BALfA,Y,iCAQCqB,uBAAgBC,YAAhB,E;AACHC,EAAAA,MAAM,EAAEC,SAAS,CAACC,I;AAClBC,EAAAA,UAAU,EAAEF,SAAS,CAACC,I;AACtBX,EAAAA,gBAAgB,EAAEU,SAAS,CAACG;;8BAX1B3B,Y,kBAckB;AACpBS,EAAAA,aAAa,EAAEmB;AADK,C;8BAdlB5B,Y,oBAkBgD;AAClDc,EAAAA,gBAAgB,YAAKd,YAAY,CAAC6B,SAAlB;AADkC,C;AA+BtD7B,YAAY,CAAC8B,MAAb,GAAsB,mCAAuB;AAAEC,EAAAA,SAAS,EAAE/B,YAAb;AAA2BgC,EAAAA,UAAU,EAAE;AAAvC,CAAvB,CAAtB;AAEA;;;;;;;eAMe,8BAAiEhC,YAAjE,C","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { carouselItemBehavior } from '@fluentui/accessibility';\n\nimport {\n  UIComponent,\n  commonPropTypes,\n  UIComponentProps,\n  ShorthandFactory,\n  applyAccessibilityKeyHandlers,\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n} from '../../utils';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface CarouselItemSlotClassNames {\n  itemPositionText: string;\n}\n\nexport interface CarouselItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Whether or not the item is in view or not. */\n  active?: boolean;\n\n  /**\n   * Text to be added in the DOM that will specify item position. To be picked\n   * up by screen readers.\n   */\n  itemPositionText?: string;\n\n  /** Whether or not navigation exists in carousel. */\n  navigation?: boolean;\n}\n\nclass CarouselItem extends UIComponent<WithAsProp<CarouselItemProps>> {\n  static create: ShorthandFactory<CarouselItemProps>;\n\n  static displayName = 'CarouselItem';\n\n  static className = 'ui-carousel__item';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    active: PropTypes.bool,\n    navigation: PropTypes.bool,\n    itemPositionText: PropTypes.string,\n  };\n\n  static defaultProps = {\n    accessibility: carouselItemBehavior,\n  };\n\n  static slotClassNames: CarouselItemSlotClassNames = {\n    itemPositionText: `${CarouselItem.className}__itemPositionText`,\n  };\n\n  actionHandlers = {\n    arrowKeysNavigationStopPropagation: e => {\n      // let event propagate, when it was invoke on the element where arrow keys should rotate carousel\n      if (e.currentTarget !== e.target) {\n        e.stopPropagation();\n      }\n    },\n  };\n\n  renderComponent({ ElementType, classes, styles, accessibility, unhandledProps }) {\n    const { children, content, itemPositionText } = this.props;\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : content}\n        <div className={CarouselItem.slotClassNames.itemPositionText} style={screenReaderContainerStyles}>\n          {itemPositionText}\n        </div>\n      </ElementType>\n    );\n  }\n}\n\nCarouselItem.create = createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });\n\n/**\n * A Carousel displays data organised as a gallery.\n *\n * @accessibility\n * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.\n */\nexport default withSafeTypeForAs<typeof CarouselItem, CarouselItemProps, 'div'>(CarouselItem);\n"],"file":"CarouselItem.js"}