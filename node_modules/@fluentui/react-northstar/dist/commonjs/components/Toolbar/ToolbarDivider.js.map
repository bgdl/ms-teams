{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["ToolbarDivider","props","context","React","useContext","ThemeContext","displayName","telemetry","setStart","setEnd","accessibility","className","design","styles","variables","parentVariables","ToolbarVariablesContext","getA11yProps","debugName","rtl","mapPropsToInlineStyles","classes","ElementType","unhandledProps","handledProps","element","root","propTypes","commonPropTypes","createCommon","Object","keys","create","Component","mappedProp"],"mappings":";;;;;;;;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AAOA;;AAZA;AAuBA,IAAMA,cAC2C,GAAG,SAD9CA,cAC8C,CAAAC,KAAK,EAAI;AAC3D,MAAMC,OAAgC,GAAGC,KAAK,CAACC,UAAN,CAAiBC,uBAAjB,CAAzC;;AAD2D,sBAE9B,iCAAaL,cAAc,CAACM,WAA5B,EAAyCJ,OAAO,CAACK,SAAjD,CAF8B;AAAA,MAEnDC,QAFmD,iBAEnDA,QAFmD;AAAA,MAEzCC,MAFyC,iBAEzCA,MAFyC;;AAG3DD,EAAAA,QAAQ;AAHmD,MAKnDE,aALmD,GAKKT,KALL,CAKnDS,aALmD;AAAA,MAKpCC,SALoC,GAKKV,KALL,CAKpCU,SALoC;AAAA,MAKzBC,MALyB,GAKKX,KALL,CAKzBW,MALyB;AAAA,MAKjBC,MALiB,GAKKZ,KALL,CAKjBY,MALiB;AAAA,MAKTC,SALS,GAKKb,KALL,CAKTa,SALS;AAM3D,MAAMC,eAAe,GAAGZ,KAAK,CAACC,UAAN,CAAiBY,gDAAjB,CAAxB;AAEA,MAAMC,YAAY,GAAG,qCAAiBP,aAAjB,EAAgC;AACnDQ,IAAAA,SAAS,EAAElB,cAAc,CAACM,WADyB;AAEnDa,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAFsC,GAAhC,CAArB;;AAR2D,mBAYvC,8BAAqCnB,cAAc,CAACM,WAApD,EAAiE;AACnFK,IAAAA,SAAS,EAAEX,cAAc,CAACW,SADyD;AAEnFS,IAAAA,sBAAsB,EAAE;AAAA,aAAO;AAC7BT,QAAAA,SAAS,EAATA,SAD6B;AAE7BC,QAAAA,MAAM,EAANA,MAF6B;AAG7BC,QAAAA,MAAM,EAANA,MAH6B;AAI7BC,QAAAA,SAAS,EAAE,qCAAwBC,eAAxB,EAAyCD,SAAzC;AAJkB,OAAP;AAAA,KAF2D;AAQnFK,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AARsE,GAAjE,CAZuC;AAAA,MAYnDE,OAZmD,cAYnDA,OAZmD;;AAuB3D,MAAMC,WAAW,GAAG,mCAAerB,KAAf,CAApB;AACA,MAAMsB,cAAc,GAAG,sCAAkBvB,cAAc,CAACwB,YAAjC,EAA+CvB,KAA/C,CAAvB;AAEA,MAAMwB,OAAO,GAAG,oBAAC,WAAD,EAAiBR,YAAY,CAAC,MAAD,oBAAcM,cAAd;AAA8BZ,IAAAA,SAAS,EAAEU,OAAO,CAACK;AAAjD,KAA7B,CAAhB;AACAjB,EAAAA,MAAM;AAEN,SAAOgB,OAAP;AACD,CA/BD;;AAiCAzB,cAAc,CAACW,SAAf,GAA2B,qBAA3B;AACAX,cAAc,CAACM,WAAf,GAA6B,gBAA7B;AAEAN,cAAc,CAAC2B,SAAf,GAA2BC,uBAAgBC,YAAhB,EAA3B;AACA7B,cAAc,CAACwB,YAAf,GAA8BM,MAAM,CAACC,IAAP,CAAY/B,cAAc,CAAC2B,SAA3B,CAA9B;AAEA3B,cAAc,CAACgC,MAAf,GAAwB,mCAAuB;AAAEC,EAAAA,SAAS,EAAEjC,cAAb;AAA6BkC,EAAAA,UAAU,EAAE;AAAzC,CAAvB,CAAxB;AAEA;;;;eAGe,8BAA8DlC,cAA9D,C","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\n\nconst ToolbarDivider: React.FC<WithAsProp<ToolbarDividerProps>> &\n  FluentComponentStaticProps<ToolbarDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarDividerStylesProps>(ToolbarDivider.displayName, {\n    className: ToolbarDivider.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarDivider.className = 'ui-toolbar__divider';\nToolbarDivider.displayName = 'ToolbarDivider';\n\nToolbarDivider.propTypes = commonPropTypes.createCommon();\nToolbarDivider.handledProps = Object.keys(ToolbarDivider.propTypes) as any;\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nexport default withSafeTypeForAs<typeof ToolbarDivider, ToolbarDividerProps>(ToolbarDivider);\n"],"file":"ToolbarDivider.js"}