"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactBindings = require("@fluentui/react-bindings");

var _styles = require("@fluentui/styles");

var _reactFela = require("react-fela");

var React = _interopRequireWildcard(require("react"));

var _types = require("../../types");

var _utils = require("../../utils");

var _toolbarVariablesContext = require("./toolbarVariablesContext");

// @ts-ignore
var ToolbarDivider = function ToolbarDivider(props) {
  var context = React.useContext(_reactFela.ThemeContext);

  var _useTelemetry = (0, _reactBindings.useTelemetry)(ToolbarDivider.displayName, context.telemetry),
      setStart = _useTelemetry.setStart,
      setEnd = _useTelemetry.setEnd;

  setStart();
  var accessibility = props.accessibility,
      className = props.className,
      design = props.design,
      styles = props.styles,
      variables = props.variables;
  var parentVariables = React.useContext(_toolbarVariablesContext.ToolbarVariablesContext);
  var getA11yProps = (0, _reactBindings.useAccessibility)(accessibility, {
    debugName: ToolbarDivider.displayName,
    rtl: context.rtl
  });

  var _useStyles = (0, _reactBindings.useStyles)(ToolbarDivider.displayName, {
    className: ToolbarDivider.className,
    mapPropsToInlineStyles: function mapPropsToInlineStyles() {
      return {
        className: className,
        design: design,
        styles: styles,
        variables: (0, _styles.mergeComponentVariables)(parentVariables, variables)
      };
    },
    rtl: context.rtl
  }),
      classes = _useStyles.classes;

  var ElementType = (0, _reactBindings.getElementType)(props);
  var unhandledProps = (0, _reactBindings.useUnhandledProps)(ToolbarDivider.handledProps, props);
  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {
    className: classes.root
  })));
  setEnd();
  return element;
};

ToolbarDivider.className = 'ui-toolbar__divider';
ToolbarDivider.displayName = 'ToolbarDivider';
ToolbarDivider.propTypes = _utils.commonPropTypes.createCommon();
ToolbarDivider.handledProps = Object.keys(ToolbarDivider.propTypes);
ToolbarDivider.create = (0, _utils.createShorthandFactory)({
  Component: ToolbarDivider,
  mappedProp: 'content'
});
/**
 * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.
 */

var _default = (0, _types.withSafeTypeForAs)(ToolbarDivider);

exports.default = _default;
//# sourceMappingURL=ToolbarDivider.js.map
