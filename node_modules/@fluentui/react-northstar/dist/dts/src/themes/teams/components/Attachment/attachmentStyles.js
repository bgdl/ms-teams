"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../../../../utils");
var SvgIcon_1 = require("../../../../components/SvgIcon/SvgIcon");
var getBorderFocusStyles_1 = require("../../getBorderFocusStyles");
var getIconFillOrOutlineStyles_1 = require("../../getIconFillOrOutlineStyles");
var Button_1 = require("../../../../components/Button/Button");
var attachmentStyles = {
    root: function (_a) {
        var _b, _c;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var borderFocusStyles = getBorderFocusStyles_1.default({
            variables: siteVariables,
            borderRadius: v.borderRadius,
        });
        return tslib_1.__assign(tslib_1.__assign({ position: 'relative', display: 'inline-flex', alignItems: 'center', width: '100%', maxWidth: utils_1.pxToRem(440), minHeight: utils_1.pxToRem(48), padding: v.padding, marginBottom: utils_1.pxToRem(2), marginRight: utils_1.pxToRem(2), background: v.backgroundColor, color: v.textColor, boxShadow: v.boxShadow, border: siteVariables.borderWidth + " solid " + v.borderColor, borderRadius: v.borderRadius }, borderFocusStyles), (p.actionable && {
            cursor: 'pointer',
            ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, borderFocusStyles[':focus-visible']), (_b = { backgroundColor: v.focusBackgroundColor, color: v.focusColor }, _b["& ." + Button_1.default.className] = {
                color: v.siblingsFocusColor,
            }, _b["& ." + SvgIcon_1.default.className] = {
                color: v.siblingsFocusColor,
            }, _b)),
            ':hover': (_c = {
                    background: v.backgroundColorHover,
                    color: v.textColorHover
                },
                _c["& ." + Button_1.default.className] = {
                    color: v.siblingsHoverColor,
                },
                _c["& ." + SvgIcon_1.default.className] = {
                    color: v.siblingsHoverColor,
                },
                _c),
        }));
    },
    content: function () { return ({
        flex: 1,
    }); },
    header: function (_a) {
        var v = _a.variables;
        return ({
            fontSize: v.headerFontSize,
            fontWeight: v.headerFontWeight,
            lineHeight: v.headerLineHeight,
        });
    },
    description: function (_a) {
        var v = _a.variables;
        return ({
            display: 'block',
            fontSize: v.descriptionFontSize,
            fontWeight: v.descriptionFontWeight,
            lineHeight: v.descriptionLineHeight,
        });
    },
    icon: function (_a) {
        var _b;
        var v = _a.variables;
        return (_b = {
                flex: '0 0 auto',
                height: v.iconSize,
                width: v.iconSize
            },
            _b["& ." + SvgIcon_1.default.className] = {
                height: '100%',
                width: '100%',
                '& svg': {
                    height: '100%',
                    width: '100%',
                },
            },
            _b.marginRight = v.iconSpace,
            _b);
    },
    action: function (_a) {
        var _b;
        var p = _a.props, v = _a.variables, siteVariables = _a.theme.siteVariables;
        var iconFilledStyles = getIconFillOrOutlineStyles_1.default({ outline: false });
        var borderFocusStyles = getBorderFocusStyles_1.default({
            variables: siteVariables,
            borderRadius: v.borderRadius,
        });
        return tslib_1.__assign(tslib_1.__assign((_b = {}, _b["& ." + SvgIcon_1.default.className] = {
            color: v.textColor,
        }, _b), getIconFillOrOutlineStyles_1.default({ outline: true })), { ':hover': tslib_1.__assign(tslib_1.__assign({}, iconFilledStyles), { background: 'transparent' }), ':focus': borderFocusStyles[':focus'], ':focus-visible': tslib_1.__assign(tslib_1.__assign({}, iconFilledStyles), borderFocusStyles[':focus-visible']) });
    },
    progress: function (_a) {
        var p = _a.props, v = _a.variables;
        return ({
            transition: 'width 0.2s',
            position: 'absolute',
            display: 'block',
            bottom: 0,
            left: 0,
            maxWidth: '100%',
            height: utils_1.pxToRem(v.progressHeight),
            background: v.progressColor,
        });
    },
};
exports.default = attachmentStyles;
