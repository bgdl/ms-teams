"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = require("classnames");
var _ = require("lodash");
var React = require("react");
var styles_1 = require("@fluentui/styles");
// It's only necessary to map props that don't use 'children' as value ('children' is the default)
var mappedProps = {
    iframe: 'src',
    img: 'src',
    input: 'type',
};
// ============================================================
// Factories
// ============================================================
/** A more robust React.createElement. It can create elements from primitive values. */
function createShorthand(_a) {
    var allowsJSX = _a.allowsJSX, Component = _a.Component, mappedProp = _a.mappedProp, mappedArrayProp = _a.mappedArrayProp, valueOrRenderCallback = _a.valueOrRenderCallback, _b = _a.options, options = _b === void 0 ? {} : _b;
    var valIsRenderFunction = typeof valueOrRenderCallback === 'function' && !React.isValidElement(valueOrRenderCallback);
    if (valIsRenderFunction) {
        if (process.env.NODE_ENV !== 'production') {
            // eslint-disable-next-line no-console
            console.warn([
                '@fluentui/react-northstar:',
                'The usage of render callback is deprecated and will be removed soon. Please use render props for shorthands instead.',
                'See: https://microsoft.github.io/fluent-ui-react/shorthand-props',
            ].join(' '));
        }
        return createShorthandFromRenderCallback({
            allowsJSX: allowsJSX,
            Component: Component,
            renderCallback: valueOrRenderCallback,
            mappedProp: mappedProp,
            mappedArrayProp: mappedArrayProp,
            options: options,
        });
    }
    return createShorthandFromValue({
        allowsJSX: allowsJSX,
        Component: Component,
        mappedProp: mappedProp,
        mappedArrayProp: mappedArrayProp,
        value: valueOrRenderCallback,
        options: options,
    });
}
exports.createShorthand = createShorthand;
function createShorthandFactory(_a) {
    var Component = _a.Component, mappedProp = _a.mappedProp, mappedArrayProp = _a.mappedArrayProp, allowsJSX = _a.allowsJSX;
    if (typeof Component !== 'function' && typeof Component !== 'string') {
        throw new Error('createShorthandFactory() Component must be a string or function.');
    }
    return function (val, options) {
        return createShorthand({
            Component: Component,
            mappedProp: mappedProp,
            mappedArrayProp: mappedArrayProp,
            allowsJSX: allowsJSX,
            valueOrRenderCallback: val,
            options: options,
        });
    };
}
exports.createShorthandFactory = createShorthandFactory;
// ============================================================
// Private Utils
// ============================================================
function createShorthandFromValue(_a) {
    var Component = _a.Component, mappedProp = _a.mappedProp, mappedArrayProp = _a.mappedArrayProp, value = _a.value, options = _a.options, _b = _a.allowsJSX, allowsJSX = _b === void 0 ? true : _b;
    if (typeof Component !== 'function' && typeof Component !== 'string') {
        throw new Error('createShorthand() Component must be a string or function.');
    }
    // short circuit noop values
    var valIsNoop = _.isNil(value) || typeof value === 'boolean';
    if (valIsNoop && !options.render)
        return null;
    var valIsPrimitive = typeof value === 'string' || typeof value === 'number';
    var valIsPropsObject = _.isPlainObject(value);
    var valIsArray = _.isArray(value);
    var valIsReactElement = React.isValidElement(value);
    // unhandled type warning
    if (process.env.NODE_ENV !== 'production') {
        var displayName = typeof Component === 'string' ? Component : Component.displayName;
        if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {
            /* eslint-disable-next-line no-console */
            console.error([
                "The shorthand prop for \"" + displayName + "\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.",
                ' Use null|undefined|boolean for none.',
                " Received: " + value,
            ].join(''));
        }
        if (!allowsJSX && valIsReactElement) {
            /* eslint-disable-next-line no-console */
            console.error([
                "The shorthand prop for \"" + displayName + "\" component was passed a JSX element but this slot only supports string|number|object|array.",
                ' Use null|undefined|boolean for none.',
                " Received: " + value,
            ].join(''));
        }
    }
    // ----------------------------------------
    // Build up props
    // ----------------------------------------
    var defaultProps = options.defaultProps ? options.defaultProps() : {};
    // User's props
    var usersProps = (valIsReactElement && {}) || (valIsPropsObject && value) || {};
    // Override props
    var overrideProps = typeof options.overrideProps === 'function'
        ? options.overrideProps(tslib_1.__assign(tslib_1.__assign({}, defaultProps), usersProps))
        : options.overrideProps || {};
    // Merge props
    var props = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultProps), usersProps), overrideProps);
    var mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as];
    // Map prop for primitive value
    if (valIsPrimitive || valIsReactElement) {
        props[mappedHTMLProps || mappedProp || 'children'] = value;
    }
    // Map prop for array value
    if (valIsArray) {
        props[mappedHTMLProps || mappedArrayProp || 'children'] = value;
    }
    // Merge className
    if (defaultProps.className || overrideProps.className || usersProps.className) {
        var mergedClassesNames = classnames_1.default(defaultProps.className, overrideProps.className, usersProps.className);
        props.className = _.uniq(mergedClassesNames.split(' ')).join(' ');
    }
    // Merge style
    if (defaultProps.style || overrideProps.style || usersProps.style) {
        props.style = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultProps.style), usersProps.style), overrideProps.style);
    }
    // Merge styles
    if (defaultProps.styles || overrideProps.styles || usersProps.styles) {
        props.styles = styles_1.mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);
    }
    // ----------------------------------------
    // Get key
    // ----------------------------------------
    var _c = options.generateKey, generateKey = _c === void 0 ? true : _c;
    // Use key or generate key
    if (generateKey && _.isNil(props.key)) {
        if (valIsPrimitive) {
            // use string/number shorthand values as the key
            props.key = value;
        }
        if (valIsReactElement) {
            // use the key from React Element
            var elementKey = value.key;
            // <div /> - key is not passed as will be `null`
            // <div key={null} /> - key is passed as `null` and will be stringified
            var isNullKey = elementKey === null;
            if (!isNullKey) {
                props.key = elementKey;
            }
        }
    }
    // Remove the kind prop from the props object
    delete props.kind;
    // ----------------------------------------
    // Create Element
    // ----------------------------------------
    var render = options.render;
    if (render) {
        return render(Component, props);
    }
    if (typeof props.children === 'function') {
        return props.children(Component, tslib_1.__assign(tslib_1.__assign({}, props), { children: undefined }));
    }
    if (!allowsJSX && valIsReactElement) {
        return null;
    }
    // Create ReactElements from built up props
    if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {
        return React.createElement(Component, props);
    }
    return null;
}
function createShorthandFromRenderCallback(_a) {
    var Component = _a.Component, renderCallback = _a.renderCallback, mappedProp = _a.mappedProp, mappedArrayProp = _a.mappedArrayProp, allowsJSX = _a.allowsJSX, options = _a.options;
    var render = function (shorthandValue, renderTree) {
        return createShorthandFromValue({
            Component: Component,
            mappedProp: mappedProp,
            mappedArrayProp: mappedArrayProp,
            allowsJSX: allowsJSX,
            value: shorthandValue,
            options: tslib_1.__assign(tslib_1.__assign({}, options), (renderTree && { render: renderTree })),
        });
    };
    return renderCallback(render);
}
