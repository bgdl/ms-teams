"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var utils_1 = require("../../utils");
var Image_1 = require("../Image/Image");
var Video_1 = require("../Video/Video");
var Box_1 = require("../Box/Box");
var types_1 = require("../../types");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var Embed = /** @class */ (function (_super) {
    tslib_1.__extends(Embed, _super);
    function Embed() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionHandlers = {
            performClick: function (event) { return _this.handleClick(event); },
        };
        _this.frameRef = React.createRef();
        _this.handleClick = function (e) {
            e.stopPropagation();
            e.preventDefault();
            var iframeNil = _.isNil(_this.props.iframe);
            var newActive = !_this.state.active;
            if (iframeNil || (!iframeNil && newActive)) {
                _this.setState({ active: newActive });
                _.invoke(_this.props, 'onActiveChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { active: newActive }));
            }
            _.invoke(_this.props, 'onClick', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { active: newActive }));
        };
        _this.handleFrameOverrides = function (predefinedProps) { return ({
            onLoad: function (e) {
                _.invoke(predefinedProps, 'onLoad', e);
                _this.setState({ iframeLoaded: true });
                _this.frameRef.current.contentWindow.focus();
            },
        }); };
        return _this;
    }
    Embed.prototype.getInitialAutoControlledState = function () {
        return { active: false, iframeLoaded: false };
    };
    Embed.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, unhandledProps = _a.unhandledProps, styles = _a.styles, variables = _a.variables;
        var _b = this.props, control = _b.control, iframe = _b.iframe, placeholder = _b.placeholder, video = _b.video;
        var _c = this.state, active = _c.active, iframeLoaded = _c.iframeLoaded;
        var placeholderElement = placeholder ? (React.createElement(Image_1.default, { src: placeholder, styles: styles.image, variables: { width: variables.width, height: variables.height } })) : null;
        var hasIframe = !_.isNil(iframe);
        var hasVideo = !_.isNil(video);
        var controlVisible = !active || hasVideo;
        var placeholderVisible = !active || (hasIframe && active && !iframeLoaded);
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onClick: this.handleClick }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
            active && (React.createElement(React.Fragment, null,
                Video_1.default.create(video, {
                    defaultProps: function () { return ({
                        autoPlay: true,
                        controls: false,
                        loop: true,
                        muted: true,
                        poster: placeholder,
                        styles: styles.video,
                        variables: {
                            width: variables.width,
                            height: variables.height,
                        },
                    }); },
                }),
                iframe && (React.createElement(react_component_ref_1.Ref, { innerRef: this.frameRef }, Box_1.default.create(iframe, {
                    defaultProps: function () { return ({
                        as: 'iframe',
                        styles: styles.iframe,
                    }); },
                    overrideProps: this.handleFrameOverrides,
                }))))),
            placeholderVisible && placeholderElement,
            controlVisible &&
                Box_1.default.create(control, {
                    defaultProps: function () { return ({
                        className: Embed.slotClassNames.control,
                        styles: styles.control,
                    }); },
                })));
    };
    Embed.className = 'ui-embed';
    Embed.displayName = 'Embed';
    Embed.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        children: false,
        content: false,
    })), { active: PropTypes.bool, defaultActive: PropTypes.bool, control: customPropTypes.itemShorthand, iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]), onActiveChange: PropTypes.func, onClick: PropTypes.func, placeholder: PropTypes.string, video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]) });
    Embed.defaultProps = {
        as: 'span',
        accessibility: accessibility_1.embedBehavior,
        control: {},
    };
    Embed.autoControlledProps = ['active'];
    Embed.slotClassNames = {
        control: Embed.className + "__control",
    };
    return Embed;
}(utils_1.AutoControlledComponent));
Embed.create = utils_1.createShorthandFactory({ Component: Embed });
/**
 * An Embed displays content from external websites, like a post from external social network.
 *
 * @accessibility
 * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its
 * accessibility section.
 */
exports.default = types_1.withSafeTypeForAs(Embed);
