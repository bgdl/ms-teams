"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var Button_1 = require("../Button/Button");
var Text_1 = require("../Text/Text");
var Attachment = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Attachment.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, action = props.action, actionable = props.actionable, className = props.className, description = props.description, design = props.design, disabled = props.disabled, header = props.header, icon = props.icon, onClick = props.onClick, progress = props.progress, styles = props.styles, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: Attachment.displayName,
        actionHandlers: {
            performClick: function (e) {
                if (e.currentTarget === e.target) {
                    e.stopPropagation();
                    handleClick(e);
                }
            },
        },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(Attachment.displayName, {
        className: Attachment.className,
        mapPropsToStyles: function () { return ({
            actionable: actionable || !!onClick,
            disabled: disabled,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Attachment.handledProps, props);
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign({ className: classes.root, onClick: handleClick }, unhandledProps))),
        Box_1.default.create(icon, {
            defaultProps: function () { return ({ styles: resolvedStyles.icon }); },
        }),
        (header || description) && (React.createElement("div", { className: classes.content },
            Text_1.default.create(header, {
                defaultProps: function () { return ({ styles: resolvedStyles.header }); },
            }),
            Text_1.default.create(description, {
                defaultProps: function () { return ({ styles: resolvedStyles.description }); },
            }))),
        Button_1.default.create(action, {
            defaultProps: function () { return ({
                iconOnly: true,
                text: true,
                styles: resolvedStyles.action,
                className: Attachment.slotClassNames.action,
            }); },
        }),
        !_.isNil(progress) && React.createElement("div", { className: classes.progress, style: { width: progress + "%" } })));
    setEnd();
    return element;
};
Attachment.create = utils_1.createShorthandFactory({ Component: Attachment, mappedProp: 'header' });
Attachment.slotClassNames = {
    action: Attachment.className + "__action",
};
Attachment.className = 'ui-attachment';
Attachment.displayName = 'Attachment';
Attachment.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: false,
})), { action: customPropTypes.itemShorthand, actionable: PropTypes.bool, description: customPropTypes.itemShorthand, header: customPropTypes.itemShorthand, icon: customPropTypes.shorthandAllowingChildren, progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) });
Attachment.defaultProps = {
    accessibility: accessibility_1.attachmentBehavior,
};
Attachment.handledProps = Object.keys(Attachment.propTypes);
/**
 * An Attachment represents a file or media attachment, which may contain some metadata or actions.
 */
exports.default = types_1.withSafeTypeForAs(Attachment);
