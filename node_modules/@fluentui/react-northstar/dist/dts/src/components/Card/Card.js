"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var types_1 = require("../../types");
var accessibility_1 = require("@fluentui/accessibility");
var CustomPropTypes = require("@fluentui/react-proptypes");
var utils_1 = require("../../utils");
var react_bindings_1 = require("@fluentui/react-bindings");
var PropTypes = require("prop-types");
var _ = require("lodash");
// @ts-ignore
var react_fela_1 = require("react-fela");
var CardHeader_1 = require("./CardHeader");
var CardBody_1 = require("./CardBody");
var CardPreview_1 = require("./CardPreview");
var CardFooter_1 = require("./CardFooter");
var CardTopControls_1 = require("./CardTopControls");
var CardColumn_1 = require("./CardColumn");
var Card = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Card.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var className = props.className, design = props.design, styles = props.styles, variables = props.variables, children = props.children, compact = props.compact, horizontal = props.horizontal, centered = props.centered, size = props.size, fluid = props.fluid;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(Card.handledProps, props);
    var getA11yProps = react_bindings_1.useAccessibility(props.accessibility, {
        debugName: Card.displayName,
        actionHandlers: {
            performClick: function (e) {
                handleClick(e);
            },
        },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(Card.displayName, {
        className: Card.className,
        mapPropsToStyles: function () { return ({
            centered: centered,
            horizontal: horizontal,
            compact: compact,
            size: size,
            fluid: fluid,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11yProps('root', tslib_1.__assign({ className: classes.root, onClick: handleClick }, unhandledProps))), children));
    setEnd();
    return element;
};
Card.displayName = 'Card';
Card.className = 'ui-card';
Card.slotClassNames = {
    header: Card.className + "__header",
    body: Card.className + "__body",
    footer: Card.className + "__footer",
    preview: Card.className + "__preview",
    topControls: Card.className + "__top-controls",
};
Card.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { onClick: PropTypes.func, compact: PropTypes.bool, horizontal: PropTypes.bool, centered: PropTypes.bool, size: CustomPropTypes.size, fluid: PropTypes.bool });
Card.defaultProps = {
    accessibility: accessibility_1.cardBehavior,
    size: 'medium',
};
Card.handledProps = Object.keys(Card.propTypes);
Card.Header = CardHeader_1.default;
Card.Body = CardBody_1.default;
Card.Footer = CardFooter_1.default;
Card.Preview = CardPreview_1.default;
Card.TopControls = CardTopControls_1.default;
Card.Column = CardColumn_1.default;
Card.create = utils_1.createShorthandFactory({ Component: Card });
/**
 * A Card is used to display data in sematically grouped way.
 */
exports.default = types_1.withSafeTypeForAs(Card);
