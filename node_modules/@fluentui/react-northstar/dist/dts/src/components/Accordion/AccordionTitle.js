"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Box_1 = require("../Box/Box");
var AccordionTitle = /** @class */ (function (_super) {
    tslib_1.__extends(AccordionTitle, _super);
    function AccordionTitle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionHandlers = {
            performClick: function (e) {
                e.preventDefault();
                _this.handleClick(e);
            },
        };
        _this.handleClick = function (e) {
            if (!_this.props.disabled) {
                _.invoke(_this.props, 'onClick', e, _this.props);
            }
        };
        _this.handleFocus = function (e) {
            e.stopPropagation();
            _.invoke(_this.props, 'onFocus', e, _this.props);
        };
        _this.handleWrapperOverrides = function (predefinedProps) { return ({
            onFocus: function (e) {
                _this.handleFocus(e);
                _.invoke(predefinedProps, 'onFocus', e, _this.props);
            },
            onClick: function (e) {
                _this.handleClick(e);
                _.invoke(predefinedProps, 'onClick', e, _this.props);
            },
        }); };
        return _this;
    }
    AccordionTitle.prototype.renderComponent = function (_a) {
        var _this = this;
        var ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps, styles = _a.styles, accessibility = _a.accessibility;
        var _b = this.props, contentRef = _b.contentRef, children = _b.children, content = _b.content, indicator = _b.indicator, contentWrapper = _b.contentWrapper;
        var contentWrapperElement = (React.createElement(react_component_ref_1.Ref, { innerRef: contentRef }, Box_1.default.create(contentWrapper, {
            defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({ className: AccordionTitle.slotClassNames.contentWrapper, styles: styles.contentWrapper }, accessibility.attributes.content), utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.content, unhandledProps))); },
            overrideProps: function (predefinedProps) { return (tslib_1.__assign({ children: (React.createElement(React.Fragment, null,
                    Box_1.default.create(indicator, {
                        defaultProps: function () { return ({
                            styles: styles.indicator,
                            accessibility: accessibility_1.indicatorBehavior,
                        }); },
                    }),
                    Box_1.default.create(content, {
                        defaultProps: function () { return ({
                            as: 'span',
                            styles: styles.content,
                        }); },
                    }))) }, _this.handleWrapperOverrides(predefinedProps))); },
        })));
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), utils_1.childrenExist(children) ? children : contentWrapperElement));
    };
    AccordionTitle.displayName = 'AccordionTitle';
    AccordionTitle.className = 'ui-accordion__title';
    AccordionTitle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: 'shorthand' })), { accordionContentId: PropTypes.string, active: PropTypes.bool, contentRef: customPropTypes.ref, contentWrapper: customPropTypes.wrapperShorthand, canBeCollapsed: PropTypes.bool, disabled: PropTypes.bool, index: PropTypes.number, onClick: PropTypes.func, indicator: customPropTypes.shorthandAllowingChildren });
    AccordionTitle.defaultProps = {
        accessibility: accessibility_1.accordionTitleBehavior,
        as: 'dt',
        contentRef: _.noop,
        indicator: {},
        contentWrapper: {},
    };
    return AccordionTitle;
}(utils_1.UIComponent));
AccordionTitle.create = utils_1.createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });
AccordionTitle.slotClassNames = {
    contentWrapper: AccordionTitle.className + "__content-wrapper",
};
/**
 * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.
 */
exports.default = types_1.withSafeTypeForAs(AccordionTitle);
