"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var Button_1 = require("./Button");
var ButtonGroup = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonGroup, _super);
    function ButtonGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getStyleForButtonIndex = function (styles, isFirst, isLast) {
            var resultStyles = {};
            if (isFirst) {
                resultStyles = styles.firstButton;
            }
            if (isLast) {
                resultStyles = tslib_1.__assign(tslib_1.__assign({}, resultStyles), styles.lastButton);
            }
            if (!isFirst && !isLast) {
                resultStyles = styles.middleButton;
            }
            return resultStyles;
        };
        return _this;
    }
    ButtonGroup.prototype.renderComponent = function (_a) {
        var _this = this;
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, buttons = _b.buttons, circular = _b.circular, content = _b.content;
        if (_.isNil(buttons)) {
            return (React.createElement(ElementType, tslib_1.__assign({}, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] }), unhandledProps, { className: classes.root }), utils_1.childrenExist(children) ? children : content));
        }
        return (React.createElement(ElementType, tslib_1.__assign({}, unhandledProps, { className: classes.root }), _.map(buttons, function (button, idx) {
            return Button_1.default.create(button, {
                defaultProps: function () { return ({
                    circular: circular,
                    styles: _this.getStyleForButtonIndex(styles, idx === 0, idx === buttons.length - 1),
                }); },
            });
        })));
    };
    ButtonGroup.displayName = 'ButtonGroup';
    ButtonGroup.className = 'ui-buttons';
    ButtonGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { buttons: customPropTypes.collectionShorthand, circular: PropTypes.bool });
    ButtonGroup.defaultProps = {
        as: 'div',
    };
    return ButtonGroup;
}(utils_1.UIComponent));
ButtonGroup.create = utils_1.createShorthandFactory({
    Component: ButtonGroup,
    mappedProp: 'content',
    mappedArrayProp: 'buttons',
});
/**
 * A ButtonGroup represents multiple related actions as a group.
 */
exports.default = types_1.withSafeTypeForAs(ButtonGroup);
