"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_bindings_1 = require("@fluentui/react-bindings");
var customPropTypes = require("@fluentui/react-proptypes");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var ButtonContent = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(ButtonContent.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var size = props.size, content = props.content, children = props.children, className = props.className, styles = props.styles, variables = props.variables, design = props.design;
    var classes = react_bindings_1.useStyles(ButtonContent.displayName, {
        className: ButtonContent.className,
        mapPropsToStyles: function () { return ({ size: size }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            styles: styles,
            variables: variables,
            design: design,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(ButtonContent.handledProps, props);
    var result = (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] }), { className: classes.root }, unhandledProps), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return result;
};
ButtonContent.displayName = 'ButtonContent';
ButtonContent.className = 'ui-button__content';
ButtonContent.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { size: customPropTypes.size });
ButtonContent.handledProps = Object.keys(ButtonContent.propTypes);
ButtonContent.create = utils_1.createShorthandFactory({
    Component: ButtonContent,
    mappedProp: 'content',
});
/**
 * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.
 */
exports.default = types_1.withSafeTypeForAs(ButtonContent);
