"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var utils_1 = require("../../utils");
var Box_1 = require("../Box/Box");
var Loader_1 = require("../Loader/Loader");
var types_1 = require("../../types");
var ButtonGroup_1 = require("./ButtonGroup");
var ButtonContent_1 = require("./ButtonContent");
var react_bindings_1 = require("@fluentui/react-bindings");
// @ts-ignore
var react_fela_1 = require("react-fela");
var Button = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(Button.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, 
    // @ts-ignore
    active = props.active, as = props.as, children = props.children, content = props.content, icon = props.icon, loader = props.loader, disabled = props.disabled, iconPosition = props.iconPosition, loading = props.loading, text = props.text, primary = props.primary, inverted = props.inverted, size = props.size, iconOnly = props.iconOnly, fluid = props.fluid, circular = props.circular, className = props.className, styles = props.styles, variables = props.variables, design = props.design;
    var hasChildren = utils_1.childrenExist(children);
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: Button.displayName,
        mapPropsToBehavior: function () { return ({
            as: as,
            active: active,
            disabled: disabled,
            loading: loading,
        }); },
        actionHandlers: {
            performClick: function (event) {
                event.preventDefault();
                handleClick(event);
            },
        },
        rtl: context.rtl,
    });
    var _b = react_bindings_1.useStyles(Button.displayName, {
        className: Button.className,
        mapPropsToStyles: function () { return ({
            text: text,
            primary: primary,
            disabled: disabled,
            circular: circular,
            size: size,
            loading: loading,
            inverted: inverted,
            iconOnly: iconOnly,
            iconPosition: iconPosition,
            fluid: fluid,
            hasContent: !!content,
        }); },
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }), classes = _b.classes, resolvedStyles = _b.styles;
    var unhandledProps = react_bindings_1.useUnhandledProps(Button.handledProps, props);
    var ElementType = react_bindings_1.getElementType(props);
    var renderIcon = function () {
        return Box_1.default.create(icon, {
            defaultProps: function () {
                return getA11Props('icon', {
                    styles: resolvedStyles.icon,
                });
            },
        });
    };
    var renderLoader = function () {
        return Loader_1.default.create(loader || {}, {
            defaultProps: function () {
                return getA11Props('loader', {
                    role: undefined,
                    styles: resolvedStyles.loader,
                });
            },
        });
    };
    var handleClick = function (e) {
        if (disabled) {
            e.preventDefault();
            return;
        }
        _.invoke(props, 'onClick', e, props);
    };
    var handleFocus = function (e) {
        _.invoke(props, 'onFocus', e, props);
    };
    var result = (React.createElement(ElementType, tslib_1.__assign({}, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), getA11Props('root', tslib_1.__assign({ onClick: handleClick, disabled: disabled, className: classes.root, onFocus: handleFocus }, unhandledProps))), hasChildren ? (children) : (React.createElement(React.Fragment, null,
        loading && renderLoader(),
        iconPosition !== 'after' && renderIcon(),
        ButtonContent_1.default.create(content, {
            defaultProps: function () { return getA11Props('content', { as: 'span', size: size, styles: resolvedStyles.content }); },
        }),
        iconPosition === 'after' && renderIcon()))));
    setEnd();
    return result;
};
Button.defaultProps = {
    as: 'button',
    accessibility: accessibility_1.buttonBehavior,
    size: 'medium',
};
Button.displayName = 'Button';
Button.className = 'ui-button';
Button.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
    content: 'shorthand',
})), { circular: PropTypes.bool, disabled: PropTypes.bool, fluid: PropTypes.bool, icon: customPropTypes.shorthandAllowingChildren, iconOnly: PropTypes.bool, iconPosition: PropTypes.oneOf(['before', 'after']), inverted: PropTypes.bool, loader: customPropTypes.itemShorthandWithoutJSX, loading: PropTypes.bool, onClick: PropTypes.func, onFocus: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), text: PropTypes.bool, secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), size: customPropTypes.size });
Button.handledProps = Object.keys(Button.propTypes);
Button.Group = ButtonGroup_1.default;
Button.Content = ButtonContent_1.default;
Button.create = utils_1.createShorthandFactory({ Component: Button, mappedProp: 'content' });
/**
 * A Button enables users to take an action, such as submitting a form, opening a dialog, etc.
 *
 * @accessibility
 * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(Button);
