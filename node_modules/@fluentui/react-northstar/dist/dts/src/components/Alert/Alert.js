"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Box_1 = require("../Box/Box");
var Text_1 = require("../Text/Text");
var ButtonGroup_1 = require("../Button/ButtonGroup");
var AlertDismissAction_1 = require("./AlertDismissAction");
var Alert = /** @class */ (function (_super) {
    tslib_1.__extends(Alert, _super);
    function Alert() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleDismissOverrides = function (predefinedProps) { return ({
            onClick: function (e, buttonProps) {
                _.invoke(predefinedProps, 'onClick', e, buttonProps);
                _.invoke(_this.props, 'onVisibleChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { visible: false }));
                _this.setState({ visible: false });
            },
        }); };
        _this.handleFocus = function (e) {
            _.invoke(_this.props, 'onFocus', e, _this.props);
        };
        _this.renderContent = function (_a) {
            var styles = _a.styles, accessibility = _a.accessibility;
            var _b = _this.props, actions = _b.actions, dismissible = _b.dismissible, dismissAction = _b.dismissAction, content = _b.content, icon = _b.icon, header = _b.header, body = _b.body, danger = _b.danger, warning = _b.warning, info = _b.info, success = _b.success, variables = _b.variables;
            var bodyContent = (React.createElement(React.Fragment, null,
                Text_1.default.create(header, {
                    defaultProps: function () { return (tslib_1.__assign({ className: Alert.slotClassNames.header, styles: styles.header }, accessibility.attributes.header)); },
                }),
                Box_1.default.create(content, {
                    defaultProps: function () { return (tslib_1.__assign({ className: Alert.slotClassNames.content, styles: styles.content }, accessibility.attributes.content)); },
                })));
            return (React.createElement(React.Fragment, null,
                Box_1.default.create(icon, {
                    defaultProps: function () { return ({
                        className: Alert.slotClassNames.icon,
                        styles: styles.icon,
                    }); },
                }),
                Box_1.default.create(body, {
                    defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({ id: _this.state.bodyId, className: Alert.slotClassNames.body }, accessibility.attributes.body), { styles: styles.body })); },
                    overrideProps: {
                        children: bodyContent,
                    },
                }),
                ButtonGroup_1.default.create(actions, {
                    defaultProps: function () { return ({
                        className: Alert.slotClassNames.actions,
                        styles: styles.actions,
                    }); },
                }),
                dismissible &&
                    AlertDismissAction_1.default.create(dismissAction, {
                        defaultProps: function () { return (tslib_1.__assign({ danger: danger,
                            warning: warning,
                            info: info,
                            success: success,
                            variables: variables }, accessibility.attributes.dismissAction)); },
                        overrideProps: _this.handleDismissOverrides,
                    })));
        };
        return _this;
    }
    Alert.prototype.getInitialAutoControlledState = function () {
        return {
            visible: true,
            bodyId: _.uniqueId('alert-body-'),
        };
    };
    Alert.prototype.renderComponent = function (config) {
        var accessibility = config.accessibility, classes = config.classes, ElementType = config.ElementType, unhandledProps = config.unhandledProps;
        var children = this.props.children;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onFocus: this.handleFocus }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), unhandledProps), utils_1.childrenExist(children) ? children : this.renderContent(config)));
    };
    Alert.displayName = 'Alert';
    Alert.className = 'ui-alert';
    Alert.slotClassNames = {
        content: Alert.className + "__content",
        actions: Alert.className + "__actions",
        icon: Alert.className + "__icon",
        header: Alert.className + "__header",
        body: Alert.className + "__body",
    };
    Alert.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({ content: 'shorthand' })), { actions: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]), icon: customPropTypes.shorthandAllowingChildren, header: customPropTypes.itemShorthand, attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]), fitted: PropTypes.bool, danger: PropTypes.bool, defaultVisible: PropTypes.bool, dismissible: PropTypes.bool, dismissAction: customPropTypes.itemShorthand, info: PropTypes.bool, onVisibleChange: PropTypes.func, onFocus: PropTypes.func, success: PropTypes.bool, visible: PropTypes.bool, warning: PropTypes.bool, body: customPropTypes.itemShorthand });
    Alert.defaultProps = {
        accessibility: accessibility_1.alertBehavior,
        dismissAction: {},
        body: {},
    };
    Alert.DismissAction = AlertDismissAction_1.default;
    Alert.autoControlledProps = ['visible'];
    return Alert;
}(utils_1.AutoControlledComponent));
/**
 * An Alert displays a brief, important message to attract a user's attention without interrupting their current task.
 *
 * @accessibility
 * Implements [ARIA Alert](https://www.w3.org/TR/wai-aria-practices-1.1/#alert) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(Alert);
