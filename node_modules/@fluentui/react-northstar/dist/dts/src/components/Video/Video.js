"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var PropTypes = require("prop-types");
var React = require("react");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Video = /** @class */ (function (_super) {
    tslib_1.__extends(Video, _super);
    function Video() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.videoRef = React.createRef();
        _this.setVideoAttributes = function () {
            // React doesn't guaranty that props will be set:
            // https://github.com/facebook/react/issues/10389
            if (_this.videoRef.current) {
                _this.videoRef.current.muted = !!_this.props.muted;
            }
        };
        return _this;
    }
    Video.prototype.componentDidMount = function () {
        this.setVideoAttributes();
    };
    Video.prototype.componentDidUpdate = function () {
        this.setVideoAttributes();
    };
    Video.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, unhandledProps = _a.unhandledProps;
        var _b = this.props, controls = _b.controls, autoPlay = _b.autoPlay, loop = _b.loop, poster = _b.poster, src = _b.src;
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.videoRef },
            React.createElement(ElementType, tslib_1.__assign({ autoPlay: autoPlay, className: classes.root, controls: controls, loop: loop, poster: poster, src: src }, accessibility.attributes.root, unhandledProps))));
    };
    Video.className = 'ui-video';
    Video.displayName = 'Video';
    Video.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        children: false,
        content: false,
    })), { autoPlay: PropTypes.bool, controls: PropTypes.bool, loop: PropTypes.bool, muted: PropTypes.bool, poster: PropTypes.string, src: PropTypes.string });
    Video.defaultProps = {
        as: 'video',
        controls: true,
        autoPlay: false,
        muted: false,
    };
    return Video;
}(utils_1.UIComponent));
Video.create = utils_1.createShorthandFactory({ Component: Video, mappedProp: 'src' });
/**
 * A Video provides ability to embed video content.
 */
exports.default = types_1.withSafeTypeForAs(Video);
