"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var accessibility_1 = require("@fluentui/accessibility");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Box_1 = require("../Box/Box");
var CarouselNavigationItem = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselNavigationItem, _super);
    function CarouselNavigationItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function (e) {
            _.invoke(_this.props, 'onClick', e, _this.props);
        };
        _this.handleBlur = function (e) {
            _.invoke(_this.props, 'onBlur', e, _this.props);
        };
        _this.handleFocus = function (e) {
            _.invoke(_this.props, 'onFocus', e, _this.props);
        };
        _this.actionHandlers = {
            performClick: function (event) { return !event.defaultPrevented && _this.handleClick(event); },
        };
        return _this;
    }
    CarouselNavigationItem.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, variables = _a.variables, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, content = _b.content, indicator = _b.indicator;
        return utils_1.childrenExist(children) ? (children) : (React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.handleClick }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), unhandledProps),
            Box_1.default.create(indicator, {
                defaultProps: function () { return ({
                    className: CarouselNavigationItem.slotClassNames.indicator,
                    styles: styles.indicator,
                }); },
            }),
            Box_1.default.create(content, {
                defaultProps: function () { return ({ as: 'span', styles: styles.content }); },
            })));
    };
    CarouselNavigationItem.displayName = 'CarouselNavigationItem';
    CarouselNavigationItem.className = 'ui-carousel__navigationitem';
    CarouselNavigationItem.slotClassNames = {
        indicator: CarouselNavigationItem.className + "__indicator",
    };
    CarouselNavigationItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, indicator: customPropTypes.shorthandAllowingChildren, iconOnly: PropTypes.bool, index: PropTypes.number, onClick: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), vertical: PropTypes.bool });
    CarouselNavigationItem.defaultProps = {
        accessibility: accessibility_1.tabBehavior,
        as: 'li',
        indicator: {},
    };
    return CarouselNavigationItem;
}(utils_1.UIComponent));
CarouselNavigationItem.create = utils_1.createShorthandFactory({
    Component: CarouselNavigationItem,
    mappedArrayProp: 'content',
});
/**
 * A CarouselItem is an actionable item within a Carousel.
 */
exports.default = types_1.withSafeTypeForAs(CarouselNavigationItem);
