"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var styles_1 = require("@fluentui/styles");
var PropTypes = require("prop-types");
var React = require("react");
var customPropTypes = require("@fluentui/react-proptypes");
var _ = require("lodash");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var CarouselNavigationItem_1 = require("./CarouselNavigationItem");
var CarouselNavigation = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselNavigation, _super);
    function CarouselNavigation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleItemOverrides = function (variables) { return function (predefinedProps) { return ({
            onClick: function (e, itemProps) {
                _.invoke(_this.props, 'onItemClick', e, itemProps);
                _.invoke(predefinedProps, 'onClick', e, itemProps);
            },
            variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
        }); }; };
        _this.renderItems = function (variables, accessibility) {
            var _a = _this.props, activeIndex = _a.activeIndex, iconOnly = _a.iconOnly, items = _a.items, primary = _a.primary, secondary = _a.secondary, vertical = _a.vertical;
            return _.map(items, function (item, index) {
                return CarouselNavigationItem_1.default.create(item, {
                    defaultProps: function () { return ({
                        active: index === activeIndex,
                        iconOnly: iconOnly,
                        index: index,
                        primary: primary,
                        secondary: secondary,
                        vertical: vertical,
                        accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,
                    }); },
                    overrideProps: _this.handleItemOverrides(variables),
                });
            });
        };
        return _this;
    }
    CarouselNavigation.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, variables = _a.variables, unhandledProps = _a.unhandledProps;
        var children = this.props.children;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, utils_1.rtlTextContainer.getAttributes({ forElements: [children] }), unhandledProps), utils_1.childrenExist(children) ? children : this.renderItems(variables, accessibility)));
    };
    CarouselNavigation.displayName = 'CarouselNavigation';
    CarouselNavigation.className = 'ui-carousel__navigation';
    CarouselNavigation.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { activeIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), iconOnly: PropTypes.bool, items: customPropTypes.collectionShorthand, onItemClick: PropTypes.func, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), vertical: PropTypes.bool });
    CarouselNavigation.defaultProps = {
        accessibility: accessibility_1.tabListBehavior,
        as: 'ul',
    };
    return CarouselNavigation;
}(utils_1.UIComponent));
CarouselNavigation.create = utils_1.createShorthandFactory({
    Component: CarouselNavigation,
    mappedArrayProp: 'items',
});
/**
 * A Carousel navigation helps switching between Carousel items.
 */
exports.default = types_1.withSafeTypeForAs(CarouselNavigation);
