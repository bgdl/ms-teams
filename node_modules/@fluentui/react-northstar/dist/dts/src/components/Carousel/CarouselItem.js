"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var PropTypes = require("prop-types");
var accessibility_1 = require("@fluentui/accessibility");
var utils_1 = require("../../utils");
var accessibilityStyles_1 = require("../../utils/accessibility/Styles/accessibilityStyles");
var types_1 = require("../../types");
var CarouselItem = /** @class */ (function (_super) {
    tslib_1.__extends(CarouselItem, _super);
    function CarouselItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.actionHandlers = {
            arrowKeysNavigationStopPropagation: function (e) {
                // let event propagate, when it was invoke on the element where arrow keys should rotate carousel
                if (e.currentTarget !== e.target) {
                    e.stopPropagation();
                }
            },
        };
        return _this;
    }
    CarouselItem.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, styles = _a.styles, accessibility = _a.accessibility, unhandledProps = _a.unhandledProps;
        var _b = this.props, children = _b.children, content = _b.content, itemPositionText = _b.itemPositionText;
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
            utils_1.childrenExist(children) ? children : content,
            React.createElement("div", { className: CarouselItem.slotClassNames.itemPositionText, style: accessibilityStyles_1.screenReaderContainerStyles }, itemPositionText)));
    };
    CarouselItem.displayName = 'CarouselItem';
    CarouselItem.className = 'ui-carousel__item';
    CarouselItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { active: PropTypes.bool, navigation: PropTypes.bool, itemPositionText: PropTypes.string });
    CarouselItem.defaultProps = {
        accessibility: accessibility_1.carouselItemBehavior,
    };
    CarouselItem.slotClassNames = {
        itemPositionText: CarouselItem.className + "__itemPositionText",
    };
    return CarouselItem;
}(utils_1.UIComponent));
CarouselItem.create = utils_1.createShorthandFactory({ Component: CarouselItem, mappedProp: 'content' });
/**
 * A Carousel displays data organised as a gallery.
 *
 * @accessibility
 * Implements [ARIA Carousel](https://www.w3.org/WAI/tutorials/carousels/structure/) design pattern.
 */
exports.default = types_1.withSafeTypeForAs(CarouselItem);
