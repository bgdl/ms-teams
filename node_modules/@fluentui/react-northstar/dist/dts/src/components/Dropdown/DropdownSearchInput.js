"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var React = require("react");
var PropTypes = require("prop-types");
var _ = require("lodash");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var Input_1 = require("../Input/Input");
var DropdownSearchInput = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownSearchInput, _super);
    function DropdownSearchInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleFocus = function (e) {
            _.invoke(_this.props, 'onFocus', e, _this.props);
        };
        _this.handleInputKeyDown = function (e) {
            _.invoke(_this.props, 'onInputKeyDown', e, _this.props);
        };
        _this.handleInputBlur = function (e) {
            _.invoke(_this.props, 'onInputBlur', e, _this.props);
        };
        _this.handleKeyUp = function (e) {
            _.invoke(_this.props, 'onKeyUp', e, _this.props);
        };
        return _this;
    }
    DropdownSearchInput.prototype.renderComponent = function (_a) {
        var unhandledProps = _a.unhandledProps, styles = _a.styles;
        var _b = this.props, accessibilityComboboxProps = _b.accessibilityComboboxProps, accessibilityInputProps = _b.accessibilityInputProps, inputRef = _b.inputRef, placeholder = _b.placeholder, disabled = _b.disabled;
        return (React.createElement(Input_1.default, tslib_1.__assign({ disabled: disabled, inputRef: inputRef, onFocus: this.handleFocus, onKeyUp: this.handleKeyUp }, unhandledProps, { wrapper: tslib_1.__assign(tslib_1.__assign({ className: DropdownSearchInput.slotClassNames.wrapper, styles: styles.root }, accessibilityComboboxProps), unhandledProps.wrapper), input: tslib_1.__assign(tslib_1.__assign({ type: 'text', className: DropdownSearchInput.slotClassNames.input, styles: styles.input, placeholder: placeholder, onBlur: this.handleInputBlur, onKeyDown: this.handleInputKeyDown }, accessibilityInputProps), unhandledProps.input) })));
    };
    DropdownSearchInput.displayName = 'DropdownSearchInput';
    DropdownSearchInput.className = 'ui-dropdown__searchinput';
    DropdownSearchInput.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        accessibility: false,
        children: false,
        content: false,
    })), { accessibilityInputProps: PropTypes.object, accessibilityComboboxProps: PropTypes.object, disabled: PropTypes.bool, inline: PropTypes.bool, inputRef: customPropTypes.ref, onFocus: PropTypes.func, onInputBlur: PropTypes.func, onInputKeyDown: PropTypes.func, onKeyUp: PropTypes.func, placeholder: PropTypes.string });
    return DropdownSearchInput;
}(utils_1.UIComponent));
DropdownSearchInput.slotClassNames = {
    input: DropdownSearchInput.className + "__input",
    wrapper: DropdownSearchInput.className + "__wrapper",
};
DropdownSearchInput.create = utils_1.createShorthandFactory({ Component: DropdownSearchInput });
/**
 * A DropdownSearchInput represents item of 'search' Dropdown.
 * Used to display the search input field.
 */
exports.default = types_1.withSafeTypeForAs(DropdownSearchInput);
