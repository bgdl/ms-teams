"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var customPropTypes = require("@fluentui/react-proptypes");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var PropTypes = require("prop-types");
var _ = require("lodash");
var React = require("react");
var TableCell_1 = require("./TableCell");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var accessibility_1 = require("@fluentui/accessibility");
var styles_1 = require("@fluentui/styles");
var handleVariablesOverrides = function (variables) { return function (predefinedProps) { return ({
    variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
}); }; };
var TableRow = /** @class */ (function (_super) {
    tslib_1.__extends(TableRow, _super);
    function TableRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowRef = React.createRef();
        _this.actionHandlers = {
            // https://github.com/microsoft/fluent-ui-react/issues/2150
            unsetRowTabbable: function (e) {
                _this.rowRef.current.setAttribute('tabindex', '-1');
            },
            performClick: function (e) {
                _this.handleClick(e);
            },
        };
        _this.handleClick = function (e) {
            if (e.currentTarget === e.target) {
                _.invoke(_this.props, 'onClick', e, _this.props);
                e.preventDefault();
            }
        };
        return _this;
    }
    TableRow.prototype.renderCells = function (accessibility, variables) {
        var items = this.props.items;
        var cellAccessibility = accessibility.childBehaviors ? accessibility.childBehaviors.cell : undefined;
        return _.map(items, function (item, index) {
            var cellProps = {
                accessibility: cellAccessibility,
            };
            var overrideProps = handleVariablesOverrides(variables);
            return TableCell_1.default.create(item, {
                defaultProps: function () { return cellProps; },
                overrideProps: overrideProps,
            });
        });
    };
    TableRow.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, variables = _a.variables, unhandledProps = _a.unhandledProps;
        var children = this.props.children;
        var hasChildren = utils_1.childrenExist(children);
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.rowRef },
            React.createElement(ElementType, tslib_1.__assign({ className: classes.root, onClick: this.handleClick }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
                hasChildren && children,
                !hasChildren && this.renderCells(accessibility, variables))));
    };
    TableRow.displayName = 'TableRow';
    TableRow.className = 'ui-table__row';
    TableRow.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { content: customPropTypes.every([
            customPropTypes.disallow(['children']),
            PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),
        ]), items: customPropTypes.collectionShorthand, header: PropTypes.bool, compact: PropTypes.bool, selected: PropTypes.bool });
    TableRow.defaultProps = {
        accessibility: accessibility_1.tableRowBehavior,
    };
    return TableRow;
}(utils_1.UIComponent));
TableRow.create = utils_1.createShorthandFactory({ Component: TableRow, mappedArrayProp: 'items' });
/**
 * Component represents a single row in a tabular structure
 */
exports.default = types_1.withSafeTypeForAs(TableRow);
