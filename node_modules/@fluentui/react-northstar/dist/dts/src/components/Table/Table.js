"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var _ = require("lodash");
var React = require("react");
var utils_1 = require("../../utils");
var styles_1 = require("@fluentui/styles");
var TableRow_1 = require("./TableRow");
var TableCell_1 = require("./TableCell");
var types_1 = require("../../types");
var handleVariablesOverrides = function (variables) { return function (predefinedProps) { return ({
    variables: styles_1.mergeComponentVariables(variables, predefinedProps.variables),
}); }; };
var Table = /** @class */ (function (_super) {
    tslib_1.__extends(Table, _super);
    function Table() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Table.prototype.renderRows = function (accessibility, variables) {
        var _a = this.props, rows = _a.rows, compact = _a.compact;
        return _.map(rows, function (row, index) {
            var props = {
                compact: compact,
                onClick: function (e, props) {
                    _.invoke(row, 'onClick', e, props);
                },
            };
            var overrideProps = handleVariablesOverrides(variables);
            return TableRow_1.default.create(row, {
                defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({}, props), { accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined })); },
                overrideProps: overrideProps,
            });
        });
    };
    Table.prototype.renderHeader = function (accessibility, variables) {
        var _a = this.props, header = _a.header, compact = _a.compact;
        if (!header) {
            return null;
        }
        var headerRowProps = {
            header: true,
            compact: compact,
            className: Table.slotClassNames.header,
        };
        var overrideProps = handleVariablesOverrides(variables);
        return TableRow_1.default.create(header, {
            defaultProps: function () { return (tslib_1.__assign(tslib_1.__assign({}, headerRowProps), { accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined })); },
            overrideProps: overrideProps,
        });
    };
    Table.prototype.renderComponent = function (_a) {
        var accessibility = _a.accessibility, ElementType = _a.ElementType, classes = _a.classes, variables = _a.variables, unhandledProps = _a.unhandledProps;
        var children = this.props.children;
        var hasChildren = utils_1.childrenExist(children);
        return (React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)),
            hasChildren && children,
            !hasChildren && this.renderHeader(accessibility, variables),
            !hasChildren && this.renderRows(accessibility, variables)));
    };
    Table.displayName = 'Table';
    Table.className = 'ui-table';
    Table.Cell = TableCell_1.default;
    Table.Row = TableRow_1.default;
    Table.slotClassNames = {
        header: Table.className + "__header",
    };
    Table.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { content: customPropTypes.every([
            customPropTypes.disallow(['children']),
            PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),
        ]), header: customPropTypes.itemShorthand, rows: customPropTypes.collectionShorthand, compact: PropTypes.bool });
    Table.defaultProps = {
        as: 'div',
        accessibility: accessibility_1.tableBehavior,
    };
    return Table;
}(utils_1.UIComponent));
/**
 * A Table is used to display data in tabular layout
 * * @accessibility
 * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.
 * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)
 * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:
 * \- editable content
 * \- multiple actionable elements
 * \- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.
 * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)
 * @accessibilityIssues
 * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)
 * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)
 * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)
 * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)
 * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)
 * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)
 * VoiceOver doesn't narrate aria-rowcount value in table or grid
 */
exports.default = types_1.withSafeTypeForAs(Table);
