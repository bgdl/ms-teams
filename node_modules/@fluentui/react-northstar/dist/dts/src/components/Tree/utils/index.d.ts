import * as React from 'react';
import { TreeItemProps } from '../TreeItem';
export declare const hasSubtree: (item: string | number | boolean | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | TreeItemProps | (TreeItemProps & import("../../../types").ObjectOf<any> & {
    children?: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | import("../../../types").ShorthandRenderProp<TreeItemProps>;
})) => boolean;
export declare const removeItemAtIndex: (items: any[], itemIndex: number) => any[];
/**
 * Looks for the item inside the nested items array and returns its siblings.
 * @param {any[]} items The nested items array.
 * @param {string} itemId The id of the item to return the children of.
 * @returns {any[]} The item siblings
 */
export declare const getSiblings: (items: any[], itemId: string) => any[];
export interface TreeRenderContextValue {
    onFocusFirstChild: (itemId: string) => void;
    onFocusParent: (itemId: string) => void;
    onSiblingsExpand: (e: React.SyntheticEvent, itemProps: TreeItemProps) => void;
    onTitleClick: (e: React.SyntheticEvent, itemProps: TreeItemProps) => void;
}
export declare const TreeContext: React.Context<TreeRenderContextValue>;
