"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var react_bindings_1 = require("@fluentui/react-bindings");
var _ = require("lodash");
var PropTypes = require("prop-types");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var utils_1 = require("../../utils");
var types_1 = require("../../types");
var TreeTitle = function (props) {
    var context = React.useContext(react_fela_1.ThemeContext);
    var _a = react_bindings_1.useTelemetry(TreeTitle.displayName, context.telemetry), setStart = _a.setStart, setEnd = _a.setEnd;
    setStart();
    var accessibility = props.accessibility, children = props.children, className = props.className, content = props.content, design = props.design, hasSubtree = props.hasSubtree, level = props.level, index = props.index, styles = props.styles, treeSize = props.treeSize, variables = props.variables;
    var getA11Props = react_bindings_1.useAccessibility(accessibility, {
        debugName: TreeTitle.displayName,
        actionHandlers: {
            performClick: function (e) {
                e.preventDefault();
                handleClick(e);
            },
        },
        mapPropsToBehavior: function () { return ({
            hasSubtree: hasSubtree,
            level: level,
            index: index,
            treeSize: treeSize,
        }); },
        rtl: context.rtl,
    });
    var classes = react_bindings_1.useStyles(TreeTitle.displayName, {
        className: TreeTitle.className,
        mapPropsToInlineStyles: function () { return ({
            className: className,
            design: design,
            styles: styles,
            variables: variables,
        }); },
        rtl: context.rtl,
    }).classes;
    var ElementType = react_bindings_1.getElementType(props);
    var unhandledProps = react_bindings_1.useUnhandledProps(TreeTitle.handledProps, props);
    var handleClick = function (e) {
        _.invoke(props, 'onClick', e, props);
    };
    var element = (React.createElement(ElementType, tslib_1.__assign({}, getA11Props('root', tslib_1.__assign(tslib_1.__assign({ className: classes.root, onClick: handleClick }, utils_1.rtlTextContainer.getAttributes({ forElements: [children, content] })), unhandledProps))), utils_1.childrenExist(children) ? children : content));
    setEnd();
    return element;
};
TreeTitle.className = 'ui-tree__title';
TreeTitle.displayName = 'TreeTitle';
TreeTitle.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon()), { hasSubtree: PropTypes.bool, index: PropTypes.number, level: PropTypes.number, onClick: PropTypes.func, expanded: PropTypes.bool, treeSize: PropTypes.number });
TreeTitle.defaultProps = {
    as: 'a',
    accessibility: accessibility_1.treeTitleBehavior,
};
TreeTitle.handledProps = Object.keys(TreeTitle.propTypes);
TreeTitle.create = utils_1.createShorthandFactory({
    Component: TreeTitle,
    mappedProp: 'content',
});
/**
 * A TreeTitle renders a title of TreeItem.
 */
exports.default = types_1.withSafeTypeForAs(TreeTitle);
