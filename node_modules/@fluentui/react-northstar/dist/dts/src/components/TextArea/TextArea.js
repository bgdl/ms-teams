"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var types_1 = require("../../types");
var _ = require("lodash");
var React = require("react");
var PropTypes = require("prop-types");
var utils_1 = require("../../utils");
var TextArea = /** @class */ (function (_super) {
    tslib_1.__extends(TextArea, _super);
    function TextArea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleChange = function (e) {
            var value = _.get(e, 'target.value');
            _.invoke(_this.props, 'onChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { value: value }));
            _this.setState({ value: value });
        };
        return _this;
    }
    TextArea.prototype.renderComponent = function (_a) {
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, variables = _a.variables, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var disabled = this.props.disabled;
        var _b = this.state.value, value = _b === void 0 ? '' : _b;
        return (React.createElement(ElementType, tslib_1.__assign({ value: value, className: classes.root, onChange: this.handleChange, disabled: disabled }, accessibility.attributes.root, unhandledProps, utils_1.applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps))));
    };
    TextArea.className = 'ui-textarea';
    TextArea.displayName = 'TextArea';
    TextArea.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { defaultValue: PropTypes.string, onChange: PropTypes.func, value: PropTypes.string, disabled: PropTypes.bool });
    TextArea.defaultProps = {
        as: 'textarea',
        accessibility: accessibility_1.textAreaBehavior,
    };
    TextArea.autoControlledProps = ['value'];
    return TextArea;
}(utils_1.AutoControlledComponent));
/**
 * A TextArea is a multi-line plan-text editing control.
 *
 * @accessibility
 * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.
 * When using maxlength attribute, provide the information about max length in label for screen reader.
 * @accessibilityIssues
 * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)
 * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)
 */
exports.default = types_1.withSafeTypeForAs(TextArea);
