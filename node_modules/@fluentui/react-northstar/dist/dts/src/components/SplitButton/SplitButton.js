"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var accessibility_1 = require("@fluentui/accessibility");
var customPropTypes = require("@fluentui/react-proptypes");
var PropTypes = require("prop-types");
var React = require("react");
var _ = require("lodash");
var positioner_1 = require("../../utils/positioner");
var types_1 = require("../../types");
var utils_1 = require("../../utils");
var SplitButtonToggle_1 = require("./SplitButtonToggle");
var Button_1 = require("../Button/Button");
var MenuButton_1 = require("../MenuButton/MenuButton");
var react_component_ref_1 = require("@fluentui/react-component-ref");
var SplitButton = /** @class */ (function (_super) {
    tslib_1.__extends(SplitButton, _super);
    function SplitButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.targetRef = React.createRef();
        _this.handleMenuButtonOverrides = function (predefinedProps) { return ({
            onMenuItemClick: function (e, menuItemProps) {
                _this.setState({ open: false });
                _.invoke(_this.props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { open: false }));
                _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);
                _.invoke(_this.props, 'onMenuItemClick', e, menuItemProps);
            },
            onOpenChange: function (e, popupProps) {
                e.stopPropagation();
                _this.setState({ open: popupProps.open });
                _.invoke(_this.props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { open: popupProps.open }));
            },
        }); };
        _this.handleMenuButtonTriggerOverrides = function (predefinedProps) { return ({
            onClick: function (e, buttonProps) {
                _.invoke(predefinedProps, 'onClick', e, buttonProps);
                _.invoke(_this.props, 'onMainButtonClick', e, buttonProps);
            },
            onFocus: function (e, buttonProps) {
                _.invoke(predefinedProps, 'onFocus', e, buttonProps);
                _this.setState({ isFromKeyboard: utils_1.isFromKeyboard() });
            },
        }); };
        return _this;
    }
    SplitButton.prototype.getInitialAutoControlledState = function () {
        return {
            isFromKeyboard: false,
            open: false,
        };
    };
    SplitButton.prototype.renderComponent = function (_a) {
        var _this = this;
        var ElementType = _a.ElementType, classes = _a.classes, accessibility = _a.accessibility, styles = _a.styles, unhandledProps = _a.unhandledProps;
        var _b = this.props, button = _b.button, disabled = _b.disabled, menu = _b.menu, primary = _b.primary, secondary = _b.secondary, toggleButton = _b.toggleButton, size = _b.size, position = _b.position, align = _b.align, flipBoundary = _b.flipBoundary, overflowBoundary = _b.overflowBoundary, positionFixed = _b.positionFixed, offset = _b.offset, unstable_pinned = _b.unstable_pinned;
        var trigger = Button_1.default.create(button, {
            defaultProps: function () { return ({
                styles: styles.menuButton,
                primary: primary,
                secondary: secondary,
                disabled: disabled,
            }); },
            overrideProps: this.handleMenuButtonTriggerOverrides,
        });
        return (React.createElement(react_component_ref_1.Ref, { innerRef: this.targetRef },
            React.createElement(ElementType, tslib_1.__assign({ className: classes.root }, accessibility.attributes.root, unhandledProps),
                MenuButton_1.default.create({}, {
                    defaultProps: function () { return ({
                        accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,
                        menu: menu,
                        // Opening is handled manually.
                        on: [],
                        open: _this.state.open,
                        trigger: trigger,
                        target: _this.targetRef.current,
                        position: position,
                        align: align,
                        flipBoundary: flipBoundary,
                        overflowBoundary: overflowBoundary,
                        positionFixed: positionFixed,
                        offset: offset,
                        unstable_pinned: unstable_pinned,
                    }); },
                    overrideProps: this.handleMenuButtonOverrides,
                }),
                SplitButtonToggle_1.default.create(toggleButton, {
                    defaultProps: function () { return (tslib_1.__assign({ disabled: disabled,
                        primary: primary,
                        secondary: secondary,
                        size: size }, accessibility.attributes.toggleButton)); },
                    overrideProps: function (predefinedProps) { return ({
                        onClick: function (e, buttonProps) {
                            _.invoke(predefinedProps, 'onClick', e, buttonProps);
                            _this.setState(function (state) {
                                var open = !state.open;
                                _.invoke(_this.props, 'onOpenChange', e, tslib_1.__assign(tslib_1.__assign({}, _this.props), { open: open }));
                                return { open: open };
                            });
                        },
                    }); },
                }))));
    };
    SplitButton.displayName = 'SplitButton';
    SplitButton.Toggle = SplitButtonToggle_1.default;
    SplitButton.className = 'ui-splitbutton';
    SplitButton.propTypes = tslib_1.__assign(tslib_1.__assign({}, utils_1.commonPropTypes.createCommon({
        content: false,
    })), { button: customPropTypes.itemShorthand, defaultOpen: PropTypes.bool, menu: PropTypes.oneOfType([
            customPropTypes.itemShorthand,
            PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),
        ]), onMainButtonClick: PropTypes.func, onMenuItemClick: PropTypes.func, onOpenChange: PropTypes.func, open: PropTypes.bool, size: customPropTypes.size, primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]), secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]), toggleButton: customPropTypes.itemShorthand, position: PropTypes.oneOf(positioner_1.POSITIONS), align: PropTypes.oneOf(positioner_1.ALIGNMENTS), flipBoundary: PropTypes.oneOfType([
            PropTypes.object,
            PropTypes.oneOf(['scrollParent', 'window', 'viewport']),
        ]), overflowBoundary: PropTypes.oneOfType([
            PropTypes.object,
            PropTypes.oneOf(['scrollParent', 'window', 'viewport']),
        ]), positionFixed: PropTypes.bool, offset: PropTypes.string, unstable_pinned: PropTypes.bool });
    SplitButton.defaultProps = {
        accessibility: accessibility_1.splitButtonBehavior,
        toggleButton: {},
        position: 'below',
        align: 'start',
    };
    SplitButton.autoControlledProps = ['open'];
    return SplitButton;
}(utils_1.AutoControlledComponent));
/**
 * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.
 */
exports.default = types_1.withSafeTypeForAs(SplitButton);
