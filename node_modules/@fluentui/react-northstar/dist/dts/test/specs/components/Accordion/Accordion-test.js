"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var keyboardKey = require("keyboard-key");
var Accordion_1 = require("src/components/Accordion/Accordion");
var commonTests_1 = require("test/specs/commonTests");
var utils_1 = require("test/utils");
var AccordionTitle_1 = require("src/components/Accordion/AccordionTitle");
var panels = [
    {
        key: 'one',
        title: 'One',
        content: '2 3 4',
    },
    {
        key: 'two',
        title: 'Five',
        content: '6 7 8 9',
    },
    {
        key: 'three',
        title: "What's next?",
        content: '10',
    },
];
var getTitleButtonAtIndex = function (wrapper, index) {
    return wrapper
        .find("." + AccordionTitle_1.default.slotClassNames.contentWrapper)
        .filterWhere(function (n) { return typeof n.type() === 'string'; })
        .at(index);
};
describe('Accordion', function () {
    commonTests_1.isConformant(Accordion_1.default, { autoControlledProps: ['activeIndex'] });
    describe('activeIndex', function () {
        it('is -1 by default in an exclusive accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.default, React.createElement(Accordion_1.default, { panels: panels, exclusive: true }));
            expect(accordion.state('activeIndex')).toBe(-1);
        });
        it('is [-1] by default in an non-exclusive accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.default, React.createElement(Accordion_1.default, { panels: panels }));
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining([-1]));
        });
        it('is 0 by default in an exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.default, React.createElement(Accordion_1.default, { panels: panels, exclusive: true, expanded: true }));
            expect(accordion.state('activeIndex')).toBe(0);
        });
        it('is [0] by default in an non-exclusive expanded accordion', function () {
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.default, React.createElement(Accordion_1.default, { panels: panels, expanded: true }));
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining([0]));
        });
        it('is the value of prop defaultActiveIndex is passed', function () {
            var defaultActiveIndex = [1, 2];
            var accordion = utils_1.mountWithProviderAndGetComponent(Accordion_1.default, React.createElement(Accordion_1.default, { panels: panels, defaultActiveIndex: defaultActiveIndex }));
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining(defaultActiveIndex));
        });
        it('contains the indexes clicked by the user if the panels were closed', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining([0, 2]));
        });
        it('contains the only one index clicked by the user if exclusive prop is passed', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels, exclusive: true }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            expect(accordion.state('activeIndex')).toEqual(0);
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            expect(accordion.state('activeIndex')).toEqual(2);
        });
        it('has indexes removed when their panels are closed by the user', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels, defaultActiveIndex: [0, 1, 2] }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining([1]));
        });
        it('keeps the at least one panel open if expanded prop is passed', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels, defaultActiveIndex: [0], expanded: true }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            expect(accordion.state('activeIndex')).toEqual(expect.arrayContaining([0]));
        });
    });
    describe('focusedIndex', function () {
        it('is set at title click', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            expect(accordion.state('focusedIndex')).toEqual(1);
        });
        it('is changed by arrow key navigation', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 1).simulate('click');
            getTitleButtonAtIndex(wrapper, 1).simulate('keydown', {
                keyCode: keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(accordion.state('focusedIndex')).toEqual(0);
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(accordion.state('focusedIndex')).toEqual(1);
        });
        it('is changed by arrow key navigation in a circular way', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: keyboardKey.ArrowUp,
                key: 'ArrowUp',
            });
            expect(accordion.state('focusedIndex')).toEqual(panels.length - 1);
            getTitleButtonAtIndex(wrapper, panels.length - 1).simulate('keydown', {
                keyCode: keyboardKey.ArrowDown,
                key: 'ArrowDown',
            });
            expect(accordion.state('focusedIndex')).toEqual(0);
        });
        it('is changed to `0` at Home keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 2).simulate('click');
            getTitleButtonAtIndex(wrapper, 2).simulate('keydown', {
                keyCode: keyboardKey.Home,
                key: 'Home',
            });
            expect(accordion.state('focusedIndex')).toEqual(0);
        });
        it('is changed to last index at End keydown', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var accordion = wrapper.find(Accordion_1.default);
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            getTitleButtonAtIndex(wrapper, 0).simulate('keydown', {
                keyCode: keyboardKey.End,
                key: 'End',
            });
            expect(accordion.state('focusedIndex')).toEqual(panels.length - 1);
        });
        it('focuses the button element when is changed via focus handler', function () {
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels }));
            var title = getTitleButtonAtIndex(wrapper, 1);
            title.simulate('click');
            title.simulate('keydown', { keyCode: keyboardKey.ArrowUp, key: 'ArrowUp' });
            expect(document.activeElement).toEqual(getTitleButtonAtIndex(wrapper, 0).getDOMNode());
        });
    });
    describe('panels', function () {
        it('when clicked call onClick and onTitleClick if provided by the user', function () {
            var onTitleClick = jest.fn();
            var panels = [
                {
                    key: 'one',
                    title: 'One',
                    content: '2 3 4',
                },
            ];
            var wrapper = utils_1.mountWithProvider(React.createElement(Accordion_1.default, { panels: panels, onTitleClick: onTitleClick }));
            getTitleButtonAtIndex(wrapper, 0).simulate('click');
            expect(onTitleClick).toBeCalledTimes(1);
        });
    });
    describe('accessibility', function () {
        commonTests_1.handlesAccessibility(Accordion_1.default, { defaultRootRole: 'presentation' });
    });
});
