"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var styles_1 = require("@fluentui/styles");
var React = require("react");
var _ = require("lodash");
var enzyme_1 = require("enzyme");
var utils_1 = require("src/utils");
var utils_2 = require("test/utils");
/**
 * Returns the result of a shorthand factory.
 */
var getShorthand = function (_a) {
    var _b = _a.Component, Component = _b === void 0 ? 'div' : _b, defaultProps = _a.defaultProps, _c = _a.mappedProp, mappedProp = _c === void 0 ? '' : _c, _d = _a.mappedArrayProp, mappedArrayProp = _d === void 0 ? '' : _d, overrideProps = _a.overrideProps, generateKey = _a.generateKey, valueOrRenderCallback = _a.valueOrRenderCallback, render = _a.render;
    return utils_1.createShorthand({
        Component: Component,
        mappedProp: mappedProp,
        mappedArrayProp: mappedArrayProp,
        valueOrRenderCallback: valueOrRenderCallback,
        options: {
            defaultProps: defaultProps,
            overrideProps: overrideProps,
            generateKey: generateKey,
            render: render,
        },
    });
};
var isValuePrimitive = function (value) {
    return typeof value === 'string' || typeof value === 'number' || React.isValidElement(value);
};
var testCreateShorthand = function (shorthandArgs, expectedResult) {
    return expect(enzyme_1.shallow(getShorthand(shorthandArgs)).props()).toEqual(expectedResult);
};
// ----------------------------------------
// Common tests
// ----------------------------------------
var itReturnsNull = function (valueOrRenderCallback) {
    test('returns null', function () {
        utils_2.consoleUtil.disableOnce();
        expect(getShorthand({ valueOrRenderCallback: valueOrRenderCallback })).toBe(null);
    });
};
var itReturnsNullGivenDefaultProps = function (valueOrRenderCallback) {
    test('returns null given defaultProps object', function () {
        utils_2.consoleUtil.disableOnce();
        expect(getShorthand({ valueOrRenderCallback: valueOrRenderCallback, defaultProps: function () { return ({ 'data-foo': 'foo' }); } })).toBe(null);
    });
};
var itReturnsAValidElement = function (valueOrRenderCallback) {
    test('returns a valid element', function () {
        expect(React.isValidElement(getShorthand({ valueOrRenderCallback: valueOrRenderCallback }))).toBe(true);
    });
};
var itAppliesDefaultProps = function (valueOrRenderCallback) {
    test('applies defaultProps', function () {
        var defaultPropsValue = { some: 'defaults' };
        var expectedResult = isValuePrimitive(valueOrRenderCallback)
            ? tslib_1.__assign(tslib_1.__assign({}, defaultPropsValue), { children: valueOrRenderCallback }) : defaultPropsValue;
        testCreateShorthand({ valueOrRenderCallback: valueOrRenderCallback, defaultProps: function () { return defaultPropsValue; } }, expectedResult);
    });
};
var itDoesNotIncludePropsFromMappedProp = function (valueOrRenderCallback) {
    test('does not include props from mappedProp', function () {
        var mappedProp = 'data-foo';
        var wrapper = enzyme_1.shallow(getShorthand({ valueOrRenderCallback: valueOrRenderCallback, mappedProp: mappedProp }));
        expect(wrapper.prop(mappedProp)).not.toBeDefined();
    });
};
var itMergesClassNames = function (classNameSource, extraClassName, shorthandConfig) {
    test("merges defaultProps className and " + classNameSource + " className", function () {
        var defaultProps = function () { return ({ className: 'default' }); };
        var overrideProps = { className: 'override' };
        var expectedClassNames = 'default override';
        if (!isValuePrimitive(shorthandConfig.valueOrRenderCallback)) {
            expectedClassNames += " " + extraClassName;
        }
        expect(enzyme_1.shallow(getShorthand(tslib_1.__assign({ defaultProps: defaultProps, overrideProps: overrideProps }, shorthandConfig))).hasClass(expectedClassNames)).toBe(true);
    });
};
var itAppliesProps = function (propsSource, expectedProps, shorthandConfig) {
    test("applies props from the " + propsSource + " props", function () {
        testCreateShorthand(shorthandConfig, expectedProps);
    });
};
var itOverridesDefaultProps = function (propsSource, defaultProps, expectedProps, shorthandConfig) {
    test("overrides defaultProps with " + propsSource + " props", function () {
        testCreateShorthand(tslib_1.__assign({ defaultProps: defaultProps }, shorthandConfig), expectedProps);
    });
};
var mappedProps = {
    iframe: 'src',
    img: 'src',
    input: 'type',
};
var itOverridesDefaultPropsWithFalseyProps = function (propsSource, shorthandConfig) {
    test("overrides defaultProps with falsey " + propsSource + " props", function () {
        var defaultProps = function () { return ({ undef: '-', nil: '-', zero: '-', empty: '-' }); };
        var expectedProps = { undef: undefined, nil: null, zero: 0, empty: '' };
        testCreateShorthand(tslib_1.__assign({ defaultProps: defaultProps }, shorthandConfig), expectedProps);
    });
};
// ----------------------------------------
// Assertions
// ----------------------------------------
describe('factories', function () {
    describe('createShorthandFactory', function () {
        test('is a function', function () {
            expect(typeof utils_1.createShorthandFactory).toBe('function');
        });
        test('does not throw if passed a function Component', function () {
            var goodUsage = function () {
                // @ts-ignore
                return utils_1.createShorthandFactory({ Component: function () { return React.createElement("div", null); }, mappedProp: 'children' });
            };
            expect(goodUsage).not.toThrowError();
        });
        test('does not throw if passed a string Component', function () {
            var goodUsage = function () { return utils_1.createShorthandFactory({ Component: 'div', mappedProp: 'className' }); };
            expect(goodUsage).not.toThrowError();
        });
        test('does not throw if do not passed `mappedProp`', function () {
            var goodUsage = function () { return utils_1.createShorthandFactory({ Component: function () { return React.createElement("div", null); } }); };
            expect(goodUsage).not.toThrowError();
        });
        test('throw if passed Component that is not a string nor function', function () {
            utils_2.consoleUtil.disableOnce();
            var badComponents = [undefined, null, true, false, [], {}, 123];
            _.each(badComponents, function (badComponent) {
                var badUsage = function () { return utils_1.createShorthandFactory({ Component: badComponent, mappedProp: '' }); };
                expect(badUsage).toThrowError();
            });
        });
    });
    describe('createShorthand', function () {
        test('is a function', function () {
            expect(typeof utils_1.createShorthand).toBe('function');
        });
        test('does not throw if passed a function Component', function () {
            var goodUsage = function () { return utils_1.createShorthand({ Component: function () { return React.createElement("div", null); }, mappedProp: '' }); };
            expect(goodUsage).not.toThrowError();
        });
        test('does not throw if passed a string Component', function () {
            var goodUsage = function () { return utils_1.createShorthand({ Component: 'div', mappedProp: '' }); };
            expect(goodUsage).not.toThrowError();
        });
        test('throw if passed Component that is not a string nor function', function () {
            utils_2.consoleUtil.disableOnce();
            var badComponents = [undefined, null, true, false, [], {}, 123];
            _.each(badComponents, function (badComponent) {
                var badUsage = function () { return utils_1.createShorthand({ Component: badComponent, mappedProp: '' }); };
                expect(badUsage).toThrowError();
            });
        });
        describe('render callback', function () {
            test('returns the same React element as if shorthand value would be passed directly', function () {
                var createShorthandElement = function (valueOrRenderCallback) {
                    return getShorthand({
                        valueOrRenderCallback: valueOrRenderCallback,
                        Component: 'div',
                        defaultProps: function () { return ({
                            baz: 'original',
                        }); },
                        overrideProps: {
                            baz: 'overriden',
                        },
                    });
                };
                var shorthandValue = { dataFoo: 'bar' };
                // render callback is deprecated an throws deprecation warnings
                utils_2.consoleUtil.disableOnce();
                var elementFromShorthandValue = createShorthandElement(shorthandValue);
                var elementFromRenderCallback = createShorthandElement(function (render) { return render(shorthandValue); });
                expect(elementFromShorthandValue.type).toEqual(elementFromRenderCallback.type);
                expect(elementFromShorthandValue.props).toEqual(elementFromRenderCallback.props);
            });
            describe('custom tree renderer', function () {
                test('passes evaluated Component type as the first argument', function () {
                    // render callback is deprecated an throws deprecation warnings
                    utils_2.consoleUtil.disableOnce();
                    getShorthand({
                        valueOrRenderCallback: function (render) {
                            return render({}, function (Component, props) {
                                expect(Component).toBe('span');
                            });
                        },
                        Component: 'span',
                    });
                });
                test('passes evaluated props as the second argument', function () {
                    var shorthandProps = { bar: 'foo' };
                    // render callback is deprecated an throws deprecation warnings
                    utils_2.consoleUtil.disableOnce();
                    getShorthand({
                        valueOrRenderCallback: function (render) {
                            return render(shorthandProps, function (Component, props) {
                                expect(props.bar).toBe(shorthandProps.bar);
                            });
                        },
                    });
                });
                test('overrides render prop from shorthand options', function () {
                    var CustomComponent = 'overriden-div';
                    // render callback is deprecated an throws deprecation warnings
                    utils_2.consoleUtil.disableOnce();
                    var shorthandElement = getShorthand({
                        valueOrRenderCallback: function (render) { return render({}, function (Component, props) { return React.createElement(CustomComponent, null); }); },
                        render: function (Component, props) { return React.createElement("div", null, "Default"); },
                    });
                    expect(shorthandElement.type).toBe(CustomComponent);
                });
            });
        });
        describe('styles', function () {
            test('deep merges styles prop onto defaultProps styles', function () {
                expect.assertions(1);
                var defaultProps = function () { return ({
                    styles: {
                        color: 'override me',
                        ':hover': { color: 'blue' },
                    },
                }); };
                var props = {
                    styles: { color: 'black' },
                };
                // render callback is deprecated an throws deprecation warnings
                utils_2.consoleUtil.disableOnce();
                getShorthand({
                    valueOrRenderCallback: function (render) {
                        return render(props, function (Component, props) {
                            expect(styles_1.callable(props.styles)()).toMatchObject({
                                color: 'black',
                                ':hover': { color: 'blue' },
                            });
                        });
                    },
                    Component: 'p',
                    defaultProps: defaultProps,
                });
            });
            test('deep merges overrideProps styles onto styles prop', function () {
                expect.assertions(1);
                var overrideProps = {
                    styles: {
                        color: 'black',
                        ':hover': {
                            color: 'blue',
                        },
                    },
                };
                var props = {
                    styles: {
                        position: 'keep',
                        color: 'override',
                        ':hover': {
                            position: 'keep',
                            color: 'override',
                        },
                    },
                };
                // render callback is deprecated an throws deprecation warnings
                utils_2.consoleUtil.disableOnce();
                getShorthand({
                    valueOrRenderCallback: function (render) {
                        return render(props, function (Component, props) {
                            expect(styles_1.callable(props.styles)()).toMatchObject({
                                position: 'keep',
                                color: 'black',
                                ':hover': {
                                    position: 'keep',
                                    color: 'blue',
                                },
                            });
                        });
                    },
                    Component: 'p',
                    overrideProps: overrideProps,
                });
            });
            test('deep merges styles prop as function onto defaultProps styles', function () {
                expect.assertions(1);
                var defaultProps = function () { return ({
                    styles: function () { return ({
                        color: 'override me',
                        ':hover': { color: 'blue' },
                    }); },
                }); };
                var props = {
                    styles: { color: 'black' },
                };
                // render callback is deprecated an throws deprecation warnings
                utils_2.consoleUtil.disableOnce();
                getShorthand({
                    valueOrRenderCallback: function (render) {
                        return render(props, function (Component, props) {
                            expect(styles_1.callable(props.styles)()).toMatchObject({
                                color: 'black',
                                ':hover': { color: 'blue' },
                            });
                        });
                    },
                    Component: 'p',
                    defaultProps: defaultProps,
                });
            });
            test('deep merges overrideProps styles as function onto styles prop', function () {
                expect.assertions(1);
                var overrideProps = {
                    styles: function () { return ({
                        color: 'black',
                        ':hover': {
                            color: 'blue',
                        },
                    }); },
                };
                var props = {
                    styles: {
                        position: 'keep',
                        color: 'override',
                        ':hover': {
                            position: 'keep',
                            color: 'override',
                        },
                    },
                };
                // render callback is deprecated an throws deprecation warnings
                utils_2.consoleUtil.disableOnce();
                getShorthand({
                    valueOrRenderCallback: function (render) {
                        return render(props, function (Component, props) {
                            expect(styles_1.callable(props.styles)()).toMatchObject({
                                position: 'keep',
                                color: 'black',
                                ':hover': {
                                    position: 'keep',
                                    color: 'blue',
                                },
                            });
                        });
                    },
                    Component: 'p',
                    overrideProps: overrideProps,
                });
            });
        });
        describe('defaultProps', function () {
            test('can be an object', function () {
                var defaultPropsValue = { 'data-some': 'defaults' };
                testCreateShorthand({ defaultProps: function () { return defaultPropsValue; }, valueOrRenderCallback: 'foo' }, tslib_1.__assign(tslib_1.__assign({}, defaultPropsValue), { children: 'foo' }));
            });
        });
        describe('key', function () {
            beforeEach(function () {
                // silence React's warning about accessing the `key` prop
                utils_2.consoleUtil.disableOnce();
            });
            test('is not consumed', function () {
                expect(getShorthand({ valueOrRenderCallback: { key: 123 } }).props).toHaveProperty('key');
            });
            describe('on an element', function () {
                test('works with a string', function () {
                    expect(getShorthand({ valueOrRenderCallback: React.createElement("div", { key: "foo" }) })).toHaveProperty('key', 'foo');
                });
                test('works with a number', function () {
                    expect(getShorthand({ valueOrRenderCallback: React.createElement("div", { key: 123 }) })).toHaveProperty('key', '123');
                });
                test('works with falsy values', function () {
                    var elementWithoutKey = getShorthand({ valueOrRenderCallback: React.createElement("p", null) });
                    expect(elementWithoutKey).toHaveProperty('key', null);
                    expect(elementWithoutKey.props.children.key).toBe(null);
                    var elementWithNullKey = getShorthand({ valueOrRenderCallback: React.createElement("p", { key: null }) });
                    expect(elementWithNullKey).toHaveProperty('key', 'null');
                    expect(elementWithoutKey.props.children.key).toBe(null);
                    expect(getShorthand({ valueOrRenderCallback: React.createElement("div", { key: 0 }) })).toHaveProperty('key', '0');
                    expect(getShorthand({ valueOrRenderCallback: React.createElement("div", { key: "" }) })).toHaveProperty('key', '');
                });
            });
            describe('on an object', function () {
                test('works with a string', function () {
                    expect(getShorthand({ valueOrRenderCallback: { key: 'foo' } })).toHaveProperty('key', 'foo');
                });
                test('works with a number', function () {
                    expect(getShorthand({ valueOrRenderCallback: { key: 123 } })).toHaveProperty('key', '123');
                });
                test('works with falsy values', function () {
                    expect(getShorthand({ valueOrRenderCallback: { key: null } })).toHaveProperty('key', 'null');
                    expect(getShorthand({ valueOrRenderCallback: { key: 0 } })).toHaveProperty('key', '0');
                    expect(getShorthand({ valueOrRenderCallback: { key: '' } })).toHaveProperty('key', '');
                });
            });
            describe('when value is a string', function () {
                test('is generated from the value', function () {
                    expect(getShorthand({ valueOrRenderCallback: 'foo' })).toHaveProperty('key', 'foo');
                });
                test('is not generated if generateKey is false', function () {
                    expect(getShorthand({ valueOrRenderCallback: 'foo', generateKey: false })).toHaveProperty('key', null);
                });
            });
            describe('when value is a number', function () {
                test('is generated from the value', function () {
                    expect(getShorthand({ valueOrRenderCallback: 123 })).toHaveProperty('key', '123');
                });
                test('is not generated if generateKey is false', function () {
                    expect(getShorthand({ valueOrRenderCallback: 123, generateKey: false })).toHaveProperty('key', null);
                });
            });
        });
        describe('overrideProps', function () {
            var testValue = 'foo';
            test('can be an object', function () {
                var overrideProps = { 'data-some': 'overrides' };
                testCreateShorthand({ overrideProps: overrideProps, valueOrRenderCallback: testValue }, tslib_1.__assign(tslib_1.__assign({}, overrideProps), { children: testValue }));
            });
            test('can be a function that returns defaultProps', function () {
                var overrideProps = function () { return ({ 'data-some': 'overrides', children: testValue }); };
                testCreateShorthand({ overrideProps: overrideProps, valueOrRenderCallback: testValue }, overrideProps());
            });
            test("is called with the user's element's and default props", function () {
                var defaultPropsValue = { 'data-some': 'defaults' };
                var overrideProps = jest.fn(function () { return ({}); });
                enzyme_1.shallow(getShorthand({
                    defaultProps: function () { return defaultPropsValue; },
                    overrideProps: overrideProps,
                    valueOrRenderCallback: React.createElement("div", null),
                }));
                expect(overrideProps).toHaveBeenCalledWith(defaultPropsValue);
            });
            test("is called with the user's props object", function () {
                var defaultPropsValue = { 'data-some': 'defaults' };
                var overrideProps = jest.fn(function () { return ({}); });
                var userProps = { 'data-user': 'props' };
                enzyme_1.shallow(getShorthand({
                    defaultProps: function () { return defaultPropsValue; },
                    overrideProps: overrideProps,
                    valueOrRenderCallback: userProps,
                }));
                expect(overrideProps).toHaveBeenCalledWith(tslib_1.__assign(tslib_1.__assign({}, defaultPropsValue), userProps));
            });
        });
        describe('from undefined', function () {
            itReturnsNull(undefined);
            itReturnsNullGivenDefaultProps(undefined);
        });
        describe('from null', function () {
            itReturnsNull(null);
            itReturnsNullGivenDefaultProps(null);
        });
        describe('from true', function () {
            itReturnsNull(true);
            itReturnsNullGivenDefaultProps(true);
        });
        describe('from false', function () {
            itReturnsNull(false);
            itReturnsNullGivenDefaultProps(false);
        });
        describe('from an element', function () {
            itReturnsAValidElement(React.createElement("div", null));
            itAppliesDefaultProps(React.createElement("div", null));
            itMergesClassNames('mappedProp', 'mapped', {
                valueOrRenderCallback: React.createElement("div", null),
                mappedProp: 'className',
            });
            itAppliesProps('mappedProp', { 'data-prop': React.createElement("div", null) }, {
                valueOrRenderCallback: React.createElement("div", null),
                mappedProp: 'data-prop',
            });
            itOverridesDefaultProps('mappedProp', function () { return ({ some: 'defaults', overridden: null }); }, { some: 'defaults', overridden: React.createElement("div", null) }, {
                valueOrRenderCallback: React.createElement("div", null),
                mappedProp: 'overridden',
            });
        });
        describe('from a string', function () {
            itReturnsAValidElement('foo');
            itAppliesDefaultProps('foo');
            itMergesClassNames('mappedProp', 'mapped', {
                valueOrRenderCallback: 'foo',
                mappedProp: 'className',
            });
            itAppliesProps('mappedProp', { 'data-prop': 'foo' }, {
                valueOrRenderCallback: 'foo',
                mappedProp: 'data-prop',
            });
            itOverridesDefaultProps('mappedProp', function () { return ({ some: 'defaults', overridden: 'false' }); }, { some: 'defaults', overridden: 'true' }, {
                valueOrRenderCallback: 'true',
                mappedProp: 'overridden',
            });
            var mappedProp = 'test-mapped-prop';
            var value = 'test-value';
            describe("when sending HTML tag ", function () {
                _.forEach(mappedProps, function (val, as) {
                    var testMsg = "spreads { " + [mappedProps[as]] + ": '" + value + "' }";
                    describe("'" + as + "' as 'as' prop to defaultProps", function () {
                        test("overrides " + mappedProp + " and " + testMsg, function () {
                            var _a;
                            testCreateShorthand({ mappedProp: mappedProp, valueOrRenderCallback: value, defaultProps: function () { return ({ as: as }); } }, (_a = { as: as }, _a[mappedProps[as]] = value, _a));
                        });
                    });
                    describe("'" + as + "' as 'as' prop to overrideProps", function () {
                        test("overrides " + mappedProp + " and " + testMsg, function () {
                            var _a;
                            testCreateShorthand({ mappedProp: mappedProp, valueOrRenderCallback: value, overrideProps: { as: as } }, (_a = { as: as }, _a[mappedProps[as]] = value, _a));
                        });
                    });
                    describe("'" + as + "' as 'as' prop to overrideProps", function () {
                        test("overrides defaultProps, " + mappedProp + " and " + testMsg, function () {
                            var _a;
                            testCreateShorthand({
                                mappedProp: mappedProp,
                                valueOrRenderCallback: value,
                                defaultProps: function () { return ({ as: 'overriden' }); },
                                overrideProps: { as: as },
                            }, (_a = { as: as }, _a[mappedProps[as]] = value, _a));
                        });
                    });
                });
            });
            describe("when sending " + mappedProp + " as mappedProp", function () {
                var testMsg = "spreads { " + [mappedProp] + ": '" + value + "' }";
                describe("and an unsupported tag as 'as' prop to defaultProps", function () {
                    test(testMsg, function () {
                        var _a;
                        testCreateShorthand({
                            mappedProp: mappedProp,
                            valueOrRenderCallback: value,
                            defaultProps: function () { return ({ as: 'unsupported' }); },
                        }, (_a = { as: 'unsupported' }, _a[mappedProp] = value, _a));
                    });
                });
                describe("and an unsupported tag as 'as' prop to overrideProps", function () {
                    test(testMsg, function () {
                        var _a;
                        testCreateShorthand({ mappedProp: mappedProp, valueOrRenderCallback: value, overrideProps: { as: 'unsupported' } }, (_a = { as: 'unsupported' }, _a[mappedProp] = value, _a));
                    });
                });
                describe("an unsupported tag as 'as' prop to overrideProps and a supported tag to defaultProps", function () {
                    test(testMsg, function () {
                        var _a;
                        testCreateShorthand({
                            mappedProp: mappedProp,
                            valueOrRenderCallback: value,
                            defaultProps: function () { return ({ as: 'div' }); },
                            overrideProps: { as: 'unsupported' },
                        }, (_a = { as: 'unsupported' }, _a[mappedProp] = value, _a));
                    });
                });
            });
            describe("when sending no mappedProp", function () {
                var testMsg = "spreads { children: '" + value + "' } by default";
                describe("and an unsupported tag as 'as' prop to defaultProps", function () {
                    test(testMsg, function () {
                        testCreateShorthand({ valueOrRenderCallback: value, defaultProps: function () { return ({ as: 'unsupported' }); } }, { as: 'unsupported', children: value });
                    });
                });
                describe("and an unsupported tag as 'as' prop to overrideProps", function () {
                    test(testMsg, function () {
                        testCreateShorthand({ valueOrRenderCallback: value, overrideProps: { as: 'unsupported' } }, { as: 'unsupported', children: value });
                    });
                });
                describe("an unsupported tag as 'as' prop to overrideProps and a supported tag to defaultProps", function () {
                    test(testMsg, function () {
                        testCreateShorthand({
                            valueOrRenderCallback: value,
                            defaultProps: function () { return ({ as: 'div' }); },
                            overrideProps: { as: 'unsupported' },
                        }, { as: 'unsupported', children: value });
                    });
                });
            });
        });
        describe('from a props object', function () {
            itReturnsAValidElement({});
            itAppliesDefaultProps({});
            itDoesNotIncludePropsFromMappedProp({});
            itMergesClassNames('props object', 'user', {
                valueOrRenderCallback: { className: 'user' },
            });
            itOverridesDefaultProps('props object', function () { return ({ some: 'defaults', overridden: false }); }, { some: 'defaults', overridden: true }, {
                valueOrRenderCallback: { overridden: true },
            });
            itOverridesDefaultPropsWithFalseyProps('props object', {
                valueOrRenderCallback: { undef: undefined, nil: null, zero: 0, empty: '' },
            });
        });
        describe('from an array', function () {
            var mappedArrayProp = 'test-mapped-prop-ar-array';
            var value = ['test-value'];
            describe("when sending mappedArrayProp", function () {
                var testMsg = "spreads { " + mappedArrayProp + ": '" + value + "' }";
                describe("and an unsupported tag as 'as' prop to defaultProps", function () {
                    test(testMsg, function () {
                        var _a;
                        testCreateShorthand({
                            mappedArrayProp: mappedArrayProp,
                            valueOrRenderCallback: value,
                            defaultProps: function () { return ({ as: 'unsupported' }); },
                        }, (_a = { as: 'unsupported' }, _a[mappedArrayProp] = value, _a));
                    });
                });
            });
        });
        describe('style', function () {
            test('merges style prop', function () {
                var defaultProps = function () { return ({ style: { left: 5 } }); };
                var userProps = { style: { bottom: 5 } };
                var overrideProps = { style: { right: 5 } };
                expect(enzyme_1.shallow(getShorthand({ defaultProps: defaultProps, overrideProps: overrideProps, valueOrRenderCallback: userProps })).prop('style')).toEqual({
                    left: 5,
                    bottom: 5,
                    right: 5,
                });
            });
            test('merges style prop and handles override by userProps', function () {
                var defaultProps = function () { return ({ style: { left: 10, bottom: 5 } }); };
                var userProps = { style: { bottom: 10 } };
                expect(enzyme_1.shallow(getShorthand({ defaultProps: defaultProps, valueOrRenderCallback: userProps })).prop('style')).toEqual({
                    left: 10,
                    bottom: 10,
                });
            });
            test('merges style prop and handles override by overrideProps', function () {
                var userProps = { style: { bottom: 10, right: 5 } };
                var overrideProps = { style: { right: 10 } };
                expect(enzyme_1.shallow(getShorthand({ overrideProps: overrideProps, valueOrRenderCallback: userProps })).prop('style')).toEqual({
                    bottom: 10,
                    right: 10,
                });
            });
            test('merges style prop from defaultProps and overrideProps', function () {
                var defaultProps = function () { return ({ style: { left: 10, bottom: 5 } }); };
                var overrideProps = { style: { bottom: 10 } };
                expect(enzyme_1.shallow(getShorthand({ defaultProps: defaultProps, overrideProps: overrideProps, valueOrRenderCallback: 'foo' })).prop('style')).toEqual({
                    left: 10,
                    bottom: 10,
                });
            });
        });
    });
});
