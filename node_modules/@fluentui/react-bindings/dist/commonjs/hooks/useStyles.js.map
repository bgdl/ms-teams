{"version":3,"sources":["hooks/useStyles.ts"],"names":["defaultContext","rtl","disableAnimations","performance","enableSanitizeCssPlugin","process","env","NODE_ENV","enableStylesCaching","enableVariablesCaching","enableBooleanVariablesCaching","renderer","renderRule","theme","emptyTheme","useStyles","displayName","options","context","React","useContext","ThemeContext","elementProps","composeOptions","className","mapPropsToStyles","mapPropsToInlineStyles","componentStylesProps","composeProps","composeStylesProps","mapPropsToStylesPropsChain","reduce","acc","fn","debug","useRef","fluentUIDebug","displayNames","props","saveDebug","current","classes","resolvedStyles","styles"],"mappings":"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","sourcesContent":["import {\n  ComponentSlotStyle,\n  ComponentSlotStylesResolved,\n  ComponentVariablesInput,\n  DebugData,\n  emptyTheme,\n} from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore We have this export in package, but it is not present in typings\nimport { ThemeContext } from 'react-fela';\n\nimport useComposeOptions from '../compose/useComposeOptions';\nimport useCurrentReactElement from '../compose/useCurrentReactElement';\nimport {\n  ComponentDesignProp,\n  ComponentSlotClasses,\n  PrimitiveProps,\n  RendererRenderRule,\n  StylesContextValue,\n} from '../styles/types';\nimport getStyles from '../styles/getStyles';\n\ntype UseStylesOptions<StyleProps extends PrimitiveProps> = {\n  className?: string;\n  mapPropsToStyles?: () => StyleProps;\n  mapPropsToInlineStyles?: () => InlineStyleProps<StyleProps>;\n  rtl?: boolean;\n};\n\ntype UseStylesResult = {\n  classes: ComponentSlotClasses;\n  styles: ComponentSlotStylesResolved;\n};\n\ntype InlineStyleProps<StyleProps> = {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  design?: ComponentDesignProp;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<StyleProps, any>; // TODO: see if we can improve it\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n};\n\nconst defaultContext: StylesContextValue<{ renderRule: RendererRenderRule }> = {\n  rtl: false,\n  disableAnimations: false,\n  performance: {\n    enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n    enableStylesCaching: true,\n    enableVariablesCaching: true,\n    enableBooleanVariablesCaching: false,\n  },\n  renderer: { renderRule: () => '' },\n  theme: emptyTheme,\n};\n\nconst useStyles = <StyleProps extends PrimitiveProps>(\n  displayName: string,\n  options: UseStylesOptions<StyleProps>,\n): UseStylesResult => {\n  const context: StylesContextValue<{ renderRule: RendererRenderRule }> =\n    React.useContext(ThemeContext) || defaultContext;\n\n  const { elementProps } = useCurrentReactElement();\n  const composeOptions = useComposeOptions();\n\n  const {\n    className = process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n    mapPropsToStyles = () => ({} as StyleProps),\n    mapPropsToInlineStyles = () => ({} as InlineStyleProps<StyleProps>),\n    rtl = false,\n  } = options;\n  const componentStylesProps = mapPropsToStyles();\n\n  // `composeProps` should include all props including stylesProps as they can contain state\n  const composeProps = { ...elementProps, ...componentStylesProps };\n  const composeStylesProps = composeOptions?.mapPropsToStylesPropsChain?.reduce(\n    (acc, fn) => ({ ...acc, ...fn(composeProps) }),\n    {},\n  );\n\n  // Stores debug information for component.\n  const debug = React.useRef<{ fluentUIDebug: DebugData | null }>({ fluentUIDebug: null });\n  const { classes, styles: resolvedStyles } = getStyles({\n    // Input values\n    className: composeOptions?.className || className,\n    displayNames: composeOptions?.displayNames || [displayName],\n    props: {\n      ...componentStylesProps,\n      ...mapPropsToInlineStyles(),\n      ...composeStylesProps,\n    },\n\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl,\n    saveDebug: fluentUIDebug => (debug.current = { fluentUIDebug }),\n    theme: context.theme,\n    performance: context.performance,\n  });\n\n  return { classes, styles: resolvedStyles };\n};\n\nexport default useStyles;\n"],"file":"useStyles.js"}