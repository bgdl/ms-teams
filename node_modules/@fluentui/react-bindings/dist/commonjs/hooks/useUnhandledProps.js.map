{"version":3,"sources":["hooks/useUnhandledProps.ts"],"names":["useUnhandledProps","handledProps","props","composeOptions","process","env","NODE_ENV"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;;;AAQA,SAASA,iBAAT,CAA0DC,YAA1D,EAAqFC,KAArF,EAA2G;AACzG,MAAMC,cAAc,GAAG,iCAAvB;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,2EAAsBL,YAAtB,oCAAwC,CAAAE,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEF,YAAhB,KAAgC,EAAxE,sBACFC,KADE;AAEL,kCAA4B;AAFvB,OAAP;AAID;;AAED,SAAO,2EAAsBD,YAAtB,oCAAwC,CAAAE,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEF,YAAhB,KAAgC,EAAxE,IAA8EC,KAA9E,CAAP;AACD;;eAEcF,iB","sourcesContent":["import useComposeOptions from '../compose/useComposeOptions';\nimport getUnhandledProps from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nfunction useUnhandledProps<P extends Record<string, any>>(handledProps: (keyof P)[], props: P): Partial<P> {\n  const composeOptions = useComposeOptions();\n\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps([...handledProps, ...(composeOptions?.handledProps || [])], {\n      ...props,\n      'data-uses-unhanded-props': true,\n    });\n  }\n\n  return getUnhandledProps([...handledProps, ...(composeOptions?.handledProps || [])], props);\n}\n\nexport default useUnhandledProps;\n"],"file":"useUnhandledProps.js"}