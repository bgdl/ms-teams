"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _useComposeOptions = _interopRequireDefault(require("../compose/useComposeOptions"));

var _getUnhandledProps = _interopRequireDefault(require("../utils/getUnhandledProps"));

/**
 * Returns an object consisting of props beyond the scope of the Component.
 * Useful for getting and spreading unknown props from the user.
 *
 * @param handledProps - An array with names of props
 * @param props - A ReactElement props object
 * @returns A shallow copy of the prop object
 */
function useUnhandledProps(handledProps, props) {
  var composeOptions = (0, _useComposeOptions.default)();

  if (process.env.NODE_ENV === 'test') {
    return (0, _getUnhandledProps.default)([].concat((0, _toConsumableArray2.default)(handledProps), (0, _toConsumableArray2.default)((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), Object.assign({}, props, {
      'data-uses-unhanded-props': true
    }));
  }

  return (0, _getUnhandledProps.default)([].concat((0, _toConsumableArray2.default)(handledProps), (0, _toConsumableArray2.default)((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), props);
}

var _default = useUnhandledProps;
exports.default = _default;
//# sourceMappingURL=useUnhandledProps.js.map
