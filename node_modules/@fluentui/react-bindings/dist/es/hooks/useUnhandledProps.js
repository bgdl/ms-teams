import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import useComposeOptions from '../compose/useComposeOptions';
import getUnhandledProps from '../utils/getUnhandledProps';
/**
 * Returns an object consisting of props beyond the scope of the Component.
 * Useful for getting and spreading unknown props from the user.
 *
 * @param handledProps - An array with names of props
 * @param props - A ReactElement props object
 * @returns A shallow copy of the prop object
 */

function useUnhandledProps(handledProps, props) {
  var composeOptions = useComposeOptions();

  if (process.env.NODE_ENV === 'test') {
    return getUnhandledProps([].concat(_toConsumableArray(handledProps), _toConsumableArray((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), Object.assign({}, props, {
      'data-uses-unhanded-props': true
    }));
  }

  return getUnhandledProps([].concat(_toConsumableArray(handledProps), _toConsumableArray((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), props);
}

export default useUnhandledProps;
//# sourceMappingURL=useUnhandledProps.js.map
