import useComposeOptions from '../compose/useComposeOptions';
export var getTelemetry = function getTelemetry(displayName, telemetry) {
  var start = -1;
  var end = -1;

  var setStart = function setStart() {
    start = telemetry && telemetry.enabled ? performance.now() : -1;
  };

  var setEnd = function setEnd() {
    if (telemetry && telemetry.enabled && start !== -1) {
      end = performance.now();
      var duration = end - start;

      if (telemetry.performance[displayName]) {
        telemetry.performance[displayName].count++;
        telemetry.performance[displayName].msTotal += duration;
        telemetry.performance[displayName].msMin = Math.min(duration, telemetry.performance[displayName].msMin);
        telemetry.performance[displayName].msMax = Math.max(duration, telemetry.performance[displayName].msMax);
      } else {
        telemetry.performance[displayName] = {
          count: 1,
          msTotal: duration,
          msMin: duration,
          msMax: duration
        };
      }
    }
  };

  return {
    setStart: setStart,
    setEnd: setEnd
  };
};

var useTelemetry = function useTelemetry(displayName, telemetry) {
  var composeOptions = useComposeOptions();
  return getTelemetry((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.displayNames[0]) || displayName, telemetry);
};

export default useTelemetry;
//# sourceMappingURL=useTelemetry.js.map
