"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enzyme_1 = require("enzyme");
var React = require("react");
var useCurrentReactElement_1 = require("../../src/compose/useCurrentReactElement");
var TestComponent = function () {
    var _a, _b;
    var _c = useCurrentReactElement_1.default(), ElementType = _c.ElementType, elementProps = _c.elementProps;
    return React.createElement("p", { "data-name": (_a = ElementType) === null || _a === void 0 ? void 0 : _a.name, "data-value": (_b = elementProps) === null || _b === void 0 ? void 0 : _b.value });
};
var ByPassComponent = function (props) {
    var _a;
    var ElementType = useCurrentReactElement_1.default().ElementType;
    return React.createElement("div", { "data-name": (_a = ElementType) === null || _a === void 0 ? void 0 : _a.name }, props.children);
};
describe('useCurrentReactElement', function () {
    it('returns ElementType & props', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, { value: "foo" }));
        expect(wrapper.find('p').prop('data-name')).toBe('TestComponent');
        expect(wrapper.find('p').prop('data-value')).toBe('foo');
    });
    it('returns ElementType & props inside other components', function () {
        var wrapper = enzyme_1.mount(React.createElement(ByPassComponent, null,
            React.createElement(TestComponent, { value: "foo" })));
        expect(wrapper.find('div').prop('data-name')).toBe('ByPassComponent');
        expect(wrapper.find('p').prop('data-name')).toBe('TestComponent');
        expect(wrapper.find('p').prop('data-value')).toBe('foo');
    });
    it('returns actual props', function () {
        var wrapper = enzyme_1.mount(React.createElement(TestComponent, { value: "foo" }));
        wrapper.setProps({ value: 'bar' });
        expect(wrapper.find('p').prop('data-value')).toBe('bar');
        wrapper.setProps({ value: 'baz' });
        expect(wrapper.find('p').prop('data-value')).toBe('baz');
    });
});
