"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_bindings_1 = require("@fluentui/react-bindings");
var styles_1 = require("@fluentui/styles");
var classnames_1 = require("classnames");
var enzyme_1 = require("enzyme");
var React = require("react");
// @ts-ignore
var react_fela_1 = require("react-fela");
var TestProvider = function (props) {
    var value = {
        disableAnimations: false,
        renderer: {
            renderRule: function (rule) {
                var props = rule();
                return classnames_1.default(props.color && "color-" + props.color, props.hidden && "hidden-" + props.hidden, props.visible && "visible-" + props.visible);
            },
        },
        performance: {
            enableStylesCaching: false,
            enableVariablesCaching: false,
            enableSanitizeCssPlugin: false,
            enableBooleanVariablesCaching: false,
        },
        rtl: false,
        theme: tslib_1.__assign(tslib_1.__assign({}, styles_1.emptyTheme), { 
            // Noop to pass all props as styles to `renderRule()`
            componentStyles: new Proxy({}, { get: function () { return ({ root: function (_a) {
                        var props = _a.props;
                        return props;
                    } }); } }) }),
    };
    return React.createElement(react_fela_1.ThemeContext.Provider, { value: value }, props.children);
};
var BaseComponent = function (props) {
    var color = props.color;
    var _a = React.useState(false), open = _a[0], setOpen = _a[1];
    var classes = react_bindings_1.useStyles('BaseComponent', {
        className: 'ui-base',
        mapPropsToStyles: function () { return ({ color: color, open: open }); },
    }).classes;
    var unhandledProps = react_bindings_1.useUnhandledProps(['className', 'color'], props);
    return React.createElement("button", tslib_1.__assign({ className: classes.root, onClick: function () { return setOpen(!open); } }, unhandledProps));
};
var ComposedComponent = react_bindings_1.compose(BaseComponent, {
    className: 'ui-composed',
    displayName: 'ComposedComponent',
    mapPropsToStylesProps: function (props) { return ({ visible: props.open && props.visible }); },
    handledProps: ['hidden', 'visible'],
});
var MultipleComposedComponent = react_bindings_1.compose(ComposedComponent, {
    displayName: 'MultipleComposedComponent',
    mapPropsToStylesProps: function (props) { return ({ hidden: props.hidden, visible: undefined }); },
});
describe('useCompose', function () {
    it('applies props on base component', function () {
        var wrapper = enzyme_1.mount(React.createElement(BaseComponent, { color: "red" }), { wrappingComponent: TestProvider });
        expect(wrapper.find('button').prop('className')).toContain('ui-base');
        expect(wrapper.find('button').prop('className')).toContain('color-red');
    });
    it('"className" is added as statics on composed component', function () {
        expect(ComposedComponent).toHaveProperty('className', 'ui-composed');
    });
    it('applies props on composed component', function () {
        var wrapper = enzyme_1.mount(React.createElement(ComposedComponent, { hidden: true, color: "red", visible: true }), { wrappingComponent: TestProvider });
        expect(wrapper.find('button').prop('hidden')).toBeUndefined();
        expect(wrapper.find('button').prop('visible')).toBeUndefined();
        expect(wrapper.find('button').prop('className')).toContain('ui-composed');
        expect(wrapper.find('button').prop('className')).toContain('color-red');
        expect(wrapper.find('button').prop('className')).not.toContain('visible-true');
        wrapper.find('button').simulate('click');
        expect(wrapper.find('button').prop('className')).toContain('visible-true');
    });
    it('applies props on multiple times composed component', function () {
        var wrapper = enzyme_1.mount(React.createElement(MultipleComposedComponent, { hidden: true, color: "red", visible: true }), {
            wrappingComponent: TestProvider,
        });
        expect(wrapper.find('button').prop('hidden')).toBeUndefined();
        expect(wrapper.find('button').prop('visible')).toBeUndefined();
        expect(wrapper.find('button').prop('className')).toContain('ui-composed');
        expect(wrapper.find('button').prop('className')).toContain('color-red');
        expect(wrapper.find('button').prop('className')).toContain('hidden-true');
        expect(wrapper.find('button').prop('className')).not.toContain('visible-true');
    });
});
