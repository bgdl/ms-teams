{"ast":null,"code":"import _regeneratorRuntime from\"/Users/bogdanluca/moqups/ms-teams/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/bogdanluca/moqups/ms-teams/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/bogdanluca/moqups/ms-teams/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/bogdanluca/moqups/ms-teams/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import*as constants from'../constants';import*as msTeams from'@microsoft/teams-js';import AuthenticationContext from'adal-angular';var authenticationContext=new AuthenticationContext({clientId:constants.Auth.appId,redirectUri:\"\".concat(window.location.origin,\"/\").concat(constants.Auth.signInEndPage),cacheLocation:constants.Auth.cacheLocation,endpoints:constants.Auth.authenticatedDomains,navigateToLoginRequestUrl:false});var AuthHelper=/*#__PURE__*/function(){function AuthHelper(){_classCallCheck(this,AuthHelper);}_createClass(AuthHelper,null,[{key:\"IsUserLoggedIn\",value:/**\n     * Uses the current authetication context to check if a user\n     * is logged in. In this case, this is determined by the presence\n     * of a cached user and cached token with length > 0.\n     */function IsUserLoggedIn(){var cachedUser=authenticationContext.getCachedUser();var cachedToken=authenticationContext.getCachedToken(constants.Auth.appId);return!!cachedUser&&cachedToken.length>0;}/**\n     * Attempts to get an access token for the user. If successful,\n     * sends the user to the home page again where they will now\n     * be logged in.\n     */},{key:\"Login\",value:function(){var _Login=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var accessToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:accessToken='';_context.prev=1;_context.next=4;return AuthHelper.getAccessToken();case 4:accessToken=_context.sent;_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);console.error(_context.t0);case 10:if(accessToken.length>0){window.location.replace(window.location.origin);}case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,7]]);}));function Login(){return _Login.apply(this,arguments);}return Login;}()/**\n     * Clears any existing user from the cache, then requests\n     * an AD token.\n     */},{key:\"StartSignIn\",value:function StartSignIn(){authenticationContext.clearCache();authenticationContext.login();}/**\n     * Called from the sign-in-end page. Checks for the presence\n     * of the AD token, and notifies teams of a successful log in\n     * if it is there, or notifies of failure otherwise.\n     */},{key:\"EndSignIn\",value:function EndSignIn(){if(authenticationContext.isCallback(window.location.hash)){authenticationContext.handleWindowCallback(window.location.hash);if(window.opener){if(authenticationContext.getCachedUser()){authenticationContext.acquireToken(\"https://graph.microsoft.com\",function(err,token){if(token){msTeams.authentication.notifySuccess(token);}else if(err){msTeams.authentication.notifyFailure(err);}else{msTeams.authentication.notifyFailure(\"UnexpectedFailure\");}});}else{microsoftTeams.authentication.notifyFailure(authenticationContext.getLoginError());}}}}/**\n     * Begins the login flow by opening a popup window\n     * at the sign-in-start page.\n     */},{key:\"getAccessToken\",value:function(){var _getAccessToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",new Promise(function(resolve,reject){msTeams.authentication.authenticate({url:\"\".concat(window.location.origin,\"/\").concat(constants.Auth.signInStartPage),width:600,height:535,successCallback:function successCallback(accessToken){resolve(accessToken);},failureCallback:function failureCallback(reason){reject(reason);}});}));case 1:case\"end\":return _context2.stop();}}},_callee2);}));function getAccessToken(){return _getAccessToken.apply(this,arguments);}return getAccessToken;}()}]);return AuthHelper;}();export{AuthHelper as default};","map":{"version":3,"sources":["/Users/bogdanluca/moqups/ms-teams/src/helpers/auth-helper.ts"],"names":["constants","msTeams","AuthenticationContext","authenticationContext","clientId","Auth","appId","redirectUri","window","location","origin","signInEndPage","cacheLocation","endpoints","authenticatedDomains","navigateToLoginRequestUrl","AuthHelper","cachedUser","getCachedUser","cachedToken","getCachedToken","length","accessToken","getAccessToken","console","error","replace","clearCache","login","isCallback","hash","handleWindowCallback","opener","acquireToken","err","token","authentication","notifySuccess","notifyFailure","microsoftTeams","getLoginError","Promise","resolve","reject","authenticate","url","signInStartPage","width","height","successCallback","failureCallback","reason"],"mappings":"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","sourcesContent":["import * as constants from '../constants';\nimport * as msTeams from '@microsoft/teams-js';\nimport AuthenticationContext from 'adal-angular';\n\nconst authenticationContext = new AuthenticationContext({\n    clientId: constants.Auth.appId,\n    redirectUri: `${window.location.origin}/${constants.Auth.signInEndPage}`,\n    cacheLocation: constants.Auth.cacheLocation as 'localStorage' | 'sessionStorage',\n    endpoints: constants.Auth.authenticatedDomains,\n    navigateToLoginRequestUrl: false\n});\n\nexport default class AuthHelper {\n    /**\n     * Uses the current authetication context to check if a user\n     * is logged in. In this case, this is determined by the presence\n     * of a cached user and cached token with length > 0.\n     */\n    public static IsUserLoggedIn(): boolean {\n        let cachedUser = authenticationContext.getCachedUser();\n        let cachedToken = authenticationContext.getCachedToken(constants.Auth.appId);\n\n        return !!cachedUser && cachedToken.length > 0;\n    }\n\n    /**\n     * Attempts to get an access token for the user. If successful,\n     * sends the user to the home page again where they will now\n     * be logged in.\n     */\n    public static async Login(): Promise<void> {\n        let accessToken: string = '';\n\n        try {\n            accessToken = await AuthHelper.getAccessToken();\n        } catch (err) {\n            console.error(err)\n        }\n\n        if (accessToken.length > 0) {\n            window.location.replace(window.location.origin);\n        }\n    }\n\n    /**\n     * Clears any existing user from the cache, then requests\n     * an AD token.\n     */\n    public static StartSignIn(): void {\n        authenticationContext.clearCache();\n        authenticationContext.login();\n    }\n\n    /**\n     * Called from the sign-in-end page. Checks for the presence\n     * of the AD token, and notifies teams of a successful log in\n     * if it is there, or notifies of failure otherwise.\n     */\n    public static EndSignIn(): void {\n        if (authenticationContext.isCallback(window.location.hash)) {\n            authenticationContext.handleWindowCallback(window.location.hash);\n\n            if (window.opener) {\n                if (authenticationContext.getCachedUser()) {\n                    authenticationContext.acquireToken(\"https://graph.microsoft.com\", (err, token) => {\n                        if (token) {\n                            msTeams.authentication.notifySuccess(token);\n                        } else if (err) {\n                            msTeams.authentication.notifyFailure(err);\n                        } else {\n                            msTeams.authentication.notifyFailure(\"UnexpectedFailure\");\n                        }\n                    });\n                } else {\n                    microsoftTeams.authentication.notifyFailure(authenticationContext.getLoginError());\n                }\n            }\n        }\n    }\n\n    /**\n     * Begins the login flow by opening a popup window\n     * at the sign-in-start page.\n     */\n    private static async getAccessToken(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            msTeams.authentication.authenticate({\n                url: `${window.location.origin}/${constants.Auth.signInStartPage}`,\n                width: 600,\n                height: 535,\n                successCallback: (accessToken: string | undefined) => {\n                    resolve(accessToken);\n                },\n                failureCallback: (reason) => {\n                    reject(reason);\n                }\n            })\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}