{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nimport _isNil from \"lodash/isNil\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { UIComponent, childrenExist, commonPropTypes, rtlTextContainer, createShorthandFactory } from '../../utils';\nimport Button from './Button';\n\nvar ButtonGroup = /*#__PURE__*/function (_UIComponent) {\n  _inherits(ButtonGroup, _UIComponent);\n\n  function ButtonGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ButtonGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ButtonGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getStyleForButtonIndex\", function (styles, isFirst, isLast) {\n      var resultStyles = {};\n\n      if (isFirst) {\n        resultStyles = styles.firstButton;\n      }\n\n      if (isLast) {\n        resultStyles = Object.assign({}, resultStyles, {}, styles.lastButton);\n      }\n\n      if (!isFirst && !isLast) {\n        resultStyles = styles.middleButton;\n      }\n\n      return resultStyles;\n    });\n\n    return _this;\n  }\n\n  _createClass(ButtonGroup, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          buttons = _this$props.buttons,\n          circular = _this$props.circular,\n          content = _this$props.content;\n\n      if (_isNil(buttons)) {\n        return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({\n          forElements: [children, content]\n        }), unhandledProps, {\n          className: classes.root\n        }), childrenExist(children) ? children : content);\n      }\n\n      return React.createElement(ElementType, _extends({}, unhandledProps, {\n        className: classes.root\n      }), _map(buttons, function (button, idx) {\n        return Button.create(button, {\n          defaultProps: function defaultProps() {\n            return {\n              circular: circular,\n              styles: _this2.getStyleForButtonIndex(styles, idx === 0, idx === buttons.length - 1)\n            };\n          }\n        });\n      }));\n    }\n  }]);\n\n  return ButtonGroup;\n}(UIComponent);\n\n_defineProperty(ButtonGroup, \"create\", void 0);\n\n_defineProperty(ButtonGroup, \"displayName\", 'ButtonGroup');\n\n_defineProperty(ButtonGroup, \"className\", 'ui-buttons');\n\n_defineProperty(ButtonGroup, \"propTypes\", Object.assign({}, commonPropTypes.createCommon(), {\n  buttons: customPropTypes.collectionShorthand,\n  circular: PropTypes.bool\n}));\n\n_defineProperty(ButtonGroup, \"defaultProps\", {\n  as: 'div'\n});\n\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons'\n});\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\n\nexport default withSafeTypeForAs(ButtonGroup);","map":{"version":3,"sources":["components/Button/ButtonGroup.tsx"],"names":["ButtonGroup","UIComponent","commonPropTypes","buttons","customPropTypes","collectionShorthand","circular","PropTypes","bool","as","ElementType","classes","accessibility","styles","unhandledProps","children","content","forElements","root","childrenExist","defaultProps","idx","resultStyles","createShorthandFactory","Component","mappedProp","mappedArrayProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport { WithAsProp, withSafeTypeForAs, ShorthandCollection } from '../../types';\nimport {\n  UIComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  createShorthandFactory,\n  ShorthandFactory,\n} from '../../utils';\nimport Button, { ButtonProps } from './Button';\n\nexport interface ButtonGroupProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** The buttons contained inside the ButtonGroup. */\n  buttons?: ShorthandCollection<ButtonProps>;\n\n  /** The buttons inside group can appear circular. */\n  circular?: boolean;\n}\n\nclass ButtonGroup extends UIComponent<WithAsProp<ButtonGroupProps>, any> {\n  static create: ShorthandFactory<ButtonGroupProps>;\n\n  static displayName = 'ButtonGroup';\n\n  static className = 'ui-buttons';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    buttons: customPropTypes.collectionShorthand,\n    circular: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n  };\n\n  renderComponent({ ElementType, classes, accessibility, styles, unhandledProps }): React.ReactNode {\n    const { children, buttons, circular, content } = this.props;\n    if (_.isNil(buttons)) {\n      return (\n        <ElementType\n          {...accessibility.attributes.root}\n          {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n          {...unhandledProps}\n          className={classes.root}\n        >\n          {childrenExist(children) ? children : content}\n        </ElementType>\n      );\n    }\n\n    return (\n      <ElementType {...unhandledProps} className={classes.root}>\n        {_.map(buttons, (button, idx) =>\n          Button.create(button, {\n            defaultProps: () => ({\n              circular,\n              styles: this.getStyleForButtonIndex(styles, idx === 0, idx === buttons.length - 1),\n            }),\n          }),\n        )}\n      </ElementType>\n    );\n  }\n\n  getStyleForButtonIndex = (styles, isFirst, isLast) => {\n    let resultStyles = {};\n    if (isFirst) {\n      resultStyles = styles.firstButton;\n    }\n    if (isLast) {\n      resultStyles = { ...resultStyles, ...styles.lastButton };\n    }\n    if (!isFirst && !isLast) {\n      resultStyles = styles.middleButton;\n    }\n    return resultStyles;\n  };\n}\n\nButtonGroup.create = createShorthandFactory({\n  Component: ButtonGroup,\n  mappedProp: 'content',\n  mappedArrayProp: 'buttons',\n});\n\n/**\n * A ButtonGroup represents multiple related actions as a group.\n */\nexport default withSafeTypeForAs<typeof ButtonGroup, ButtonGroupProps>(ButtonGroup);\n"]},"metadata":{},"sourceType":"module"}