{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport useComposeOptions from '../compose/useComposeOptions';\nimport getUnhandledProps from '../utils/getUnhandledProps';\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\n\nfunction useUnhandledProps(handledProps, props) {\n  var composeOptions = useComposeOptions();\n\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps([].concat(_toConsumableArray(handledProps), _toConsumableArray((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), Object.assign({}, props, {\n      'data-uses-unhanded-props': true\n    }));\n  }\n\n  return getUnhandledProps([].concat(_toConsumableArray(handledProps), _toConsumableArray((composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.handledProps) || [])), props);\n}\n\nexport default useUnhandledProps;","map":{"version":3,"sources":["hooks/useUnhandledProps.ts"],"names":["composeOptions","useComposeOptions","process","getUnhandledProps"],"mappings":";AAAA,OAAA,iBAAA,MAAA,8BAAA;AACA,OAAA,iBAAA,MAAA,4BAAA;AAEA;;;;;;;;;AAQA,SAAA,iBAAA,CAAA,YAAA,EAAA,KAAA,EAA2G;AACzG,MAAMA,cAAc,GAAGC,iBAAvB,EAAA;;AAEA,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,MAAA,EAAqC;AACnC,WAAOC,iBAAiB,CAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,YAAA,CAAA,EAAA,kBAAA,CAAuB,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,YAAA,KAAvB,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEtB,kCAA4B;AAFN,KAAA,CAAA,CAAxB;AAID;;AAED,SAAOA,iBAAiB,CAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,YAAA,CAAA,EAAA,kBAAA,CAAuB,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,CAAd,YAAA,KAAvB,EAAA,CAAA,CAAA,EAAxB,KAAwB,CAAxB;AACD;;AAED,eAAA,iBAAA","sourcesContent":["import useComposeOptions from '../compose/useComposeOptions';\nimport getUnhandledProps from '../utils/getUnhandledProps';\n\n/**\n * Returns an object consisting of props beyond the scope of the Component.\n * Useful for getting and spreading unknown props from the user.\n *\n * @param handledProps - An array with names of props\n * @param props - A ReactElement props object\n * @returns A shallow copy of the prop object\n */\nfunction useUnhandledProps<P extends Record<string, any>>(handledProps: (keyof P)[], props: P): Partial<P> {\n  const composeOptions = useComposeOptions();\n\n  if (process.env.NODE_ENV === 'test') {\n    return getUnhandledProps([...handledProps, ...(composeOptions?.handledProps || [])], {\n      ...props,\n      'data-uses-unhanded-props': true,\n    });\n  }\n\n  return getUnhandledProps([...handledProps, ...(composeOptions?.handledProps || [])], props);\n}\n\nexport default useUnhandledProps;\n"]},"metadata":{},"sourceType":"module"}