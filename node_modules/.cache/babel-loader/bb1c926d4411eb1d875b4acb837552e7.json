{"ast":null,"code":"import _uniq from \"lodash/uniq\";\nimport _isArray from \"lodash/isArray\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { mergeStyles } from '@fluentui/styles'; // It's only necessary to map props that don't use 'children' as value ('children' is the default)\n\nvar mappedProps = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type'\n}; // ============================================================\n// Factories\n// ============================================================\n\n/** A more robust React.createElement. It can create elements from primitive values. */\n\nexport function createShorthand(_ref) {\n  var allowsJSX = _ref.allowsJSX,\n      Component = _ref.Component,\n      mappedProp = _ref.mappedProp,\n      mappedArrayProp = _ref.mappedArrayProp,\n      valueOrRenderCallback = _ref.valueOrRenderCallback,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  var valIsRenderFunction = typeof valueOrRenderCallback === 'function' && !React.isValidElement(valueOrRenderCallback);\n\n  if (valIsRenderFunction) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(['@fluentui/react-northstar:', 'The usage of render callback is deprecated and will be removed soon. Please use render props for shorthands instead.', 'See: https://microsoft.github.io/fluent-ui-react/shorthand-props'].join(' '));\n    }\n\n    return createShorthandFromRenderCallback({\n      allowsJSX: allowsJSX,\n      Component: Component,\n      renderCallback: valueOrRenderCallback,\n      mappedProp: mappedProp,\n      mappedArrayProp: mappedArrayProp,\n      options: options\n    });\n  }\n\n  return createShorthandFromValue({\n    allowsJSX: allowsJSX,\n    Component: Component,\n    mappedProp: mappedProp,\n    mappedArrayProp: mappedArrayProp,\n    value: valueOrRenderCallback,\n    options: options\n  });\n}\nexport function createShorthandFactory(_ref2) {\n  var Component = _ref2.Component,\n      mappedProp = _ref2.mappedProp,\n      mappedArrayProp = _ref2.mappedArrayProp,\n      allowsJSX = _ref2.allowsJSX;\n\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return function (val, options) {\n    return createShorthand({\n      Component: Component,\n      mappedProp: mappedProp,\n      mappedArrayProp: mappedArrayProp,\n      allowsJSX: allowsJSX,\n      valueOrRenderCallback: val,\n      options: options\n    });\n  };\n} // ============================================================\n// Private Utils\n// ============================================================\n\nfunction createShorthandFromValue(_ref3) {\n  var Component = _ref3.Component,\n      mappedProp = _ref3.mappedProp,\n      mappedArrayProp = _ref3.mappedArrayProp,\n      value = _ref3.value,\n      options = _ref3.options,\n      _ref3$allowsJSX = _ref3.allowsJSX,\n      allowsJSX = _ref3$allowsJSX === void 0 ? true : _ref3$allowsJSX;\n\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.');\n  } // short circuit noop values\n\n\n  var valIsNoop = _isNil(value) || typeof value === 'boolean';\n  if (valIsNoop && !options.render) return null;\n  var valIsPrimitive = typeof value === 'string' || typeof value === 'number';\n\n  var valIsPropsObject = _isPlainObject(value);\n\n  var valIsArray = _isArray(value);\n\n  var valIsReactElement = React.isValidElement(value); // unhandled type warning\n\n  if (process.env.NODE_ENV !== 'production') {\n    var displayName = typeof Component === 'string' ? Component : Component.displayName;\n\n    if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {\n      /* eslint-disable-next-line no-console */\n      console.error([\"The shorthand prop for \\\"\".concat(displayName, \"\\\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.\"), ' Use null|undefined|boolean for none.', \" Received: \".concat(value)].join(''));\n    }\n\n    if (!allowsJSX && valIsReactElement) {\n      /* eslint-disable-next-line no-console */\n      console.error([\"The shorthand prop for \\\"\".concat(displayName, \"\\\" component was passed a JSX element but this slot only supports string|number|object|array.\"), ' Use null|undefined|boolean for none.', \" Received: \".concat(value)].join(''));\n    }\n  } // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n\n\n  var defaultProps = options.defaultProps ? options.defaultProps() : {}; // User's props\n\n  var usersProps = valIsReactElement && {} || valIsPropsObject && value || {}; // Override props\n\n  var overrideProps = typeof options.overrideProps === 'function' ? options.overrideProps(Object.assign({}, defaultProps, {}, usersProps)) : options.overrideProps || {}; // Merge props\n\n  var props = Object.assign({}, defaultProps, {}, usersProps, {}, overrideProps);\n  var mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as]; // Map prop for primitive value\n\n  if (valIsPrimitive || valIsReactElement) {\n    props[mappedHTMLProps || mappedProp || 'children'] = value;\n  } // Map prop for array value\n\n\n  if (valIsArray) {\n    props[mappedHTMLProps || mappedArrayProp || 'children'] = value;\n  } // Merge className\n\n\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    var mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    props.className = _uniq(mergedClassesNames.split(' ')).join(' ');\n  } // Merge style\n\n\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    props.style = Object.assign({}, defaultProps.style, {}, usersProps.style, {}, overrideProps.style);\n  } // Merge styles\n\n\n  if (defaultProps.styles || overrideProps.styles || usersProps.styles) {\n    props.styles = mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);\n  } // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n\n\n  var _options$generateKey = options.generateKey,\n      generateKey = _options$generateKey === void 0 ? true : _options$generateKey; // Use key or generate key\n\n  if (generateKey && _isNil(props.key)) {\n    if (valIsPrimitive) {\n      // use string/number shorthand values as the key\n      props.key = value;\n    }\n\n    if (valIsReactElement) {\n      // use the key from React Element\n      var elementKey = value.key; // <div /> - key is not passed as will be `null`\n      // <div key={null} /> - key is passed as `null` and will be stringified\n\n      var isNullKey = elementKey === null;\n\n      if (!isNullKey) {\n        props.key = elementKey;\n      }\n    }\n  } // Remove the kind prop from the props object\n\n\n  delete props.kind; // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n\n  var render = options.render;\n\n  if (render) {\n    return render(Component, props);\n  }\n\n  if (typeof props.children === 'function') {\n    return props.children(Component, Object.assign({}, props, {\n      children: undefined\n    }));\n  }\n\n  if (!allowsJSX && valIsReactElement) {\n    return null;\n  } // Create ReactElements from built up props\n\n\n  if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {\n    return React.createElement(Component, props);\n  }\n\n  return null;\n}\n\nfunction createShorthandFromRenderCallback(_ref4) {\n  var Component = _ref4.Component,\n      renderCallback = _ref4.renderCallback,\n      mappedProp = _ref4.mappedProp,\n      mappedArrayProp = _ref4.mappedArrayProp,\n      allowsJSX = _ref4.allowsJSX,\n      options = _ref4.options;\n\n  var render = function render(shorthandValue, renderTree) {\n    return createShorthandFromValue({\n      Component: Component,\n      mappedProp: mappedProp,\n      mappedArrayProp: mappedArrayProp,\n      allowsJSX: allowsJSX,\n      value: shorthandValue,\n      options: Object.assign({}, options, {}, renderTree && {\n        render: renderTree\n      })\n    });\n  };\n\n  return renderCallback(render);\n}","map":{"version":3,"sources":["utils/factories.ts"],"names":["mappedProps","iframe","img","input","allowsJSX","Component","mappedProp","mappedArrayProp","valueOrRenderCallback","options","valIsRenderFunction","React","process","console","createShorthandFromRenderCallback","renderCallback","createShorthandFromValue","value","createShorthand","valIsNoop","valIsPrimitive","valIsPropsObject","valIsArray","valIsReactElement","displayName","defaultProps","usersProps","overrideProps","props","mappedHTMLProps","mergedClassesNames","cx","mergeStyles","generateKey","elementKey","isNullKey","render","children","undefined","renderTree"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  ShorthandValue,\n  Props,\n  PropsOf,\n  ShorthandRenderCallback,\n  ShorthandRenderFunction,\n  ShorthandRenderer,\n} from '../types';\nimport { mergeStyles } from '@fluentui/styles';\n\ntype HTMLTag = 'iframe' | 'img' | 'input';\ntype ShorthandProp = 'children' | 'src' | 'type';\n\ninterface CreateShorthandOptions<P> {\n  /** Default props object */\n  defaultProps?: () => Partial<Props<P>>;\n\n  /** Override props object or function (called with regular props) */\n  overrideProps?: Partial<Props<P>> | ((props: P) => Partial<Props<P>>);\n\n  /** Whether or not automatic key generation is allowed */\n  generateKey?: boolean;\n\n  /** Override the default render implementation. */\n  render?: ShorthandRenderFunction<P>;\n}\n\n// It's only necessary to map props that don't use 'children' as value ('children' is the default)\nconst mappedProps: { [key in HTMLTag]: ShorthandProp } = {\n  iframe: 'src',\n  img: 'src',\n  input: 'type',\n};\n\n// ============================================================\n// Factories\n// ============================================================\n\n/** A more robust React.createElement. It can create elements from primitive values. */\nexport function createShorthand<P>({\n  allowsJSX,\n  Component,\n  mappedProp,\n  mappedArrayProp,\n  valueOrRenderCallback,\n  options = {},\n}: {\n  Component: React.ElementType;\n  allowsJSX?: boolean;\n  mappedProp?: string;\n  mappedArrayProp?: string;\n  valueOrRenderCallback?: ShorthandValue<P> | ShorthandRenderCallback<P>;\n  options?: CreateShorthandOptions<P>;\n}): React.ReactElement<Props> | null | undefined {\n  const valIsRenderFunction =\n    typeof valueOrRenderCallback === 'function' && !React.isValidElement(valueOrRenderCallback);\n  if (valIsRenderFunction) {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        [\n          '@fluentui/react-northstar:',\n          'The usage of render callback is deprecated and will be removed soon. Please use render props for shorthands instead.',\n          'See: https://microsoft.github.io/fluent-ui-react/shorthand-props',\n        ].join(' '),\n      );\n    }\n\n    return createShorthandFromRenderCallback({\n      allowsJSX,\n      Component,\n      renderCallback: valueOrRenderCallback as ShorthandRenderCallback<P>,\n      mappedProp,\n      mappedArrayProp,\n      options,\n    });\n  }\n\n  return createShorthandFromValue({\n    allowsJSX,\n    Component,\n    mappedProp,\n    mappedArrayProp,\n    value: valueOrRenderCallback as ShorthandValue<Props>,\n    options,\n  });\n}\n\nexport type ShorthandFactory<P> = (\n  value: ShorthandValue<P>,\n  options?: CreateShorthandOptions<P>,\n) => React.ReactElement | null | undefined;\n// ============================================================\n// Factory Creators\n// ============================================================\n/**\n * @param config - Options passed to factory\n * @returns A shorthand factory function waiting for `val` and `defaultProps`.\n */\nexport function createShorthandFactory<TStringElement extends keyof JSX.IntrinsicElements, P>(config: {\n  /** A ReactClass or string */\n  Component: TStringElement;\n  /** A function that maps a primitive value to the Component props */\n  mappedProp?: keyof PropsOf<TStringElement>;\n  /** A function that maps an array value to the Component props */\n  mappedArrayProp?: keyof PropsOf<TStringElement>;\n  /** Indicates if factory supports React Elements */\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TFunctionComponent extends React.FunctionComponent, P>(config: {\n  Component: TFunctionComponent;\n  mappedProp?: keyof PropsOf<TFunctionComponent>;\n  mappedArrayProp?: keyof PropsOf<TFunctionComponent>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<TInstance extends React.Component, P>(config: {\n  Component: { new (...args: any[]): TInstance };\n  mappedProp?: keyof PropsOf<TInstance>;\n  mappedArrayProp?: keyof PropsOf<TInstance>;\n  allowsJSX?: boolean;\n}): ShorthandFactory<P>;\nexport function createShorthandFactory<P>({ Component, mappedProp, mappedArrayProp, allowsJSX }) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthandFactory() Component must be a string or function.');\n  }\n\n  return (val, options: CreateShorthandOptions<P>) =>\n    createShorthand({\n      Component,\n      mappedProp,\n      mappedArrayProp,\n      allowsJSX,\n      valueOrRenderCallback: val,\n      options,\n    });\n}\n\n// ============================================================\n// Private Utils\n// ============================================================\n\nfunction createShorthandFromValue<P>({\n  Component,\n  mappedProp,\n  mappedArrayProp,\n  value,\n  options,\n  allowsJSX = true,\n}: {\n  Component: React.ElementType;\n  mappedProp?: string;\n  mappedArrayProp?: string;\n  allowsJSX?: boolean;\n  value?: ShorthandValue<P>;\n  options?: CreateShorthandOptions<P>;\n}) {\n  if (typeof Component !== 'function' && typeof Component !== 'string') {\n    throw new Error('createShorthand() Component must be a string or function.');\n  }\n  // short circuit noop values\n  const valIsNoop = _.isNil(value) || typeof value === 'boolean';\n  if (valIsNoop && !options.render) return null;\n\n  const valIsPrimitive = typeof value === 'string' || typeof value === 'number';\n  const valIsPropsObject = _.isPlainObject(value);\n  const valIsArray = _.isArray(value);\n  const valIsReactElement = React.isValidElement(value);\n\n  // unhandled type warning\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = typeof Component === 'string' ? Component : Component.displayName;\n\n    if (!valIsPrimitive && !valIsPropsObject && !valIsArray && !valIsReactElement && !valIsNoop) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array|ReactElements.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n\n    if (!allowsJSX && valIsReactElement) {\n      /* eslint-disable-next-line no-console */\n      console.error(\n        [\n          `The shorthand prop for \"${displayName}\" component was passed a JSX element but this slot only supports string|number|object|array.`,\n          ' Use null|undefined|boolean for none.',\n          ` Received: ${value}`,\n        ].join(''),\n      );\n    }\n  }\n\n  // ----------------------------------------\n  // Build up props\n  // ----------------------------------------\n  const defaultProps = options.defaultProps ? options.defaultProps() : ({} as Props<P>);\n\n  // User's props\n  const usersProps =\n    (valIsReactElement && ({} as Props<P>)) || (valIsPropsObject && (value as Props<P>)) || ({} as Props<P>);\n\n  // Override props\n  const overrideProps: Props<P> =\n    typeof options.overrideProps === 'function'\n      ? (options.overrideProps({ ...defaultProps, ...usersProps }) as Props<P>)\n      : (options.overrideProps as Props<P>) || ({} as Props<P>);\n\n  // Merge props\n  const props: Props<P> = { ...defaultProps, ...usersProps, ...overrideProps };\n\n  const mappedHTMLProps = mappedProps[overrideProps.as || defaultProps.as];\n\n  // Map prop for primitive value\n  if (valIsPrimitive || valIsReactElement) {\n    (props as any)[mappedHTMLProps || mappedProp || 'children'] = value;\n  }\n\n  // Map prop for array value\n  if (valIsArray) {\n    (props as any)[mappedHTMLProps || mappedArrayProp || 'children'] = value;\n  }\n\n  // Merge className\n  if (defaultProps.className || overrideProps.className || usersProps.className) {\n    const mergedClassesNames = cx(defaultProps.className, overrideProps.className, usersProps.className);\n    (props as any).className = _.uniq(mergedClassesNames.split(' ')).join(' ');\n  }\n\n  // Merge style\n  if (defaultProps.style || overrideProps.style || usersProps.style) {\n    (props as any).style = { ...defaultProps.style, ...usersProps.style, ...overrideProps.style };\n  }\n\n  // Merge styles\n  if (defaultProps.styles || overrideProps.styles || usersProps.styles) {\n    (props as any).styles = mergeStyles(defaultProps.styles, usersProps.styles, overrideProps.styles);\n  }\n\n  // ----------------------------------------\n  // Get key\n  // ----------------------------------------\n  const { generateKey = true } = options;\n\n  // Use key or generate key\n  if (generateKey && _.isNil(props.key)) {\n    if (valIsPrimitive) {\n      // use string/number shorthand values as the key\n      (props as any).key = value;\n    }\n\n    if (valIsReactElement) {\n      // use the key from React Element\n      const elementKey = (value as React.ReactElement).key;\n      // <div /> - key is not passed as will be `null`\n      // <div key={null} /> - key is passed as `null` and will be stringified\n      const isNullKey = elementKey === null;\n\n      if (!isNullKey) {\n        (props as any).key = elementKey;\n      }\n    }\n  }\n\n  // Remove the kind prop from the props object\n  delete props.kind;\n\n  // ----------------------------------------\n  // Create Element\n  // ----------------------------------------\n  const { render } = options;\n  if (render) {\n    return render(Component, props);\n  }\n\n  if (typeof props.children === 'function') {\n    return props.children(Component, { ...props, children: undefined });\n  }\n\n  if (!allowsJSX && valIsReactElement) {\n    return null;\n  }\n\n  // Create ReactElements from built up props\n  if (valIsPrimitive || valIsPropsObject || valIsArray || valIsReactElement) {\n    return React.createElement(Component, props);\n  }\n\n  return null;\n}\n\nfunction createShorthandFromRenderCallback<P>({\n  Component,\n  renderCallback,\n  mappedProp,\n  mappedArrayProp,\n  allowsJSX,\n  options,\n}: {\n  Component: React.ReactType;\n  renderCallback: ShorthandRenderCallback<P>;\n  mappedProp?: string;\n  mappedArrayProp?: string;\n  allowsJSX?: boolean;\n  options?: CreateShorthandOptions<P>;\n}) {\n  const render: ShorthandRenderer<P> = (shorthandValue, renderTree) => {\n    return createShorthandFromValue({\n      Component,\n      mappedProp,\n      mappedArrayProp,\n      allowsJSX,\n      value: shorthandValue,\n      options: {\n        ...options,\n        ...(renderTree && { render: renderTree }),\n      },\n    });\n  };\n\n  return renderCallback(render);\n}\n"]},"metadata":{},"sourceType":"module"}