{"ast":null,"code":"import _keys from \"lodash/keys\";\nimport _invoke from \"lodash/invoke\";\nimport { AutoFocusZone, FocusTrapZone, getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { getBasePlacement } from '../../utils/positioner';\n\nvar PopupContent = function PopupContent(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(PopupContent.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      autoFocus = props.autoFocus,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      placement = props.placement,\n      pointing = props.pointing,\n      pointerRef = props.pointerRef,\n      styles = props.styles,\n      trapFocus = props.trapFocus,\n      variables = props.variables;\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: PopupContent.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(PopupContent.displayName, {\n    className: PopupContent.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        basePlacement: getBasePlacement(placement, context.rtl),\n        pointing: pointing\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(PopupContent.handledProps, props);\n\n  var handleMouseEnter = function handleMouseEnter(e) {\n    _invoke(props, 'onMouseEnter', e, props);\n  };\n\n  var handleMouseLeave = function handleMouseLeave(e) {\n    _invoke(props, 'onMouseLeave', e, props);\n  };\n\n  var popupContentProps = getA11yProps('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps, {\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  }));\n  var popupContent = React.createElement(React.Fragment, null, pointing && React.createElement(\"div\", {\n    className: classes.pointer,\n    ref: pointerRef\n  }), React.createElement(\"div\", {\n    className: cx(PopupContent.slotClassNames.content, classes.content)\n  }, childrenExist(children) ? children : content));\n  var element;\n\n  if (trapFocus) {\n    var focusTrapZoneProps = Object.assign({}, popupContentProps, {}, _keys(trapFocus).length && trapFocus, {\n      as: ElementType\n    });\n    element = React.createElement(FocusTrapZone, focusTrapZoneProps, popupContent);\n  } else if (autoFocus) {\n    var autoFocusZoneProps = Object.assign({}, popupContentProps, {}, _keys(autoFocus).length && autoFocus, {\n      as: ElementType\n    });\n    element = React.createElement(AutoFocusZone, autoFocusZoneProps, popupContent);\n  } else {\n    element = React.createElement(ElementType, popupContentProps, popupContent);\n  }\n\n  setEnd();\n  return element;\n};\n\nPopupContent.displayName = 'PopupContent';\nPopupContent.className = 'ui-popup__content';\nPopupContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  placement: PropTypes.oneOf(['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']),\n  pointing: PropTypes.bool,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pointerRef: customPropTypes.ref,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\n});\nPopupContent.handledProps = Object.keys(PopupContent.propTypes);\nPopupContent.slotClassNames = {\n  content: \"\".concat(PopupContent.className, \"__content\")\n};\nPopupContent.create = createShorthandFactory({\n  Component: PopupContent,\n  mappedProp: 'content'\n});\n/**\n * A PopupContent displays the content of a Popup component.\n */\n\nexport default withSafeTypeForAs(PopupContent);","map":{"version":3,"sources":["components/Popup/PopupContent.tsx"],"names":["PopupContent","context","React","setStart","setEnd","useTelemetry","accessibility","autoFocus","children","className","content","design","placement","pointing","pointerRef","styles","trapFocus","variables","props","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToStyles","basePlacement","getBasePlacement","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","handleMouseEnter","handleMouseLeave","popupContentProps","root","forElements","onMouseEnter","onMouseLeave","popupContent","cx","childrenExist","focusTrapZoneProps","as","element","autoFocusZoneProps","commonPropTypes","PropTypes","customPropTypes","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport {\n  AutoFocusZone,\n  AutoFocusZoneProps,\n  FocusTrapZone,\n  FocusTrapZoneProps,\n  getElementType,\n  useAccessibility,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport Popper from 'popper.js';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport { getBasePlacement, PopperChildrenProps } from '../../utils/positioner';\n\nexport interface PopupContentSlotClassNames {\n  content: string;\n}\n\nexport interface PopupContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n\n  /**\n   * Called after user's mouse enter.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseEnter?: ComponentEventHandler<PopupContentProps>;\n\n  /**\n   * Called after user's mouse leave.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMouseLeave?: ComponentEventHandler<PopupContentProps>;\n\n  /** An actual placement value from Popper. */\n  placement?: PopperChildrenProps['placement'];\n\n  /** A popup can show a pointer to trigger. */\n  pointing?: boolean;\n\n  /** A ref to a pointer element. */\n  pointerRef?: React.Ref<HTMLDivElement>;\n\n  /** Controls whether or not focus trap should be applied, using boolean or FocusTrapZoneProps type value. */\n  trapFocus?: boolean | FocusTrapZoneProps;\n\n  /** Controls whether or not auto focus should be applied, using boolean or AutoFocusZoneProps type value. */\n  autoFocus?: boolean | AutoFocusZoneProps;\n}\n\nexport type PopupContentStylesProps = Required<Pick<PopupContentProps, 'pointing'>> & {\n  basePlacement: Popper.Position;\n};\n\nconst PopupContent: React.FC<WithAsProp<PopupContentProps>> &\n  FluentComponentStaticProps<PopupContentProps> & { slotClassNames: PopupContentSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(PopupContent.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    autoFocus,\n    children,\n    className,\n    content,\n    design,\n    placement,\n    pointing,\n    pointerRef,\n    styles,\n    trapFocus,\n    variables,\n  } = props;\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: PopupContent.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<PopupContentStylesProps>(PopupContent.displayName, {\n    className: PopupContent.className,\n    mapPropsToStyles: () => ({\n      basePlacement: getBasePlacement(placement, context.rtl),\n      pointing,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(PopupContent.handledProps, props);\n\n  const handleMouseEnter = e => {\n    _.invoke(props, 'onMouseEnter', e, props);\n  };\n\n  const handleMouseLeave = e => {\n    _.invoke(props, 'onMouseLeave', e, props);\n  };\n\n  const popupContentProps: PopupContentProps = getA11yProps('root', {\n    className: classes.root,\n    ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n    ...unhandledProps,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n  });\n  const popupContent = (\n    <>\n      {pointing && <div className={classes.pointer} ref={pointerRef} />}\n      <div className={cx(PopupContent.slotClassNames.content, classes.content)}>\n        {childrenExist(children) ? children : content}\n      </div>\n    </>\n  );\n\n  let element: React.ReactElement;\n\n  if (trapFocus) {\n    const focusTrapZoneProps = {\n      ...popupContentProps,\n      ...((_.keys(trapFocus).length && trapFocus) as FocusTrapZoneProps),\n      as: ElementType,\n    };\n    element = <FocusTrapZone {...focusTrapZoneProps}>{popupContent}</FocusTrapZone>;\n  } else if (autoFocus) {\n    const autoFocusZoneProps = {\n      ...popupContentProps,\n      ...((_.keys(autoFocus).length && autoFocus) as AutoFocusZoneProps),\n      as: ElementType,\n    };\n    element = <AutoFocusZone {...autoFocusZoneProps}>{popupContent}</AutoFocusZone>;\n  } else {\n    element = <ElementType {...popupContentProps}>{popupContent}</ElementType>;\n  }\n\n  setEnd();\n\n  return element;\n};\n\nPopupContent.displayName = 'PopupContent';\nPopupContent.className = 'ui-popup__content';\n\nPopupContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  placement: PropTypes.oneOf<Popper.Placement>([\n    'auto-start',\n    'auto',\n    'auto-end',\n    'top-start',\n    'top',\n    'top-end',\n    'right-start',\n    'right',\n    'right-end',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'left-end',\n    'left',\n    'left-start',\n  ]),\n  pointing: PropTypes.bool,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  pointerRef: customPropTypes.ref,\n  trapFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n};\nPopupContent.handledProps = Object.keys(PopupContent.propTypes) as any;\n\nPopupContent.slotClassNames = {\n  content: `${PopupContent.className}__content`,\n};\n\nPopupContent.create = createShorthandFactory({ Component: PopupContent, mappedProp: 'content' });\n\n/**\n * A PopupContent displays the content of a Popup component.\n */\nexport default withSafeTypeForAs<typeof PopupContent, PopupContentProps>(PopupContent);\n"]},"metadata":{},"sourceType":"module"}