{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createShorthandFactory, UIComponent, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar Video = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Video, _UIComponent);\n\n  function Video() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Video);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Video)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"videoRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"setVideoAttributes\", function () {\n      // React doesn't guaranty that props will be set:\n      // https://github.com/facebook/react/issues/10389\n      if (_this.videoRef.current) {\n        _this.videoRef.current.muted = !!_this.props.muted;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Video, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setVideoAttributes();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.setVideoAttributes();\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          controls = _this$props.controls,\n          autoPlay = _this$props.autoPlay,\n          loop = _this$props.loop,\n          poster = _this$props.poster,\n          src = _this$props.src;\n      return React.createElement(Ref, {\n        innerRef: this.videoRef\n      }, React.createElement(ElementType, _extends({\n        autoPlay: autoPlay,\n        className: classes.root,\n        controls: controls,\n        loop: loop,\n        poster: poster,\n        src: src\n      }, accessibility.attributes.root, unhandledProps)));\n    }\n  }]);\n\n  return Video;\n}(UIComponent);\n\n_defineProperty(Video, \"create\", void 0);\n\n_defineProperty(Video, \"className\", 'ui-video');\n\n_defineProperty(Video, \"displayName\", 'Video');\n\n_defineProperty(Video, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  autoPlay: PropTypes.bool,\n  controls: PropTypes.bool,\n  loop: PropTypes.bool,\n  muted: PropTypes.bool,\n  poster: PropTypes.string,\n  src: PropTypes.string\n}));\n\n_defineProperty(Video, \"defaultProps\", {\n  as: 'video',\n  controls: true,\n  autoPlay: false,\n  muted: false\n});\n\nVideo.create = createShorthandFactory({\n  Component: Video,\n  mappedProp: 'src'\n});\n/**\n * A Video provides ability to embed video content.\n */\n\nexport default withSafeTypeForAs(Video);","map":{"version":3,"sources":["components/Video/Video.tsx"],"names":["Video","UIComponent","children","content","autoPlay","PropTypes","bool","controls","loop","muted","poster","string","src","as","React","accessibility","ElementType","classes","unhandledProps","videoRef","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;;;;;;;AAAA,SAAA,GAAA,QAAA,+BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,sBAAA,EAAA,WAAA,EAAA,eAAA,QAAA,aAAA;AAEA,SAAA,iBAAA,QAAA,aAAA;;IAsBMA,K;;;;;;;;;;;;;;;;+DA2BOc,KAAK,CAALA,SAAAA,E;;yEAUU,YAAM;AACzB;AACA;AACA,UAAI,KAAA,CAAA,QAAA,CAAJ,OAAA,EAA2B;AACzB,QAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,KAAA,GAA8B,CAAC,CAAC,KAAA,CAAA,KAAA,CAAhC,KAAA;AACD;;;;;;;;wCAbiB;AAClB,WAAA,kBAAA;AACD;;;yCAEoB;AACnB,WAAA,kBAAA;AACD;;;0CAUwE;AAAA,UAAvDC,aAAuD,GAAA,IAAA,CAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,GAAA,IAAA,CAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,GAAA,IAAA,CAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAAA,UAAA,WAAA,GACrB,KADqB,KAAA;AAAA,UAC/DX,QAD+D,GAAA,WAAA,CAAA,QAAA;AAAA,UACrDH,QADqD,GAAA,WAAA,CAAA,QAAA;AAAA,UAC3CI,IAD2C,GAAA,WAAA,CAAA,IAAA;AAAA,UACrCE,MADqC,GAAA,WAAA,CAAA,MAAA;AAAA,UAC7BE,GAD6B,GAAA,WAAA,CAAA,GAAA;AAGvE,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,QAAA,QAAQ,EAAE,KAAKO;AAApB,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,QAAQ,EADV,QAAA;AAEE,QAAA,SAAS,EAAEF,OAAO,CAFpB,IAAA;AAGE,QAAA,QAAQ,EAHV,QAAA;AAIE,QAAA,IAAI,EAJN,IAAA;AAKE,QAAA,MAAM,EALR,MAAA;AAME,QAAA,GAAG,EAAEL;AANP,OAAA,EAOMG,aAAa,CAAbA,UAAAA,CAPN,IAAA,EAFJ,cAEI,CAAA,CADF,CADF;AAcD;;;;EA9DiBd,W;;gBAAdD,K;;gBAAAA,K,eAGe,U;;gBAHfA,K,iBAKiB,O;;gBALjBA,K,iCAQC,eAAe,CAAf,YAAA,CAA6B;AAC9BE,EAAAA,QAAQ,EADsB,KAAA;AAE9BC,EAAAA,OAAO,EAAE;AAFqB,CAA7B,C;AAIHC,EAAAA,QAAQ,EAAEC,SAAS,CAACC,I;AACpBC,EAAAA,QAAQ,EAAEF,SAAS,CAACC,I;AACpBE,EAAAA,IAAI,EAAEH,SAAS,CAACC,I;AAChBG,EAAAA,KAAK,EAAEJ,SAAS,CAACC,I;AACjBI,EAAAA,MAAM,EAAEL,SAAS,CAACM,M;AAClBC,EAAAA,GAAG,EAAEP,SAAS,CAACM;;;gBAjBbX,K,kBAoBkB;AACpBa,EAAAA,EAAE,EADkB,OAAA;AAEpBN,EAAAA,QAAQ,EAFY,IAAA;AAGpBH,EAAAA,QAAQ,EAHY,KAAA;AAIpBK,EAAAA,KAAK,EAAE;AAJa,C;;AA6CxBT,KAAK,CAALA,MAAAA,GAAeoB,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,KAAA;AAAoBC,EAAAA,UAAU,EAAE;AAAhC,CAAD,CAArCtB;AAEA;;;;AAGA,eAAeuB,iBAAiB,CAAhC,KAAgC,CAAhC","sourcesContent":["import { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport { createShorthandFactory, UIComponent, UIComponentProps, commonPropTypes, ShorthandFactory } from '../../utils';\n\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface VideoProps extends UIComponentProps {\n  /** Whether the video should start playing when rendered. Autoplay videos must be muted or they will not play immediately in certain browers like Chrome. */\n  autoPlay?: boolean;\n\n  /** Whether to display the native video controls. */\n  controls?: boolean;\n\n  /** Whether the video should automatically restart after it ends. */\n  loop?: boolean;\n\n  /** Whether the video should be allowed to play audio. */\n  muted?: boolean;\n\n  /** Image source URL for when video isn't playing. */\n  poster?: string;\n\n  /** Video source URL. */\n  src?: string;\n}\n\nclass Video extends UIComponent<WithAsProp<VideoProps>> {\n  static create: ShorthandFactory<VideoProps>;\n\n  static className = 'ui-video';\n\n  static displayName = 'Video';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    autoPlay: PropTypes.bool,\n    controls: PropTypes.bool,\n    loop: PropTypes.bool,\n    muted: PropTypes.bool,\n    poster: PropTypes.string,\n    src: PropTypes.string,\n  };\n\n  static defaultProps = {\n    as: 'video',\n    controls: true,\n    autoPlay: false,\n    muted: false,\n  };\n\n  videoRef = React.createRef<HTMLVideoElement>();\n\n  componentDidMount() {\n    this.setVideoAttributes();\n  }\n\n  componentDidUpdate() {\n    this.setVideoAttributes();\n  }\n\n  setVideoAttributes = () => {\n    // React doesn't guaranty that props will be set:\n    // https://github.com/facebook/react/issues/10389\n    if (this.videoRef.current) {\n      this.videoRef.current.muted = !!this.props.muted;\n    }\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { controls, autoPlay, loop, poster, src } = this.props;\n\n    return (\n      <Ref innerRef={this.videoRef}>\n        <ElementType\n          autoPlay={autoPlay}\n          className={classes.root}\n          controls={controls}\n          loop={loop}\n          poster={poster}\n          src={src}\n          {...accessibility.attributes.root}\n          {...unhandledProps}\n        />\n      </Ref>\n    );\n  }\n}\n\nVideo.create = createShorthandFactory({ Component: Video, mappedProp: 'src' });\n\n/**\n * A Video provides ability to embed video content.\n */\nexport default withSafeTypeForAs<typeof Video, VideoProps, 'video'>(Video);\n"]},"metadata":{},"sourceType":"module"}