{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar Divider = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Divider, _UIComponent);\n\n  function Divider() {\n    _classCallCheck(this, Divider);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Divider).apply(this, arguments));\n  }\n\n  _createClass(Divider, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          children = _this$props.children,\n          content = _this$props.content;\n      return React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n        forElements: [children, content]\n      }), accessibility.attributes.root, unhandledProps, {\n        className: classes.root\n      }), childrenExist(children) ? children : content);\n    }\n  }]);\n\n  return Divider;\n}(UIComponent);\n\n_defineProperty(Divider, \"displayName\", 'Divider');\n\n_defineProperty(Divider, \"create\", void 0);\n\n_defineProperty(Divider, \"className\", 'ui-divider');\n\n_defineProperty(Divider, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  color: true\n}), {\n  fitted: PropTypes.bool,\n  size: PropTypes.number,\n  important: PropTypes.bool,\n  vertical: PropTypes.bool\n}));\n\n_defineProperty(Divider, \"defaultProps\", {\n  size: 0\n});\n\nDivider.create = createShorthandFactory({\n  Component: Divider,\n  mappedProp: 'content'\n});\n/**\n * A Divider visually segments content.\n */\n\nexport default withSafeTypeForAs(Divider);","map":{"version":3,"sources":["components/Divider/Divider.tsx"],"names":["Divider","UIComponent","color","fitted","PropTypes","bool","size","number","important","vertical","accessibility","ElementType","classes","unhandledProps","children","content","forElements","root","childrenExist","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;;;;;;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,SAAA,aAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAaA,SAAA,iBAAA,QAAA,aAAA;;IAyBMA,O;;;;;;;;;;;0CAmBqE;AAAA,UAAvDU,aAAuD,GAAA,IAAA,CAAvDA,aAAuD;AAAA,UAAxCC,WAAwC,GAAA,IAAA,CAAxCA,WAAwC;AAAA,UAA3BC,OAA2B,GAAA,IAAA,CAA3BA,OAA2B;AAAA,UAAlBC,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAAA,UAAA,WAAA,GACzC,KADyC,KAAA;AAAA,UAC/DC,QAD+D,GAAA,WAAA,CAAA,QAAA;AAAA,UACrDC,OADqD,GAAA,WAAA,CAAA,OAAA;AAGvE,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,OAA/B,CADN,EAEMN,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAAA,cAAA,EAAA;AAIE,QAAA,SAAS,EAAEE,OAAO,CAACK;AAJrB,OAAA,CAAA,EAMGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAPL,OACE,CADF;AAUD;;;;EAhCmBjB,W;;gBAAhBD,O,iBACiB,S;;gBADjBA,O;;gBAAAA,O,eAKe,Y;;gBALfA,O,iCAQC,eAAe,CAAf,YAAA,CAA6B;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAA7B,C;AACHC,EAAAA,MAAM,EAAEC,SAAS,CAACC,I;AAClBC,EAAAA,IAAI,EAAEF,SAAS,CAACG,M;AAChBC,EAAAA,SAAS,EAAEJ,SAAS,CAACC,I;AACrBI,EAAAA,QAAQ,EAAEL,SAAS,CAACC;;;gBAZlBL,O,kBAekB;AACpBM,EAAAA,IAAI,EAAE;AADc,C;;AAoBxBN,OAAO,CAAPA,MAAAA,GAAiBmB,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAX,OAAA;AAAsBC,EAAAA,UAAU,EAAE;AAAlC,CAAD,CAAvCrB;AAEA;;;;AAGA,eAAesB,iBAAiB,CAAhC,OAAgC,CAAhC","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ColorComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\n\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface DividerProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ColorComponentProps,\n    ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** A divider can be fitted, without any space above or below it. */\n  fitted?: boolean;\n\n  /** A divider can be resized using this multiplier. (default: 0) */\n  size?: number;\n\n  /** A divider can be emphasized to draw a user's attention. */\n  important?: boolean;\n\n  /** A divider can be positioned vertically. */\n  vertical?: boolean;\n}\n\nclass Divider extends UIComponent<WithAsProp<DividerProps>, any> {\n  static displayName = 'Divider';\n\n  static create: ShorthandFactory<DividerProps>;\n\n  static className = 'ui-divider';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ color: true }),\n    fitted: PropTypes.bool,\n    size: PropTypes.number,\n    important: PropTypes.bool,\n    vertical: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    size: 0,\n  };\n\n  renderComponent({ accessibility, ElementType, classes, unhandledProps }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n}\n\nDivider.create = createShorthandFactory({ Component: Divider, mappedProp: 'content' });\n\n/**\n * A Divider visually segments content.\n */\nexport default withSafeTypeForAs<typeof Divider, DividerProps>(Divider);\n"]},"metadata":{},"sourceType":"module"}