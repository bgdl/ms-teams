{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useStyles, useTelemetry, getElementType, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar ButtonContent = function ButtonContent(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ButtonContent.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var size = props.size,\n      content = props.content,\n      children = props.children,\n      className = props.className,\n      styles = props.styles,\n      variables = props.variables,\n      design = props.design;\n\n  var _useStyles = useStyles(ButtonContent.displayName, {\n    className: ButtonContent.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        size: size\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        styles: styles,\n        variables: variables,\n        design: design\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ButtonContent.handledProps, props);\n  var result = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {\n    className: classes.root\n  }, unhandledProps), childrenExist(children) ? children : content);\n  setEnd();\n  return result;\n};\n\nButtonContent.displayName = 'ButtonContent';\nButtonContent.className = 'ui-button__content';\nButtonContent.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  size: customPropTypes.size\n});\nButtonContent.handledProps = Object.keys(ButtonContent.propTypes);\nButtonContent.create = createShorthandFactory({\n  Component: ButtonContent,\n  mappedProp: 'content'\n});\n/**\n * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.\n */\n\nexport default withSafeTypeForAs(ButtonContent);","map":{"version":3,"sources":["components/Button/ButtonContent.tsx"],"names":["ButtonContent","context","React","setStart","setEnd","useTelemetry","size","content","children","className","styles","variables","design","props","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","useUnhandledProps","result","forElements","root","childrenExist","commonPropTypes","customPropTypes","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,EAAA,YAAA,EAAA,cAAA,EAAA,iBAAA,QAAA,0BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAEA,SAAA,aAAA,EAAA,eAAA,EAAA,sBAAA,EAAA,gBAAA,QAAA,aAAA;AACA,SAAA,iBAAA,QAAA,aAAA;;AAUA,IAAMA,aAC0C,GAAG,SAD7CA,aAC6C,CAAA,KAAA,EAAS;AAC1D,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD0D,MAAA,aAAA,GAE7BG,YAAY,CAACL,aAAa,CAAd,WAAA,EAA4BC,OAAO,CAFlB,SAEjB,CAFiB;AAAA,MAElDE,QAFkD,GAAA,aAAA,CAAA,QAAA;AAAA,MAExCC,MAFwC,GAAA,aAAA,CAAA,MAAA;;AAG1DD,EAAAA,QAAQ;AAHkD,MAKlDG,IALkD,GAKgBO,KALhB,CAAA,IAAA;AAAA,MAK5CN,OAL4C,GAKgBM,KALhB,CAAA,OAAA;AAAA,MAKnCL,QALmC,GAKgBK,KALhB,CAAA,QAAA;AAAA,MAKzBJ,SALyB,GAKgBI,KALhB,CAAA,SAAA;AAAA,MAKdH,MALc,GAKgBG,KALhB,CAAA,MAAA;AAAA,MAKNF,SALM,GAKgBE,KALhB,CAAA,SAAA;AAAA,MAKKD,MALL,GAKgBC,KALhB,CAAA,MAAA;;AAAA,MAAA,UAAA,GAOtCE,SAAS,CAA2Bf,aAAa,CAAxC,WAAA,EAAsD;AACjFS,IAAAA,SAAS,EAAET,aAAa,CADyD,SAAA;AAEjFgB,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AAAEV,QAAAA,IAAI,EAAJA;AAAF,OAAP;AAF+D,KAAA;AAGjFW,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BR,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,SAAS,EAHoB,SAAA;AAI7BC,QAAAA,MAAM,EAANA;AAJ6B,OAAP;AAHyD,KAAA;AASjFM,IAAAA,GAAG,EAAEjB,OAAO,CAACiB;AAToE,GAAtD,CAP6B;AAAA,MAOlDJ,OAPkD,GAAA,UAAA,CAAA,OAAA;;AAmB1D,MAAMK,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACtB,aAAa,CAAd,YAAA,EAAxC,KAAwC,CAAxC;AAEA,MAAMuB,MAAM,GACV,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA,EAAA,EACM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,IAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,GAA/B,CADN,EAAA;AAEE,IAAA,SAAS,EAAEV,OAAO,CAACW;AAFrB,GAAA,EAAA,cAAA,CAAA,EAKGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GANL,OACE,CADF;AAUAtB,EAAAA,MAAM;AAEN,SAAA,MAAA;AAnCF,CAAA;;AAsCAJ,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACAA,aAAa,CAAbA,SAAAA,GAAAA,oBAAAA;AAEAA,aAAa,CAAbA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK2B,eAAe,CADpB3B,YACK2B,EADL3B,EAAAA;AAEEM,EAAAA,IAAI,EAAEsB,eAAe,CAACtB;AAFxBN,CAAAA,CAAAA;AAKAA,aAAa,CAAbA,YAAAA,GAA6B6B,MAAM,CAANA,IAAAA,CAAY7B,aAAa,CAAtDA,SAA6B6B,CAA7B7B;AAEAA,aAAa,CAAbA,MAAAA,GAAuB8B,sBAAsB,CAAC;AAC5CC,EAAAA,SAAS,EADmC,aAAA;AAE5CC,EAAAA,UAAU,EAAE;AAFgC,CAAD,CAA7ChC;AAKA;;;;AAGA,eAAeiC,iBAAiB,CAAhC,aAAgC,CAAhC","sourcesContent":["import * as React from 'react';\nimport { useStyles, useTelemetry, getElementType, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer } from '../../utils';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport { BoxProps } from '../Box/Box';\nimport { ButtonProps } from './Button';\n\nexport interface ButtonContentProps extends BoxProps {\n  size?: ButtonProps['size'];\n}\n\nexport type ButtonContentStylesProps = Pick<ButtonContentProps, 'size'>;\n\nconst ButtonContent: React.FC<WithAsProp<ButtonContentProps>> &\n  FluentComponentStaticProps<ButtonContentProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ButtonContent.displayName, context.telemetry);\n  setStart();\n\n  const { size, content, children, className, styles, variables, design } = props;\n\n  const { classes } = useStyles<ButtonContentStylesProps>(ButtonContent.displayName, {\n    className: ButtonContent.className,\n    mapPropsToStyles: () => ({ size }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ButtonContent.handledProps, props);\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n      className={classes.root}\n      {...unhandledProps}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nButtonContent.displayName = 'ButtonContent';\nButtonContent.className = 'ui-button__content';\n\nButtonContent.propTypes = {\n  ...commonPropTypes.createCommon(),\n  size: customPropTypes.size,\n};\n\nButtonContent.handledProps = Object.keys(ButtonContent.propTypes) as any;\n\nButtonContent.create = createShorthandFactory({\n  Component: ButtonContent,\n  mappedProp: 'content',\n});\n\n/**\n * A ButtonContent allows a user to have a dedicated component that can be targeted from the theme.\n */\nexport default withSafeTypeForAs<typeof ButtonContent, ButtonContentProps>(ButtonContent);\n"]},"metadata":{},"sourceType":"module"}