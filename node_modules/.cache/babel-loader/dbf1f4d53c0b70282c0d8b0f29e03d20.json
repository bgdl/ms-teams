{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _reduce from \"lodash/reduce\";\nimport { treeBehavior } from '@fluentui/accessibility';\nimport { getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\nimport TreeItem from './TreeItem';\nimport TreeTitle from './TreeTitle';\nimport { childrenExist, commonPropTypes, createShorthandFactory, rtlTextContainer, applyAccessibilityKeyHandlers, AutoControlledComponent } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext } from './utils';\n\nvar Tree = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Tree, _AutoControlledCompon);\n\n  function Tree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"treeRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"itemsRef\", new Map());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocusParent\", function (parent) {\n      var parentRef = _this.itemsRef.get(parent);\n\n      if (!parentRef || !parentRef.current) {\n        return;\n      }\n\n      parentRef.current.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTitleClick\", function (e, treeItemProps) {\n      if (!hasSubtree(treeItemProps)) {\n        return;\n      }\n\n      var activeItemIds = _this.state.activeItemIds;\n      var id = treeItemProps.id;\n      var _this$props = _this.props,\n          exclusive = _this$props.exclusive,\n          items = _this$props.items;\n      var siblings = getSiblings(items, id);\n      var activeItemIdIndex = activeItemIds.indexOf(id);\n\n      if (activeItemIdIndex > -1) {\n        activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n      } else {\n        if (exclusive) {\n          siblings.some(function (sibling) {\n            var activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n\n            if (activeSiblingIdIndex > -1) {\n              activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n              return true;\n            }\n\n            return false;\n          });\n        }\n\n        activeItemIds = [].concat(_toConsumableArray(activeItemIds), [id]);\n      }\n\n      _this.setActiveItemIds(e, activeItemIds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocusFirstChild\", function (itemId) {\n      var currentElement = _this.itemsRef.get(itemId);\n\n      if (!currentElement || !currentElement.current) {\n        return;\n      }\n\n      var elementToBeFocused = getNextElement(_this.treeRef.current, currentElement.current);\n\n      if (!elementToBeFocused) {\n        return;\n      }\n\n      elementToBeFocused.focus();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSiblingsExpand\", function (e, treeItemProps) {\n      var _this$props2 = _this.props,\n          exclusive = _this$props2.exclusive,\n          items = _this$props2.items;\n\n      if (exclusive) {\n        return;\n      }\n\n      var id = treeItemProps.id;\n      var activeItemIds = _this.state.activeItemIds;\n      var siblings = getSiblings(items, id);\n      siblings.forEach(function (sibling) {\n        if (hasSubtree(sibling) && !_this.isActiveItem(sibling['id'])) {\n          activeItemIds.push(sibling['id']);\n        }\n      });\n\n      if (hasSubtree(treeItemProps) && !_this.isActiveItem(id)) {\n        activeItemIds.push(id);\n      }\n\n      _this.setActiveItemIds(e, activeItemIds);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setActiveItemIds\", function (e, activeItemIds) {\n      _invoke(_this.props, 'onActiveItemIdsChange', e, Object.assign({}, _this.props, {\n        activeItemIds: activeItemIds\n      }));\n\n      _this.setState({\n        activeItemIds: activeItemIds\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"contextValue\", {\n      onFocusParent: _this.onFocusParent,\n      onSiblingsExpand: _this.onSiblingsExpand,\n      onFocusFirstChild: _this.onFocusFirstChild,\n      onTitleClick: _this.onTitleClick\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isActiveItem\", function (id) {\n      var activeItemIds = _this.state.activeItemIds;\n      return activeItemIds.indexOf(id) > -1;\n    });\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        activeItemIds: []\n      };\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(accessibility) {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          items = _this$props3.items,\n          renderItemTitle = _this$props3.renderItemTitle;\n      if (!items) return null;\n\n      var renderItems = function renderItems(items) {\n        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var parent = arguments.length > 2 ? arguments[2] : undefined;\n        return items.reduce(function (renderedItems, item, index) {\n          var itemId = item['id'];\n          var isSubtree = hasSubtree(item);\n\n          var isSubtreeExpanded = isSubtree && _this2.isActiveItem(itemId);\n\n          if (!_this2.itemsRef.has(itemId)) {\n            _this2.itemsRef.set(itemId, React.createRef());\n          }\n\n          var renderedItem = TreeItem.create(item, {\n            defaultProps: function defaultProps() {\n              return {\n                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n                className: Tree.slotClassNames.item,\n                expanded: isSubtreeExpanded,\n                renderItemTitle: renderItemTitle,\n                key: item['id'],\n                parent: parent,\n                level: level,\n                index: index + 1,\n                // Used for aria-posinset and it's 1-based.\n                contentRef: _this2.itemsRef.get(itemId),\n                treeSize: items.length\n              };\n            }\n          });\n          return [].concat(_toConsumableArray(renderedItems), [renderedItem], _toConsumableArray(isSubtreeExpanded ? renderItems(item['items'], level + 1, itemId) : []));\n        }, []);\n      };\n\n      return renderItems(items);\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props4 = this.props,\n          children = _this$props4.children,\n          renderedItems = _this$props4.renderedItems;\n      return React.createElement(TreeContext.Provider, {\n        value: this.contextValue\n      }, React.createElement(Ref, {\n        innerRef: this.treeRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : renderedItems ? renderedItems(this.renderContent(accessibility)) : this.renderContent(accessibility))));\n    }\n  }], [{\n    key: \"getAutoControlledStateFromProps\",\n    value: function getAutoControlledStateFromProps(nextProps, prevState) {\n      var items = nextProps.items;\n      var activeItemIds = nextProps.activeItemIds;\n\n      if (!activeItemIds && items) {\n        activeItemIds = prevState.activeItemIds;\n\n        var expandedItemsGenerator = function expandedItemsGenerator(items) {\n          var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : activeItemIds;\n          return _reduce(items, function (acc, item) {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          }, acc);\n        };\n\n        expandedItemsGenerator(items);\n      }\n\n      return {\n        activeItemIds: activeItemIds\n      };\n    }\n  }]);\n\n  return Tree;\n}(AutoControlledComponent);\n\n_defineProperty(Tree, \"create\", void 0);\n\n_defineProperty(Tree, \"displayName\", 'Tree');\n\n_defineProperty(Tree, \"className\", 'ui-tree');\n\n_defineProperty(Tree, \"slotClassNames\", {\n  item: \"\".concat(Tree.className, \"__item\")\n});\n\n_defineProperty(Tree, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  activeItemIds: customPropTypes.collectionShorthand,\n  defaultActiveItemIds: customPropTypes.collectionShorthand,\n  exclusive: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  onActiveItemIdsChange: PropTypes.func,\n  renderItemTitle: PropTypes.func,\n  renderedItems: PropTypes.func\n}));\n\n_defineProperty(Tree, \"defaultProps\", {\n  as: 'div',\n  accessibility: treeBehavior\n});\n\n_defineProperty(Tree, \"autoControlledProps\", ['activeItemIds']);\n\n_defineProperty(Tree, \"Item\", TreeItem);\n\n_defineProperty(Tree, \"Title\", TreeTitle);\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items'\n});\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs(Tree);","map":{"version":3,"sources":["components/Tree/Tree.tsx"],"names":["Tree","AutoControlledComponent","item","content","activeItemIds","customPropTypes","collectionShorthand","defaultActiveItemIds","exclusive","PropTypes","bool","items","onActiveItemIdsChange","func","renderItemTitle","renderedItems","as","accessibility","treeBehavior","TreeItem","TreeTitle","nextProps","prevState","expandedItemsGenerator","acc","React","parentRef","hasSubtree","id","treeItemProps","siblings","getSiblings","activeItemIdIndex","removeItemAtIndex","activeSiblingIdIndex","sibling","currentElement","elementToBeFocused","getNextElement","onFocusParent","onSiblingsExpand","onFocusFirstChild","onTitleClick","renderItems","level","parent","itemId","isSubtree","isSubtreeExpanded","renderedItem","defaultProps","className","expanded","key","index","contentRef","treeSize","length","ElementType","classes","unhandledProps","children","contextValue","treeRef","root","forElements","applyAccessibilityKeyHandlers","childrenExist","createShorthandFactory","Component","mappedArrayProp","withSafeTypeForAs"],"mappings":";;;;;;;;;;;AAAA,SAAA,YAAA,QAAA,yBAAA;AACA,SAAA,cAAA,QAAA,0BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AAEA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,GAAA,QAAA,+BAAA;AAEA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,SAAA,aAAA,EAAA,eAAA,EAAA,sBAAA,EAAA,gBAAA,EAAA,6BAAA,EAAA,uBAAA,QAAA,aAAA;AAWA,SAAA,iBAAA,QAAA,aAAA;AAQA,SAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,WAAA,QAAA,SAAA;;IA6DMA,I;;;;;;;;;;;;;;;;8DAsEMyB,KAAK,CAALA,SAAAA,E;;+DACC,IAAA,GAAA,E;;oEAEK,UAAA,MAAA,EAAoB;AAClC,UAAMC,SAAS,GAAG,KAAA,CAAA,QAAA,CAAA,GAAA,CAAlB,MAAkB,CAAlB;;AAEA,UAAI,CAAA,SAAA,IAAc,CAACA,SAAS,CAA5B,OAAA,EAAsC;AACpC;AACD;;AAEDA,MAAAA,SAAS,CAATA,OAAAA,CAAAA,KAAAA;;;mEAGa,UAAA,CAAA,EAAA,aAAA,EAA2D;AACxE,UAAI,CAACC,UAAU,CAAf,aAAe,CAAf,EAAgC;AAC9B;AACD;;AAHuE,UAKlEvB,aALkE,GAKhD,KAAA,CALgD,KAKhD,CALgD,aAAA;AAAA,UAMhEwB,EANgE,GAMzDC,aANyD,CAAA,EAAA;AAAA,UAAA,WAAA,GAO3C,KAAA,CAP2C,KAAA;AAAA,UAOhErB,SAPgE,GAAA,WAAA,CAAA,SAAA;AAAA,UAOrDG,KAPqD,GAAA,WAAA,CAAA,KAAA;AAQxE,UAAMmB,QAAQ,GAAGC,WAAW,CAAA,KAAA,EAA5B,EAA4B,CAA5B;AAEA,UAAMC,iBAAiB,GAAG5B,aAAa,CAAbA,OAAAA,CAA1B,EAA0BA,CAA1B;;AAEA,UAAI4B,iBAAiB,GAAG,CAAxB,CAAA,EAA4B;AAC1B5B,QAAAA,aAAa,GAAG6B,iBAAiB,CAAA,aAAA,EAAjC7B,iBAAiC,CAAjCA;AADF,OAAA,MAEO;AACL,YAAA,SAAA,EAAe;AACb0B,UAAAA,QAAQ,CAARA,IAAAA,CAAc,UAAA,OAAA,EAAW;AACvB,gBAAMI,oBAAoB,GAAG9B,aAAa,CAAbA,OAAAA,CAAsB+B,OAAO,CAA1D,IAA0D,CAA7B/B,CAA7B;;AACA,gBAAI8B,oBAAoB,GAAG,CAA3B,CAAA,EAA+B;AAC7B9B,cAAAA,aAAa,GAAG6B,iBAAiB,CAAA,aAAA,EAAjC7B,oBAAiC,CAAjCA;AAEA,qBAAA,IAAA;AACD;;AACD,mBAAA,KAAA;AAPF0B,WAAAA;AASD;;AAED1B,QAAAA,aAAa,GAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,EAAA,CAAbA,EAAa,CAAA,CAAbA;AACD;;AAED,MAAA,KAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,aAAA;;;wEAGkB,UAAA,MAAA,EAAoB;AACtC,UAAMgC,cAAc,GAAG,KAAA,CAAA,QAAA,CAAA,GAAA,CAAvB,MAAuB,CAAvB;;AAEA,UAAI,CAAA,cAAA,IAAmB,CAACA,cAAc,CAAtC,OAAA,EAAgD;AAC9C;AACD;;AAED,UAAMC,kBAAkB,GAAGC,cAAc,CAAC,KAAA,CAAA,OAAA,CAAD,OAAA,EAAuBF,cAAc,CAA9E,OAAyC,CAAzC;;AAEA,UAAI,CAAJ,kBAAA,EAAyB;AACvB;AACD;;AAEDC,MAAAA,kBAAkB,CAAlBA,KAAAA;;;uEAGiB,UAAA,CAAA,EAAA,aAAA,EAA2D;AAAA,UAAA,YAAA,GAC/C,KAAA,CAD+C,KAAA;AAAA,UACpE7B,SADoE,GAAA,YAAA,CAAA,SAAA;AAAA,UACzDG,KADyD,GAAA,YAAA,CAAA,KAAA;;AAE5E,UAAA,SAAA,EAAe;AACb;AACD;;AAJ2E,UAMpEiB,EANoE,GAM7DC,aAN6D,CAAA,EAAA;AAAA,UAOpEzB,aAPoE,GAOlD,KAAA,CAPkD,KAOlD,CAPkD,aAAA;AAQ5E,UAAM0B,QAAQ,GAAGC,WAAW,CAAA,KAAA,EAA5B,EAA4B,CAA5B;AAEAD,MAAAA,QAAQ,CAARA,OAAAA,CAAiB,UAAA,OAAA,EAAW;AAC1B,YAAIH,UAAU,CAAVA,OAAU,CAAVA,IAAuB,CAAC,KAAA,CAAA,YAAA,CAAkBQ,OAAO,CAArD,IAAqD,CAAzB,CAA5B,EAA8D;AAC5D/B,UAAAA,aAAa,CAAbA,IAAAA,CAAmB+B,OAAO,CAA1B/B,IAA0B,CAA1BA;AACD;AAHH0B,OAAAA;;AAMA,UAAIH,UAAU,CAAVA,aAAU,CAAVA,IAA6B,CAAC,KAAA,CAAA,YAAA,CAAlC,EAAkC,CAAlC,EAAyD;AACvDvB,QAAAA,aAAa,CAAbA,IAAAA,CAAAA,EAAAA;AACD;;AAED,MAAA,KAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,aAAA;;;uEAGiB,UAAA,CAAA,EAAA,aAAA,EAAsD;AACvE,MAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,uBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAsD,KAAA,CAAtD,KAAA,EAAA;AAAkEA,QAAAA,aAAa,EAAbA;AAAlE,OAAA,CAAA,CAAA;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc;AACZA,QAAAA,aAAa,EAAbA;AADY,OAAd;;;mEAKqC;AACrCmC,MAAAA,aAAa,EAAE,KAAA,CADsB,aAAA;AAErCC,MAAAA,gBAAgB,EAAE,KAAA,CAFmB,gBAAA;AAGrCC,MAAAA,iBAAiB,EAAE,KAAA,CAHkB,iBAAA;AAIrCC,MAAAA,YAAY,EAAE,KAAA,CAAKA;AAJkB,K;;mEA4ExB,UAAA,EAAA,EAAyB;AAAA,UAC9BtC,aAD8B,GACZ,KAAA,CADY,KACZ,CADY,aAAA;AAEtC,aAAOA,aAAa,CAAbA,OAAAA,CAAAA,EAAAA,IAA4B,CAAnC,CAAA;;;;;;;;oDA/K8B;AAC9B,aAAO;AAAEA,QAAAA,aAAa,EAAE;AAAjB,OAAP;AACD;;;kCAsGaa,a,EAAiE;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GAC1C,KAD0C,KAAA;AAAA,UACrEN,KADqE,GAAA,YAAA,CAAA,KAAA;AAAA,UAC9DG,eAD8D,GAAA,YAAA,CAAA,eAAA;AAG7E,UAAI,CAAJ,KAAA,EAAY,OAAA,IAAA;;AAEZ,UAAM6B,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAIO;AAAA,YAFzBC,KAEyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFjB,CAEiB;AAAA,YADzBC,MACyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AACzB,eAAO,KAAK,CAAL,MAAA,CAAa,UAAA,aAAA,EAAA,IAAA,EAAA,KAAA,EAA6F;AAC/G,cAAMC,MAAM,GAAG5C,IAAI,CAAnB,IAAmB,CAAnB;AACA,cAAM6C,SAAS,GAAGpB,UAAU,CAA5B,IAA4B,CAA5B;;AACA,cAAMqB,iBAAiB,GAAGD,SAAS,IAAI,MAAI,CAAJ,YAAA,CAAvC,MAAuC,CAAvC;;AAEA,cAAI,CAAC,MAAI,CAAJ,QAAA,CAAA,GAAA,CAAL,MAAK,CAAL,EAAgC;AAC9B,YAAA,MAAI,CAAJ,QAAA,CAAA,GAAA,CAAA,MAAA,EAA0BtB,KAAK,CAA/B,SAA0BA,EAA1B;AACD;;AAED,cAAMwB,YAAY,GAAG,QAAQ,CAAR,MAAA,CAAA,IAAA,EAAsB;AACzCC,YAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,qBAAO;AACnBjC,gBAAAA,aAAa,EAAEA,aAAa,CAAbA,cAAAA,GAA+BA,aAAa,CAAbA,cAAAA,CAA/BA,IAAAA,GADI,SAAA;AAEnBkC,gBAAAA,SAAS,EAAEnD,IAAI,CAAJA,cAAAA,CAFQ,IAAA;AAGnBoD,gBAAAA,QAAQ,EAHW,iBAAA;AAInBtC,gBAAAA,eAAe,EAJI,eAAA;AAKnBuC,gBAAAA,GAAG,EAAEnD,IAAI,CALU,IAKV,CALU;AAMnB2C,gBAAAA,MAAM,EANa,MAAA;AAOnBD,gBAAAA,KAAK,EAPc,KAAA;AAQnBU,gBAAAA,KAAK,EAAEA,KAAK,GARO,CAAA;AAQD;AAClBC,gBAAAA,UAAU,EAAE,MAAI,CAAJ,QAAA,CAAA,GAAA,CATO,MASP,CATO;AAUnBC,gBAAAA,QAAQ,EAAE7C,KAAK,CAAC8C;AAVG,eAAP;AAAA;AAD2B,WAAtB,CAArB;AAeA,iBAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,aAAA,CAAA,EAAA,CAAA,YAAA,CAAA,EAAA,kBAAA,CAGMT,iBAAiB,GAAGL,WAAW,CAACzC,IAAI,CAAL,OAAK,CAAL,EAAgB0C,KAAK,GAArB,CAAA,EAAd,MAAc,CAAd,GAHvB,EAAA,CAAA,CAAA;AAxBK,SAAA,EAAP,EAAO,CAAP;AALF,OAAA;;AAqCA,aAAOD,WAAW,CAAlB,KAAkB,CAAlB;AACD;;;0CAEwE;AAAA,UAAvDe,WAAuD,GAAA,IAAA,CAAvDA,WAAuD;AAAA,UAA1CC,OAA0C,GAAA,IAAA,CAA1CA,OAA0C;AAAA,UAAjC1C,aAAiC,GAAA,IAAA,CAAjCA,aAAiC;AAAA,UAAlB2C,cAAkB,GAAA,IAAA,CAAlBA,cAAkB;AAAA,UAAA,YAAA,GACnC,KADmC,KAAA;AAAA,UAC/DC,QAD+D,GAAA,YAAA,CAAA,QAAA;AAAA,UACrD9C,aADqD,GAAA,YAAA,CAAA,aAAA;AAGvE,aACE,KAAA,CAAA,aAAA,CAAC,WAAD,CAAA,QAAA,EAAA;AAAsB,QAAA,KAAK,EAAE,KAAK+C;AAAlC,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,QAAA,QAAQ,EAAE,KAAKC;AAApB,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,SAAS,EAAEJ,OAAO,CAACK;AADrB,OAAA,EAEM/C,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAGM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEgD,QAAAA,WAAW,EAAE,CAAA,QAAA;AAAf,OAA/B,CAHN,EAAA,cAAA,EAKMC,6BAA6B,CAACjD,aAAa,CAAbA,WAAAA,CAAD,IAAA,EALnC,cAKmC,CALnC,CAAA,EAOGkD,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAEGpD,aAAa,GACbA,aAAa,CAAC,KAAA,aAAA,CADD,aACC,CAAD,CADA,GAEb,KAAA,aAAA,CAdZ,aAcY,CAXN,CADF,CADF,CADF;AAmBD;;;oDA3MsCM,S,EAAsBC,S,EAAsB;AAAA,UACzEX,KADyE,GAC/DU,SAD+D,CAAA,KAAA;AAAA,UAE3EjB,aAF2E,GAEzDiB,SAFyD,CAAA,aAAA;;AAIjF,UAAI,CAAA,aAAA,IAAJ,KAAA,EAA6B;AAC3BjB,QAAAA,aAAa,GAAGkB,SAAS,CAAzBlB,aAAAA;;AAEA,YAAMmB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,KAAA,EAAA;AAAA,cAAQC,GAAR,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,aAAA;AAAA,iBAC7B,OAAA,CAAA,KAAA,EAEE,UAAA,GAAA,EAAA,IAAA,EAAe;AACb,gBAAItB,IAAI,CAAJA,UAAI,CAAJA,IAAoBsB,GAAG,CAAHA,OAAAA,CAAYtB,IAAI,CAAhBsB,IAAgB,CAAhBA,MAA4B,CAApD,CAAA,EAAwD;AACtDA,cAAAA,GAAG,CAAHA,IAAAA,CAAStB,IAAI,CAAbsB,IAAa,CAAbA;AACD;;AAED,gBAAItB,IAAI,CAAR,OAAQ,CAAR,EAAmB;AACjB,qBAAOqB,sBAAsB,CAACrB,IAAI,CAAL,OAAK,CAAL,EAA7B,GAA6B,CAA7B;AACD;;AAED,mBAAA,GAAA;AAXJ,WAAA,EAD6B,GAC7B,CAD6B;AAA/B,SAAA;;AAiBAqB,QAAAA,sBAAsB,CAAtBA,KAAsB,CAAtBA;AACD;;AAED,aAAO;AACLnB,QAAAA,aAAa,EAAbA;AADK,OAAP;AAGD;;;;EAhEgBH,uB;;gBAAbD,I;;gBAAAA,I,iBAGiB,M;;gBAHjBA,I,eAKe,S;;gBALfA,I,oBAOwC;AAC1CE,EAAAA,IAAI,EAAA,GAAA,MAAA,CAAKF,IAAI,CAAT,SAAA,EAAA,QAAA;AADsC,C;;gBAPxCA,I,iCAYC,eAAe,CAAf,YAAA,CAA6B;AAC9BG,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHC,EAAAA,aAAa,EAAEC,eAAe,CAACC,mB;AAC/BC,EAAAA,oBAAoB,EAAEF,eAAe,CAACC,mB;AACtCE,EAAAA,SAAS,EAAEC,SAAS,CAACC,I;AACrBC,EAAAA,KAAK,EAAEN,eAAe,CAACC,mB;AACvBM,EAAAA,qBAAqB,EAAEH,SAAS,CAACI,I;AACjCC,EAAAA,eAAe,EAAEL,SAAS,CAACI,I;AAC3BE,EAAAA,aAAa,EAAEN,SAAS,CAACI;;;gBArBvBb,I,kBAwBkB;AACpBgB,EAAAA,EAAE,EADkB,KAAA;AAEpBC,EAAAA,aAAa,EAAEC;AAFK,C;;gBAxBlBlB,I,yBA6ByB,CAAA,eAAA,C;;gBA7BzBA,I,UA+BUmB,Q;;gBA/BVnB,I,WAgCWoB,S;;AAqNjBpB,IAAI,CAAJA,MAAAA,GAAcoE,sBAAsB,CAAC;AACnCC,EAAAA,SAAS,EAD0B,IAAA;AAEnCC,EAAAA,eAAe,EAAE;AAFkB,CAAD,CAApCtE;AAKA;;;;;;;;;;AAUA,eAAeuE,iBAAiB,CAAhC,IAAgC,CAAhC","sourcesContent":["import { Accessibility, treeBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior, getNextElement } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Ref } from '@fluentui/react-component-ref';\n\nimport TreeItem, { TreeItemProps } from './TreeItem';\nimport TreeTitle, { TreeTitleProps } from './TreeTitle';\nimport {\n  childrenExist,\n  commonPropTypes,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport {\n  ShorthandRenderFunction,\n  WithAsProp,\n  withSafeTypeForAs,\n  ShorthandCollection,\n  ShorthandValue,\n  ComponentEventHandler,\n} from '../../types';\nimport { hasSubtree, removeItemAtIndex, getSiblings, TreeContext, TreeRenderContextValue } from './utils';\n\nexport interface TreeSlotClassNames {\n  item: string;\n}\n\nexport interface TreeProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Shorthand array of props for Tree. */\n  items?: ShorthandCollection<TreeItemProps>;\n\n  /**\n   * A custom render function for the title slot.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItemTitle?: ShorthandRenderFunction<TreeTitleProps>;\n\n  /**\n   * Called when active item ids change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeItemIds` reflecting the new state.\n   */\n  onActiveItemIdsChange?: ComponentEventHandler<TreeProps>;\n\n  /**\n   * Callback that provides rendered tree items to be used by react-virtualized for instance.\n   * Acts as a render prop, with the rendered tree items being the re-used logic.\n   *\n   * @param renderedItem - The array of rendered items.\n   * @returns The render prop result.\n   */\n  renderedItems?: (renderedItems: React.ReactElement[]) => React.ReactNode;\n}\n\nexport interface TreeItemForRenderProps {\n  elementRef: React.RefObject<HTMLElement>;\n  id: string;\n  index: number;\n  level: number;\n  parent: string;\n  siblings: ShorthandCollection<TreeItemProps>;\n}\n\nexport interface TreeState {\n  activeItemIds: string[];\n}\n\nclass Tree extends AutoControlledComponent<WithAsProp<TreeProps>, TreeState> {\n  static create: ShorthandFactory<TreeProps>;\n\n  static displayName = 'Tree';\n\n  static className = 'ui-tree';\n\n  static slotClassNames: TreeSlotClassNames = {\n    item: `${Tree.className}__item`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeItemIds: customPropTypes.collectionShorthand,\n    defaultActiveItemIds: customPropTypes.collectionShorthand,\n    exclusive: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    onActiveItemIdsChange: PropTypes.func,\n    renderItemTitle: PropTypes.func,\n    renderedItems: PropTypes.func,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: treeBehavior as Accessibility,\n  };\n\n  static autoControlledProps = ['activeItemIds'];\n\n  static Item = TreeItem;\n  static Title = TreeTitle;\n\n  static getAutoControlledStateFromProps(nextProps: TreeProps, prevState: TreeState) {\n    const { items } = nextProps;\n    let { activeItemIds } = nextProps;\n\n    if (!activeItemIds && items) {\n      activeItemIds = prevState.activeItemIds;\n\n      const expandedItemsGenerator = (items, acc = activeItemIds) =>\n        _.reduce(\n          items,\n          (acc, item) => {\n            if (item['expanded'] && acc.indexOf(item['id']) === -1) {\n              acc.push(item['id']);\n            }\n\n            if (item['items']) {\n              return expandedItemsGenerator(item['items'], acc);\n            }\n\n            return acc;\n          },\n          acc,\n        );\n\n      expandedItemsGenerator(items);\n    }\n\n    return {\n      activeItemIds,\n    };\n  }\n\n  getInitialAutoControlledState() {\n    return { activeItemIds: [] };\n  }\n\n  treeRef = React.createRef<HTMLElement>();\n  itemsRef = new Map<string, React.RefObject<HTMLElement>>();\n\n  onFocusParent = (parent: string) => {\n    const parentRef = this.itemsRef.get(parent);\n\n    if (!parentRef || !parentRef.current) {\n      return;\n    }\n\n    parentRef.current.focus();\n  };\n\n  onTitleClick = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    if (!hasSubtree(treeItemProps)) {\n      return;\n    }\n\n    let { activeItemIds } = this.state;\n    const { id } = treeItemProps;\n    const { exclusive, items } = this.props;\n    const siblings = getSiblings(items, id);\n\n    const activeItemIdIndex = activeItemIds.indexOf(id);\n\n    if (activeItemIdIndex > -1) {\n      activeItemIds = removeItemAtIndex(activeItemIds, activeItemIdIndex);\n    } else {\n      if (exclusive) {\n        siblings.some(sibling => {\n          const activeSiblingIdIndex = activeItemIds.indexOf(sibling['id']);\n          if (activeSiblingIdIndex > -1) {\n            activeItemIds = removeItemAtIndex(activeItemIds, activeSiblingIdIndex);\n\n            return true;\n          }\n          return false;\n        });\n      }\n\n      activeItemIds = [...activeItemIds, id];\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  onFocusFirstChild = (itemId: string) => {\n    const currentElement = this.itemsRef.get(itemId);\n\n    if (!currentElement || !currentElement.current) {\n      return;\n    }\n\n    const elementToBeFocused = getNextElement(this.treeRef.current, currentElement.current);\n\n    if (!elementToBeFocused) {\n      return;\n    }\n\n    elementToBeFocused.focus();\n  };\n\n  onSiblingsExpand = (e: React.SyntheticEvent, treeItemProps: TreeItemProps) => {\n    const { exclusive, items } = this.props;\n    if (exclusive) {\n      return;\n    }\n\n    const { id } = treeItemProps;\n    const { activeItemIds } = this.state;\n    const siblings = getSiblings(items, id);\n\n    siblings.forEach(sibling => {\n      if (hasSubtree(sibling) && !this.isActiveItem(sibling['id'])) {\n        activeItemIds.push(sibling['id']);\n      }\n    });\n\n    if (hasSubtree(treeItemProps) && !this.isActiveItem(id)) {\n      activeItemIds.push(id);\n    }\n\n    this.setActiveItemIds(e, activeItemIds);\n  };\n\n  setActiveItemIds = (e: React.SyntheticEvent, activeItemIds: string[]) => {\n    _.invoke(this.props, 'onActiveItemIdsChange', e, { ...this.props, activeItemIds });\n\n    this.setState({\n      activeItemIds,\n    });\n  };\n\n  contextValue: TreeRenderContextValue = {\n    onFocusParent: this.onFocusParent,\n    onSiblingsExpand: this.onSiblingsExpand,\n    onFocusFirstChild: this.onFocusFirstChild,\n    onTitleClick: this.onTitleClick,\n  };\n\n  renderContent(accessibility: ReactAccessibilityBehavior): React.ReactElement[] {\n    const { items, renderItemTitle } = this.props;\n\n    if (!items) return null;\n\n    const renderItems = (\n      items: ShorthandCollection<TreeItemProps>,\n      level = 1,\n      parent?: string,\n    ): React.ReactElement[] => {\n      return items.reduce((renderedItems: React.ReactElement[], item: ShorthandValue<TreeItemProps>, index: number) => {\n        const itemId = item['id'];\n        const isSubtree = hasSubtree(item);\n        const isSubtreeExpanded = isSubtree && this.isActiveItem(itemId);\n\n        if (!this.itemsRef.has(itemId)) {\n          this.itemsRef.set(itemId, React.createRef<HTMLElement>());\n        }\n\n        const renderedItem = TreeItem.create(item, {\n          defaultProps: () => ({\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.item : undefined,\n            className: Tree.slotClassNames.item,\n            expanded: isSubtreeExpanded,\n            renderItemTitle,\n            key: item['id'],\n            parent,\n            level,\n            index: index + 1, // Used for aria-posinset and it's 1-based.\n            contentRef: this.itemsRef.get(itemId),\n            treeSize: items.length,\n          }),\n        });\n\n        return [\n          ...renderedItems,\n          renderedItem,\n          ...(isSubtreeExpanded ? renderItems(item['items'], level + 1, itemId) : ([] as any)),\n        ];\n      }, []);\n    };\n\n    return renderItems(items);\n  }\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children, renderedItems } = this.props;\n\n    return (\n      <TreeContext.Provider value={this.contextValue}>\n        <Ref innerRef={this.treeRef}>\n          <ElementType\n            className={classes.root}\n            {...accessibility.attributes.root}\n            {...rtlTextContainer.getAttributes({ forElements: [children] })}\n            {...unhandledProps}\n            {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n          >\n            {childrenExist(children)\n              ? children\n              : renderedItems\n              ? renderedItems(this.renderContent(accessibility))\n              : this.renderContent(accessibility)}\n          </ElementType>\n        </Ref>\n      </TreeContext.Provider>\n    );\n  }\n\n  isActiveItem = (id: string): boolean => {\n    const { activeItemIds } = this.state;\n    return activeItemIds.indexOf(id) > -1;\n  };\n}\n\nTree.create = createShorthandFactory({\n  Component: Tree,\n  mappedArrayProp: 'items',\n});\n\n/**\n * A Tree displays data organised in tree hierarchy.\n *\n * @accessibility\n * Implements [ARIA TreeView](https://www.w3.org/TR/wai-aria-practices-1.1/#TreeView) design pattern.\n * @accessibilityIssues\n * [Treeview - JAWS doesn't narrate position for each tree item](https://github.com/FreedomScientific/VFO-standards-support/issues/338)\n * [Aria compliant trees are read as empty tables](https://bugs.chromium.org/p/chromium/issues/detail?id=1048770)\n */\n\nexport default withSafeTypeForAs<typeof Tree, TreeProps, 'ul'>(Tree);\n"]},"metadata":{},"sourceType":"module"}