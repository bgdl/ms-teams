{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { accordionContentBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar AccordionContent = /*#__PURE__*/function (_UIComponent) {\n  _inherits(AccordionContent, _UIComponent);\n\n  function AccordionContent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccordionContent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionContent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(AccordionContent, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps,\n          accessibility = _ref.accessibility;\n      var _this$props = this.props,\n          children = _this$props.children,\n          content = _this$props.content;\n      return React.createElement(ElementType, _extends({\n        onClick: this.handleClick\n      }, rtlTextContainer.getAttributes({\n        forElements: [children, content]\n      }), accessibility.attributes.root, unhandledProps, {\n        className: classes.root\n      }), childrenExist(children) ? children : content);\n    }\n  }]);\n\n  return AccordionContent;\n}(UIComponent);\n\n_defineProperty(AccordionContent, \"displayName\", 'AccordionContent');\n\n_defineProperty(AccordionContent, \"create\", void 0);\n\n_defineProperty(AccordionContent, \"className\", 'ui-accordion__content');\n\n_defineProperty(AccordionContent, \"propTypes\", Object.assign({}, commonPropTypes.createCommon(), {\n  accordionTitleId: PropTypes.string,\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n}));\n\n_defineProperty(AccordionContent, \"defaultProps\", {\n  accessibility: accordionContentBehavior,\n  as: 'dd'\n});\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content'\n});\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\n\nexport default withSafeTypeForAs(AccordionContent);","map":{"version":3,"sources":["components/Accordion/AccordionContent.tsx"],"names":["AccordionContent","UIComponent","commonPropTypes","accordionTitleId","PropTypes","string","active","bool","onClick","func","accessibility","as","ElementType","classes","unhandledProps","children","content","handleClick","forElements","root","childrenExist","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;;;;;;;;AAAA,SAAA,wBAAA,QAAA,yBAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAGA,SAAA,aAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AAWA,SAAA,iBAAA,QAAA,aAAA;;IAkBMA,gB;;;;;;;;;;;;;;;;kEAmBU,UAAA,CAAA,EAA6B;AACzC,MAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,SAAA,EAAA,CAAA,EAAmC,KAAA,CAAnC,KAAA,CAAA;;;;;;;;0CAGuE;AAAA,UAAvDY,WAAuD,GAAA,IAAA,CAAvDA,WAAuD;AAAA,UAA1CC,OAA0C,GAAA,IAAA,CAA1CA,OAA0C;AAAA,UAAjCC,cAAiC,GAAA,IAAA,CAAjCA,cAAiC;AAAA,UAAjBJ,aAAiB,GAAA,IAAA,CAAjBA,aAAiB;AAAA,UAAA,WAAA,GACzC,KADyC,KAAA;AAAA,UAC/DK,QAD+D,GAAA,WAAA,CAAA,QAAA;AAAA,UACrDC,OADqD,GAAA,WAAA,CAAA,OAAA;AAGvE,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,OAAO,EAAE,KAAKC;AADhB,OAAA,EAEM,gBAAgB,CAAhB,aAAA,CAA+B;AAAEC,QAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,OAA/B,CAFN,EAGMR,aAAa,CAAbA,UAAAA,CAHN,IAAA,EAAA,cAAA,EAAA;AAKE,QAAA,SAAS,EAAEG,OAAO,CAACM;AALrB,OAAA,CAAA,EAOGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GARL,OACE,CADF;AAWD;;;;EArC4BnB,W;;gBAAzBD,gB,iBACiB,kB;;gBADjBA,gB;;gBAAAA,gB,eAKe,uB;;gBALfA,gB,iCAQCE,eAAe,CAAfA,YAAAA,E;AACHC,EAAAA,gBAAgB,EAAEC,SAAS,CAACC,M;AAC5BC,EAAAA,MAAM,EAAEF,SAAS,CAACG,I;AAClBC,EAAAA,OAAO,EAAEJ,SAAS,CAACK;;;gBAXjBT,gB,kBAckB;AACpBU,EAAAA,aAAa,EADO,wBAAA;AAEpBC,EAAAA,EAAE,EAAE;AAFgB,C;;AA0BxBX,gBAAgB,CAAhBA,MAAAA,GAA0BqB,sBAAsB,CAAC;AAC/CC,EAAAA,SAAS,EADsC,gBAAA;AAE/CC,EAAAA,UAAU,EAAE;AAFmC,CAAD,CAAhDvB;AAKA;;;;AAGA,eAAewB,iBAAiB,CAAhC,gBAAgC,CAAhC","sourcesContent":["import { accordionContentBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport { WithAsProp, ComponentEventHandler, withSafeTypeForAs } from '../../types';\n\nexport interface AccordionContentProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Id of the title it belongs to. */\n  accordionTitleId?: string;\n\n  /** Whether or not the content is visible. */\n  active?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionContentProps>;\n}\n\nclass AccordionContent extends UIComponent<WithAsProp<AccordionContentProps>, any> {\n  static displayName = 'AccordionContent';\n\n  static create: ShorthandFactory<AccordionContentProps>;\n\n  static className = 'ui-accordion__content';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon(),\n    accordionTitleId: PropTypes.string,\n    active: PropTypes.bool,\n    onClick: PropTypes.func,\n  };\n\n  static defaultProps = {\n    accessibility: accordionContentBehavior,\n    as: 'dd',\n  };\n\n  handleClick = (e: React.SyntheticEvent) => {\n    _.invoke(this.props, 'onClick', e, this.props);\n  };\n\n  renderComponent({ ElementType, classes, unhandledProps, accessibility }) {\n    const { children, content } = this.props;\n\n    return (\n      <ElementType\n        onClick={this.handleClick}\n        {...rtlTextContainer.getAttributes({ forElements: [children, content] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : content}\n      </ElementType>\n    );\n  }\n}\n\nAccordionContent.create = createShorthandFactory({\n  Component: AccordionContent,\n  mappedProp: 'content',\n});\n\n/**\n * An AccordionContent displays content hosted in an Accordion.\n */\nexport default withSafeTypeForAs<typeof AccordionContent, AccordionContentProps>(AccordionContent);\n"]},"metadata":{},"sourceType":"module"}