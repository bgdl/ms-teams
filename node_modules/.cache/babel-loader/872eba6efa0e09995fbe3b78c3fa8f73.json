{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport { embedBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createShorthandFactory, applyAccessibilityKeyHandlers, commonPropTypes, AutoControlledComponent } from '../../utils';\nimport Image from '../Image/Image';\nimport Video from '../Video/Video';\nimport Box from '../Box/Box';\nimport { withSafeTypeForAs } from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\n\nvar Embed = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Embed, _AutoControlledCompon);\n\n  function Embed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Embed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Embed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      performClick: function performClick(event) {\n        return _this.handleClick(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"frameRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      var iframeNil = _isNil(_this.props.iframe);\n\n      var newActive = !_this.state.active;\n\n      if (iframeNil || !iframeNil && newActive) {\n        _this.setState({\n          active: newActive\n        });\n\n        _invoke(_this.props, 'onActiveChange', e, Object.assign({}, _this.props, {\n          active: newActive\n        }));\n      }\n\n      _invoke(_this.props, 'onClick', e, Object.assign({}, _this.props, {\n        active: newActive\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFrameOverrides\", function (predefinedProps) {\n      return {\n        onLoad: function onLoad(e) {\n          _invoke(predefinedProps, 'onLoad', e);\n\n          _this.setState({\n            iframeLoaded: true\n          });\n\n          _this.frameRef.current.contentWindow.focus();\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(Embed, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        active: false,\n        iframeLoaded: false\n      };\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          variables = _ref.variables;\n      var _this$props = this.props,\n          control = _this$props.control,\n          iframe = _this$props.iframe,\n          placeholder = _this$props.placeholder,\n          video = _this$props.video;\n      var _this$state = this.state,\n          active = _this$state.active,\n          iframeLoaded = _this$state.iframeLoaded;\n      var placeholderElement = placeholder ? React.createElement(Image, {\n        src: placeholder,\n        styles: styles.image,\n        variables: {\n          width: variables.width,\n          height: variables.height\n        }\n      }) : null;\n      var hasIframe = !_isNil(iframe);\n      var hasVideo = !_isNil(video);\n      var controlVisible = !active || hasVideo;\n      var placeholderVisible = !active || hasIframe && active && !iframeLoaded;\n      return React.createElement(ElementType, _extends({\n        className: classes.root,\n        onClick: this.handleClick\n      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), active && React.createElement(React.Fragment, null, Video.create(video, {\n        defaultProps: function defaultProps() {\n          return {\n            autoPlay: true,\n            controls: false,\n            loop: true,\n            muted: true,\n            poster: placeholder,\n            styles: styles.video,\n            variables: {\n              width: variables.width,\n              height: variables.height\n            }\n          };\n        }\n      }), iframe && React.createElement(Ref, {\n        innerRef: this.frameRef\n      }, Box.create(iframe, {\n        defaultProps: function defaultProps() {\n          return {\n            as: 'iframe',\n            styles: styles.iframe\n          };\n        },\n        overrideProps: this.handleFrameOverrides\n      }))), placeholderVisible && placeholderElement, controlVisible && Box.create(control, {\n        defaultProps: function defaultProps() {\n          return {\n            className: Embed.slotClassNames.control,\n            styles: styles.control\n          };\n        }\n      }));\n    }\n  }]);\n\n  return Embed;\n}(AutoControlledComponent);\n\n_defineProperty(Embed, \"create\", void 0);\n\n_defineProperty(Embed, \"className\", 'ui-embed');\n\n_defineProperty(Embed, \"displayName\", 'Embed');\n\n_defineProperty(Embed, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  children: false,\n  content: false\n}), {\n  active: PropTypes.bool,\n  defaultActive: PropTypes.bool,\n  control: customPropTypes.itemShorthand,\n  iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n  onActiveChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand])\n}));\n\n_defineProperty(Embed, \"defaultProps\", {\n  as: 'span',\n  accessibility: embedBehavior,\n  control: {}\n});\n\n_defineProperty(Embed, \"autoControlledProps\", ['active']);\n\n_defineProperty(Embed, \"slotClassNames\", {\n  control: \"\".concat(Embed.className, \"__control\")\n});\n\nEmbed.create = createShorthandFactory({\n  Component: Embed\n});\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\n\nexport default withSafeTypeForAs(Embed);","map":{"version":3,"sources":["components/Embed/Embed.tsx"],"names":["Embed","AutoControlledComponent","children","content","active","PropTypes","bool","defaultActive","control","customPropTypes","itemShorthand","iframe","onActiveChange","func","onClick","placeholder","string","video","as","accessibility","performClick","React","iframeLoaded","e","iframeNil","newActive","onLoad","ElementType","classes","unhandledProps","styles","variables","placeholderElement","width","height","hasIframe","hasVideo","controlVisible","placeholderVisible","handleClick","applyAccessibilityKeyHandlers","defaultProps","autoPlay","controls","loop","muted","poster","frameRef","overrideProps","handleFrameOverrides","className","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, embedBehavior } from '@fluentui/accessibility';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as customPropTypes from '@fluentui/react-proptypes';\n\nimport {\n  createShorthandFactory,\n  UIComponentProps,\n  applyAccessibilityKeyHandlers,\n  commonPropTypes,\n  AutoControlledComponent,\n  ShorthandFactory,\n} from '../../utils';\nimport Image from '../Image/Image';\nimport Video, { VideoProps } from '../Video/Video';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ComponentEventHandler, WithAsProp, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport { Ref } from '@fluentui/react-component-ref';\n\nexport interface EmbedSlotClassNames {\n  control: string;\n}\n\nexport interface EmbedProps extends UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** Whether the embedded object should be active. */\n  active?: boolean;\n\n  /** Whether the embedded object should start active. */\n  defaultActive?: boolean;\n\n  /** Shorthand for an control. */\n  control?: ShorthandValue<BoxProps>;\n\n  /** Shorthand for an embedded iframe. */\n  iframe?: ShorthandValue<BoxProps>;\n\n  /**\n   * Event for request to change 'active' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onActiveChange?: ComponentEventHandler<EmbedProps>;\n\n  /**\n   * Called when is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onClick?: ComponentEventHandler<EmbedProps>;\n\n  /** Image source URL for when video isn't playing. */\n  placeholder?: string;\n\n  /** Shorthand for an embedded video. */\n  video?: ShorthandValue<VideoProps>;\n}\n\nexport interface EmbedState {\n  active: boolean;\n  iframeLoaded: boolean;\n}\n\nclass Embed extends AutoControlledComponent<WithAsProp<EmbedProps>, EmbedState> {\n  static create: ShorthandFactory<EmbedProps>;\n\n  static className = 'ui-embed';\n\n  static displayName = 'Embed';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      children: false,\n      content: false,\n    }),\n    active: PropTypes.bool,\n    defaultActive: PropTypes.bool,\n    control: customPropTypes.itemShorthand,\n    iframe: customPropTypes.every([customPropTypes.disallow(['video']), customPropTypes.itemShorthand]),\n    onActiveChange: PropTypes.func,\n    onClick: PropTypes.func,\n    placeholder: PropTypes.string,\n    video: customPropTypes.every([customPropTypes.disallow(['iframe']), customPropTypes.itemShorthand]),\n  };\n\n  static defaultProps = {\n    as: 'span',\n    accessibility: embedBehavior as Accessibility,\n    control: {},\n  };\n\n  static autoControlledProps = ['active'];\n\n  static slotClassNames: EmbedSlotClassNames = {\n    control: `${Embed.className}__control`,\n  };\n\n  actionHandlers = {\n    performClick: event => this.handleClick(event),\n  };\n\n  frameRef = React.createRef<HTMLFrameElement>();\n\n  getInitialAutoControlledState(): EmbedState {\n    return { active: false, iframeLoaded: false };\n  }\n\n  handleClick = e => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const iframeNil = _.isNil(this.props.iframe);\n    const newActive = !this.state.active;\n\n    if (iframeNil || (!iframeNil && newActive)) {\n      this.setState({ active: newActive });\n      _.invoke(this.props, 'onActiveChange', e, { ...this.props, active: newActive });\n    }\n\n    _.invoke(this.props, 'onClick', e, { ...this.props, active: newActive });\n  };\n\n  handleFrameOverrides = predefinedProps => ({\n    onLoad: (e: React.SyntheticEvent) => {\n      _.invoke(predefinedProps, 'onLoad', e);\n\n      this.setState({ iframeLoaded: true });\n      this.frameRef.current.contentWindow.focus();\n    },\n  });\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps, styles, variables }) {\n    const { control, iframe, placeholder, video } = this.props;\n    const { active, iframeLoaded } = this.state;\n\n    const placeholderElement = placeholder ? (\n      <Image src={placeholder} styles={styles.image} variables={{ width: variables.width, height: variables.height }} />\n    ) : null;\n\n    const hasIframe = !_.isNil(iframe);\n    const hasVideo = !_.isNil(video);\n    const controlVisible = !active || hasVideo;\n    const placeholderVisible = !active || (hasIframe && active && !iframeLoaded);\n\n    return (\n      <ElementType\n        className={classes.root}\n        onClick={this.handleClick}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {active && (\n          <>\n            {Video.create(video, {\n              defaultProps: () => ({\n                autoPlay: true,\n                controls: false,\n                loop: true,\n                muted: true,\n                poster: placeholder,\n                styles: styles.video,\n                variables: {\n                  width: variables.width,\n                  height: variables.height,\n                },\n              }),\n            })}\n            {iframe && (\n              <Ref innerRef={this.frameRef}>\n                {Box.create(iframe, {\n                  defaultProps: () => ({\n                    as: 'iframe',\n                    styles: styles.iframe,\n                  }),\n                  overrideProps: this.handleFrameOverrides,\n                })}\n              </Ref>\n            )}\n          </>\n        )}\n\n        {placeholderVisible && placeholderElement}\n        {controlVisible &&\n          Box.create(control, {\n            defaultProps: () => ({\n              className: Embed.slotClassNames.control,\n              styles: styles.control,\n            }),\n          })}\n      </ElementType>\n    );\n  }\n}\n\nEmbed.create = createShorthandFactory({ Component: Embed });\n\n/**\n * An Embed displays content from external websites, like a post from external social network.\n *\n * @accessibility\n * A `placeholder` slot represents an [`Image`](/components/image/definition) component, please follow recommendations from its\n * accessibility section.\n */\nexport default withSafeTypeForAs<typeof Embed, EmbedProps, 'span'>(Embed);\n"]},"metadata":{},"sourceType":"module"}