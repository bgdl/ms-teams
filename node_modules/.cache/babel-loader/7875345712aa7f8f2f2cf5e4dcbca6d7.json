{"ast":null,"code":"/**\n * Returns the parent node or the host of the node argument.\n * @param node - DOM node.\n * @returns - parent DOM node.\n */\nvar getParentNode = function getParentNode(node) {\n  if (node.nodeName === 'HTML') return node;\n  return node.parentNode || node.host;\n};\n/**\n * Returns CSS styles of the given node.\n * @param node - DOM node.\n * @returns - CSS styles.\n */\n\n\nvar getStyleComputedProperty = function getStyleComputedProperty(node) {\n  if (node.nodeType !== 1) return {};\n  var window = node.ownerDocument.defaultView;\n  return window.getComputedStyle(node, null);\n};\n/**\n * Returns the first scrollable parent of the given element.\n * @param node - DOM node.\n * @returns - the first scrollable parent.\n */\n\n\nvar getScrollParent = function getScrollParent(node) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  var parentNode = node && getParentNode(node); // eslint-disable-next-line\n\n  if (!parentNode) return document.body;\n\n  switch (parentNode.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return parentNode.ownerDocument.body;\n\n    case '#document':\n      return parentNode.body;\n  } // If any of the overflow props is defined for the node then we return it as the parent\n\n\n  var _getStyleComputedProp = getStyleComputedProperty(parentNode),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) return parentNode;\n  return getScrollParent(parentNode);\n};\n\nexport default getScrollParent;","map":{"version":3,"sources":["utils/positioner/getScrollParent.ts"],"names":["getParentNode","node","getStyleComputedProperty","window","getScrollParent","parentNode","document","overflow","overflowX","overflowY"],"mappings":"AAAA;;;;;AAKA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAsB;AAC1C,MAAIC,IAAI,CAAJA,QAAAA,KAAJ,MAAA,EAA8B,OAAA,IAAA;AAC9B,SAAOA,IAAI,CAAJA,UAAAA,IAAoBA,IAAD,CAA1B,IAAA;AAFF,CAAA;AAKA;;;;;;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,IAAA,EAA8C;AAC7E,MAAID,IAAI,CAAJA,QAAAA,KAAJ,CAAA,EAAyB,OAAA,EAAA;AAEzB,MAAME,MAAM,GAAGF,IAAI,CAAJA,aAAAA,CAAf,WAAA;AACA,SAAOE,MAAM,CAANA,gBAAAA,CAAAA,IAAAA,EAAP,IAAOA,CAAP;AAJF,CAAA;AAOA;;;;;;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAsB;AAC5C;AACA,MAAMC,UAAU,GAAGJ,IAAI,IAAID,aAAa,CAFI,IAEJ,CAAxC,CAF4C,CAG5C;;AACA,MAAI,CAAJ,UAAA,EAAiB,OAAOM,QAAQ,CAAf,IAAA;;AAEjB,UAAQD,UAAU,CAAlB,QAAA;AACE,SAAA,MAAA;AACA,SAAA,MAAA;AACE,aAAOA,UAAU,CAAVA,aAAAA,CAAP,IAAA;;AACF,SAAA,WAAA;AACE,aAAQA,UAAD,CAAP,IAAA;AALJ,GAN4C,CAc5C;;;AAd4C,MAAA,qBAAA,GAeDH,wBAAwB,CAfvB,UAeuB,CAfvB;AAAA,MAepCK,QAfoC,GAAA,qBAAA,CAAA,QAAA;AAAA,MAe1BC,SAf0B,GAAA,qBAAA,CAAA,SAAA;AAAA,MAefC,SAfe,GAAA,qBAAA,CAAA,SAAA;;AAgB5C,MAAI,wBAAA,IAAA,CAA6BF,QAAQ,GAARA,SAAAA,GAAjC,SAAI,CAAJ,EAAoE,OAAA,UAAA;AAEpE,SAAOH,eAAe,CAAtB,UAAsB,CAAtB;AAlBF,CAAA;;AAqBA,eAAA,eAAA","sourcesContent":["/**\n * Returns the parent node or the host of the node argument.\n * @param node - DOM node.\n * @returns - parent DOM node.\n */\nconst getParentNode = (node: Node): Node => {\n  if (node.nodeName === 'HTML') return node;\n  return node.parentNode || (node as any).host;\n};\n\n/**\n * Returns CSS styles of the given node.\n * @param node - DOM node.\n * @returns - CSS styles.\n */\nconst getStyleComputedProperty = (node: Node): Partial<CSSStyleDeclaration> => {\n  if (node.nodeType !== 1) return {};\n\n  const window = node.ownerDocument.defaultView;\n  return window.getComputedStyle(node as Element, null);\n};\n\n/**\n * Returns the first scrollable parent of the given element.\n * @param node - DOM node.\n * @returns - the first scrollable parent.\n */\nconst getScrollParent = (node: Node): Node => {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  const parentNode = node && getParentNode(node);\n  // eslint-disable-next-line\n  if (!parentNode) return document.body;\n\n  switch (parentNode.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return parentNode.ownerDocument.body;\n    case '#document':\n      return (parentNode as Document).body;\n  }\n\n  // If any of the overflow props is defined for the node then we return it as the parent\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(parentNode);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) return parentNode;\n\n  return getScrollParent(parentNode);\n};\n\nexport default getScrollParent;\n"]},"metadata":{},"sourceType":"module"}