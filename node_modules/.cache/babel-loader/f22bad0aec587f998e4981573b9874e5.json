{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _each from \"lodash/each\";\nimport _invoke from \"lodash/invoke\";\nimport _without from \"lodash/without\";\nimport _includes from \"lodash/includes\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport { accordionBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { AutoControlledComponent, childrenExist, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionContent from './AccordionContent';\nimport { withSafeTypeForAs } from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\n\nvar Accordion = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(Accordion, _AutoControlledCompon);\n\n  function Accordion(props, context) {\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"focusHandler\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"itemRefs\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultAccordionTitleId\", _uniqueId('accordion-title-'));\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultAccordionContentId\", _uniqueId('accordion-content-'));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      moveNext: function moveNext(e) {\n        e.preventDefault();\n\n        _this.focusHandler.moveNext();\n      },\n      movePrevious: function movePrevious(e) {\n        e.preventDefault();\n\n        _this.focusHandler.movePrevious();\n      },\n      moveFirst: function moveFirst(e) {\n        e.preventDefault();\n\n        _this.focusHandler.moveFirst();\n      },\n      moveLast: function moveLast(e) {\n        e.preventDefault();\n\n        _this.focusHandler.moveLast();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNavigationFocus\", function (index) {\n      _this.setState({\n        focusedIndex: index\n      }, function () {\n        var targetComponent = _this.itemRefs[index] && _this.itemRefs[index].current;\n        targetComponent && targetComponent.focus();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNavigationItemsSize\", function () {\n      return _this.props.panels.length;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeNewIndex\", function (index) {\n      var activeIndex = _this.state.activeIndex;\n      var exclusive = _this.props.exclusive;\n\n      if (!_this.isIndexActionable(index)) {\n        return activeIndex;\n      }\n\n      if (exclusive) return index === activeIndex ? -1 : index; // check to see if index is in array, and remove it, if not then add it\n\n      return _includes(activeIndex, index) ? _without(activeIndex, index) : [].concat(_toConsumableArray(activeIndex), [index]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTitleOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          var index = titleProps.index;\n\n          var activeIndex = _this.computeNewIndex(index);\n\n          _this.setState({\n            activeIndex: activeIndex,\n            focusedIndex: index\n          });\n\n          _invoke(_this.props, 'onActiveIndexChange', e, Object.assign({}, _this.props, {\n            activeIndex: activeIndex\n          }));\n\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n\n          _invoke(_this.props, 'onTitleClick', e, titleProps);\n        },\n        onFocus: function onFocus(e, titleProps) {\n          _invoke(predefinedProps, 'onFocus', e, titleProps);\n\n          _this.setState({\n            focusedIndex: predefinedProps.index\n          });\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isIndexActive\", function (index) {\n      var exclusive = _this.props.exclusive;\n      var activeIndex = _this.state.activeIndex;\n      return exclusive ? activeIndex === index : _includes(activeIndex, index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isIndexActionable\", function (index) {\n      if (!_this.isIndexActive(index)) {\n        return true;\n      }\n\n      var activeIndex = _this.state.activeIndex;\n      var _this$props = _this.props,\n          expanded = _this$props.expanded,\n          exclusive = _this$props.exclusive;\n      return !expanded || !exclusive && activeIndex.length > 1;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderPanels\", function () {\n      var children = [];\n      var _this$props2 = _this.props,\n          panels = _this$props2.panels,\n          renderPanelContent = _this$props2.renderPanelContent,\n          renderPanelTitle = _this$props2.renderPanelTitle;\n      var focusedIndex = _this.state.focusedIndex;\n      _this.itemRefs = [];\n\n      _this.focusHandler.syncFocusedIndex(focusedIndex);\n\n      _each(panels, function (panel, index) {\n        var content = panel.content,\n            title = panel.title;\n\n        var active = _this.isIndexActive(index);\n\n        var canBeCollapsed = _this.isIndexActionable(index);\n\n        var contentRef = React.createRef();\n        var titleId = title['id'] || \"\".concat(_this.defaultAccordionTitleId).concat(index);\n        var contentId = content['id'] || \"\".concat(_this.defaultAccordionContentId).concat(index);\n        _this.itemRefs[index] = contentRef;\n        children.push(AccordionTitle.create(title, {\n          defaultProps: function defaultProps() {\n            return {\n              className: Accordion.slotClassNames.title,\n              active: active,\n              index: index,\n              contentRef: contentRef,\n              canBeCollapsed: canBeCollapsed,\n              id: titleId,\n              accordionContentId: contentId\n            };\n          },\n          overrideProps: _this.handleTitleOverrides,\n          render: renderPanelTitle\n        }));\n        children.push(AccordionContent.create(content, {\n          defaultProps: function defaultProps() {\n            return {\n              className: Accordion.slotClassNames.content,\n              active: active,\n              id: contentId,\n              accordionTitleId: titleId\n            };\n          },\n          render: renderPanelContent\n        }));\n      });\n\n      return children;\n    });\n\n    _this.focusHandler = new ContainerFocusHandler(_this.getNavigationItemsSize, _this.handleNavigationFocus, true);\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState(_ref) {\n      var expanded = _ref.expanded,\n          exclusive = _ref.exclusive;\n      var alwaysActiveIndex = expanded ? 0 : -1;\n      return {\n        activeIndex: exclusive ? alwaysActiveIndex : [alwaysActiveIndex]\n      };\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref2) {\n      var ElementType = _ref2.ElementType,\n          classes = _ref2.classes,\n          accessibility = _ref2.accessibility,\n          unhandledProps = _ref2.unhandledProps;\n      var children = this.props.children;\n      return React.createElement(ElementType, _extends({}, accessibility.attributes.root, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {\n        className: classes.root\n      }), childrenExist(children) ? children : this.renderPanels());\n    }\n  }]);\n\n  return Accordion;\n}(AutoControlledComponent);\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\n\n\n_defineProperty(Accordion, \"displayName\", 'Accordion');\n\n_defineProperty(Accordion, \"className\", 'ui-accordion');\n\n_defineProperty(Accordion, \"slotClassNames\", {\n  content: \"\".concat(Accordion.className, \"__content\"),\n  title: \"\".concat(Accordion.className, \"__title\")\n});\n\n_defineProperty(Accordion, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  activeIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  defaultActiveIndex: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number])]),\n  exclusive: PropTypes.bool,\n  expanded: PropTypes.bool,\n  onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n  onActiveIndexChange: PropTypes.func,\n  panels: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.arrayOf(PropTypes.shape({\n    content: customPropTypes.itemShorthand,\n    title: customPropTypes.itemShorthand\n  }))]),\n  renderPanelTitle: PropTypes.func,\n  renderPanelContent: PropTypes.func\n}));\n\n_defineProperty(Accordion, \"defaultProps\", {\n  accessibility: accordionBehavior,\n  as: 'dl'\n});\n\n_defineProperty(Accordion, \"autoControlledProps\", ['activeIndex']);\n\n_defineProperty(Accordion, \"Title\", AccordionTitle);\n\n_defineProperty(Accordion, \"Content\", AccordionContent);\n\nexport default withSafeTypeForAs(Accordion);","map":{"version":3,"sources":["components/Accordion/Accordion.tsx"],"names":["Accordion","AutoControlledComponent","content","title","activeIndex","customPropTypes","PropTypes","defaultActiveIndex","exclusive","bool","expanded","onTitleClick","onActiveIndexChange","func","panels","itemShorthand","renderPanelTitle","renderPanelContent","accessibility","as","AccordionTitle","AccordionContent","moveNext","e","movePrevious","moveFirst","moveLast","focusedIndex","index","targetComponent","alwaysActiveIndex","onClick","titleProps","onFocus","predefinedProps","children","panel","active","canBeCollapsed","contentRef","React","titleId","contentId","defaultProps","className","id","accordionContentId","overrideProps","render","accordionTitleId","ElementType","classes","unhandledProps","forElements","applyAccessibilityKeyHandlers","root","childrenExist","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, accordionBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  AutoControlledComponent,\n  childrenExist,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\nimport AccordionTitle, { AccordionTitleProps } from './AccordionTitle';\nimport AccordionContent, { AccordionContentProps } from './AccordionContent';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  ShorthandValue,\n  ShorthandRenderFunction,\n  withSafeTypeForAs,\n} from '../../types';\nimport { ContainerFocusHandler } from '../../utils/accessibility/FocusHandling/FocusContainer';\n\nexport interface AccordionSlotClassNames {\n  content: string;\n  title: string;\n}\n\nexport interface AccordionProps extends UIComponentProps, ChildrenComponentProps {\n  /** Index of the currently active panel. */\n  activeIndex?: number[] | number;\n\n  /** Initial activeIndex value. */\n  defaultActiveIndex?: number[] | number;\n\n  /** Only allow one panel to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** At least one panel should be expanded at any time. */\n  expanded?: boolean;\n\n  /**\n   * Called when the active index of the Accordion changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `activeIndex` reflecting the new state.\n   */\n  onActiveIndexChange?: ComponentEventHandler<AccordionProps>;\n\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All item props.\n   */\n  onTitleClick?: ComponentEventHandler<AccordionProps>;\n\n  /** Shorthand array of props for Accordion. */\n  panels?: {\n    content: ShorthandValue<AccordionContentProps>;\n    title: ShorthandValue<AccordionTitleProps>;\n  }[];\n\n  /**\n   * A custom renderer for each Accordion's panel title.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelTitle?: ShorthandRenderFunction<AccordionTitleProps>;\n\n  /**\n   * A custom renderer for each Accordion's panel content.\n   *\n   * @param Component - The panel's component type.\n   * @param props - The panel's computed props.\n   */\n  renderPanelContent?: ShorthandRenderFunction<AccordionContentProps>;\n\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n}\n\nexport interface AccordionState {\n  activeIndex: number[] | number;\n  focusedIndex: number;\n}\n\nclass Accordion extends AutoControlledComponent<WithAsProp<AccordionProps>, AccordionState> {\n  static displayName = 'Accordion';\n\n  static className = 'ui-accordion';\n\n  static slotClassNames: AccordionSlotClassNames = {\n    content: `${Accordion.className}__content`,\n    title: `${Accordion.className}__title`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    activeIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    defaultActiveIndex: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    ]),\n    exclusive: PropTypes.bool,\n    expanded: PropTypes.bool,\n    onTitleClick: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.func]),\n    onActiveIndexChange: PropTypes.func,\n    panels: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.arrayOf(\n        PropTypes.shape({\n          content: customPropTypes.itemShorthand,\n          title: customPropTypes.itemShorthand,\n        }),\n      ),\n    ]),\n\n    renderPanelTitle: PropTypes.func,\n    renderPanelContent: PropTypes.func,\n  };\n\n  static defaultProps = {\n    accessibility: accordionBehavior,\n    as: 'dl',\n  };\n\n  static autoControlledProps = ['activeIndex'];\n\n  static Title = AccordionTitle;\n  static Content = AccordionContent;\n\n  focusHandler: ContainerFocusHandler = null;\n  itemRefs = [];\n  defaultAccordionTitleId = _.uniqueId('accordion-title-');\n  defaultAccordionContentId = _.uniqueId('accordion-content-');\n\n  actionHandlers = {\n    moveNext: e => {\n      e.preventDefault();\n      this.focusHandler.moveNext();\n    },\n    movePrevious: e => {\n      e.preventDefault();\n      this.focusHandler.movePrevious();\n    },\n    moveFirst: e => {\n      e.preventDefault();\n      this.focusHandler.moveFirst();\n    },\n    moveLast: e => {\n      e.preventDefault();\n      this.focusHandler.moveLast();\n    },\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.focusHandler = new ContainerFocusHandler(this.getNavigationItemsSize, this.handleNavigationFocus, true);\n  }\n\n  handleNavigationFocus = (index: number) => {\n    this.setState({ focusedIndex: index }, () => {\n      const targetComponent = this.itemRefs[index] && this.itemRefs[index].current;\n      targetComponent && targetComponent.focus();\n    });\n  };\n\n  getNavigationItemsSize = () => this.props.panels.length;\n\n  getInitialAutoControlledState({ expanded, exclusive }: AccordionProps) {\n    const alwaysActiveIndex = expanded ? 0 : -1;\n    return { activeIndex: exclusive ? alwaysActiveIndex : [alwaysActiveIndex] };\n  }\n\n  computeNewIndex = (index: number): number | number[] => {\n    const { activeIndex } = this.state;\n    const { exclusive } = this.props;\n\n    if (!this.isIndexActionable(index)) {\n      return activeIndex;\n    }\n\n    if (exclusive) return index === activeIndex ? -1 : index;\n    // check to see if index is in array, and remove it, if not then add it\n    return _.includes(activeIndex as number[], index)\n      ? _.without(activeIndex as number[], index)\n      : [...(activeIndex as number[]), index];\n  };\n\n  handleTitleOverrides = (predefinedProps: AccordionTitleProps) => ({\n    onClick: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      const { index } = titleProps;\n      const activeIndex = this.computeNewIndex(index);\n\n      this.setState({ activeIndex, focusedIndex: index });\n\n      _.invoke(this.props, 'onActiveIndexChange', e, { ...this.props, activeIndex });\n      _.invoke(predefinedProps, 'onClick', e, titleProps);\n      _.invoke(this.props, 'onTitleClick', e, titleProps);\n    },\n    onFocus: (e: React.SyntheticEvent, titleProps: AccordionTitleProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, titleProps);\n      this.setState({ focusedIndex: predefinedProps.index });\n    },\n  });\n\n  isIndexActive = (index: number): boolean => {\n    const { exclusive } = this.props;\n    const { activeIndex } = this.state;\n\n    return exclusive ? activeIndex === index : _.includes(activeIndex as number[], index);\n  };\n\n  /**\n   * Checks if panel at index can be actioned upon. Used in the case of expanded accordion,\n   * when at least a panel needs to stay active. Will return false if expanded prop is true,\n   * index is active and either it's an exclusive accordion or if there are no other active\n   * panels open besides this one.\n   *\n   * @param index - The index of the panel.\n   * @returns If the panel can be set active/inactive.\n   */\n  isIndexActionable = (index: number): boolean => {\n    if (!this.isIndexActive(index)) {\n      return true;\n    }\n\n    const { activeIndex } = this.state;\n    const { expanded, exclusive } = this.props;\n\n    return !expanded || (!exclusive && (activeIndex as number[]).length > 1);\n  };\n\n  renderPanels = () => {\n    const children: any[] = [];\n    const { panels, renderPanelContent, renderPanelTitle } = this.props;\n    const { focusedIndex } = this.state;\n\n    this.itemRefs = [];\n    this.focusHandler.syncFocusedIndex(focusedIndex);\n\n    _.each(panels, (panel, index) => {\n      const { content, title } = panel;\n      const active = this.isIndexActive(index);\n      const canBeCollapsed = this.isIndexActionable(index);\n      const contentRef = React.createRef<HTMLElement>();\n      const titleId = title['id'] || `${this.defaultAccordionTitleId}${index}`;\n      const contentId = content['id'] || `${this.defaultAccordionContentId}${index}`;\n      this.itemRefs[index] = contentRef;\n\n      children.push(\n        AccordionTitle.create(title, {\n          defaultProps: () => ({\n            className: Accordion.slotClassNames.title,\n            active,\n            index,\n            contentRef,\n            canBeCollapsed,\n            id: titleId,\n            accordionContentId: contentId,\n          }),\n          overrideProps: this.handleTitleOverrides,\n          render: renderPanelTitle,\n        }),\n      );\n      children.push(\n        AccordionContent.create(content, {\n          defaultProps: () => ({\n            className: Accordion.slotClassNames.content,\n            active,\n            id: contentId,\n            accordionTitleId: titleId,\n          }),\n          render: renderPanelContent,\n        }),\n      );\n    });\n\n    return children;\n  };\n\n  renderComponent({ ElementType, classes, accessibility, unhandledProps }) {\n    const { children } = this.props;\n\n    return (\n      <ElementType\n        {...accessibility.attributes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n        className={classes.root}\n      >\n        {childrenExist(children) ? children : this.renderPanels()}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * An Accordion represents stacked set of content sections, with action elements to toggle the display of these sections.\n *\n * @accessibility\n * Implements [ARIA Accordion](https://www.w3.org/TR/wai-aria-practices-1.1/#accordion) design pattern (keyboard navigation not yet supported).\n */\nexport default withSafeTypeForAs<typeof Accordion, AccordionProps>(Accordion);\n"]},"metadata":{},"sourceType":"module"}