{"ast":null,"code":"import { emptyTheme } from '@fluentui/styles';\nimport * as React from 'react'; // @ts-ignore We have this export in package, but it is not present in typings\n\nimport { ThemeContext } from 'react-fela';\nimport useComposeOptions from '../compose/useComposeOptions';\nimport useCurrentReactElement from '../compose/useCurrentReactElement';\nimport getStyles from '../styles/getStyles';\nvar defaultContext = {\n  rtl: false,\n  disableAnimations: false,\n  performance: {\n    enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n    enableStylesCaching: true,\n    enableVariablesCaching: true,\n    enableBooleanVariablesCaching: false\n  },\n  renderer: {\n    renderRule: function renderRule() {\n      return '';\n    }\n  },\n  theme: emptyTheme\n};\n\nvar useStyles = function useStyles(displayName, options) {\n  var _composeOptions$mapPr;\n\n  var context = React.useContext(ThemeContext) || defaultContext;\n\n  var _useCurrentReactEleme = useCurrentReactElement(),\n      elementProps = _useCurrentReactEleme.elementProps;\n\n  var composeOptions = useComposeOptions();\n  var _options$className = options.className,\n      className = _options$className === void 0 ? process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰' : _options$className,\n      _options$mapPropsToSt = options.mapPropsToStyles,\n      mapPropsToStyles = _options$mapPropsToSt === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToSt,\n      _options$mapPropsToIn = options.mapPropsToInlineStyles,\n      mapPropsToInlineStyles = _options$mapPropsToIn === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToIn,\n      _options$rtl = options.rtl,\n      rtl = _options$rtl === void 0 ? false : _options$rtl;\n  var componentStylesProps = mapPropsToStyles(); // `composeProps` should include all props including stylesProps as they can contain state\n\n  var composeProps = Object.assign({}, elementProps, {}, componentStylesProps);\n  var composeStylesProps = composeOptions === null || composeOptions === void 0 ? void 0 : (_composeOptions$mapPr = composeOptions.mapPropsToStylesPropsChain) === null || _composeOptions$mapPr === void 0 ? void 0 : _composeOptions$mapPr.reduce(function (acc, fn) {\n    return Object.assign({}, acc, {}, fn(composeProps));\n  }, {}); // Stores debug information for component.\n\n  var debug = React.useRef({\n    fluentUIDebug: null\n  });\n\n  var _getStyles = getStyles({\n    // Input values\n    className: (composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.className) || className,\n    displayNames: (composeOptions === null || composeOptions === void 0 ? void 0 : composeOptions.displayNames) || [displayName],\n    props: Object.assign({}, componentStylesProps, {}, mapPropsToInlineStyles(), {}, composeStylesProps),\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl: rtl,\n    saveDebug: function saveDebug(fluentUIDebug) {\n      return debug.current = {\n        fluentUIDebug: fluentUIDebug\n      };\n    },\n    theme: context.theme,\n    performance: context.performance\n  }),\n      classes = _getStyles.classes,\n      resolvedStyles = _getStyles.styles;\n\n  return {\n    classes: classes,\n    styles: resolvedStyles\n  };\n};\n\nexport default useStyles;","map":{"version":3,"sources":["hooks/useStyles.ts"],"names":["defaultContext","rtl","disableAnimations","performance","enableSanitizeCssPlugin","process","enableStylesCaching","enableVariablesCaching","enableBooleanVariablesCaching","renderer","renderRule","theme","emptyTheme","useStyles","context","React","elementProps","useCurrentReactElement","composeOptions","useComposeOptions","className","mapPropsToStyles","mapPropsToInlineStyles","options","componentStylesProps","composeProps","composeStylesProps","fn","debug","fluentUIDebug","classes","resolvedStyles","getStyles","displayNames","props","saveDebug","styles"],"mappings":"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","sourcesContent":["import {\n  ComponentSlotStyle,\n  ComponentSlotStylesResolved,\n  ComponentVariablesInput,\n  DebugData,\n  emptyTheme,\n} from '@fluentui/styles';\nimport * as React from 'react';\n// @ts-ignore We have this export in package, but it is not present in typings\nimport { ThemeContext } from 'react-fela';\n\nimport useComposeOptions from '../compose/useComposeOptions';\nimport useCurrentReactElement from '../compose/useCurrentReactElement';\nimport {\n  ComponentDesignProp,\n  ComponentSlotClasses,\n  PrimitiveProps,\n  RendererRenderRule,\n  StylesContextValue,\n} from '../styles/types';\nimport getStyles from '../styles/getStyles';\n\ntype UseStylesOptions<StyleProps extends PrimitiveProps> = {\n  className?: string;\n  mapPropsToStyles?: () => StyleProps;\n  mapPropsToInlineStyles?: () => InlineStyleProps<StyleProps>;\n  rtl?: boolean;\n};\n\ntype UseStylesResult = {\n  classes: ComponentSlotClasses;\n  styles: ComponentSlotStylesResolved;\n};\n\ntype InlineStyleProps<StyleProps> = {\n  /** Additional CSS class name(s) to apply.  */\n  className?: string;\n\n  design?: ComponentDesignProp;\n\n  /** Additional CSS styles to apply to the component instance.  */\n  styles?: ComponentSlotStyle<StyleProps, any>; // TODO: see if we can improve it\n\n  /** Override for theme site variables to allow modifications of component styling via themes. */\n  variables?: ComponentVariablesInput;\n};\n\nconst defaultContext: StylesContextValue<{ renderRule: RendererRenderRule }> = {\n  rtl: false,\n  disableAnimations: false,\n  performance: {\n    enableSanitizeCssPlugin: process.env.NODE_ENV !== 'production',\n    enableStylesCaching: true,\n    enableVariablesCaching: true,\n    enableBooleanVariablesCaching: false,\n  },\n  renderer: { renderRule: () => '' },\n  theme: emptyTheme,\n};\n\nconst useStyles = <StyleProps extends PrimitiveProps>(\n  displayName: string,\n  options: UseStylesOptions<StyleProps>,\n): UseStylesResult => {\n  const context: StylesContextValue<{ renderRule: RendererRenderRule }> =\n    React.useContext(ThemeContext) || defaultContext;\n\n  const { elementProps } = useCurrentReactElement();\n  const composeOptions = useComposeOptions();\n\n  const {\n    className = process.env.NODE_ENV === 'production' ? '' : 'no-classname-ðŸ™‰',\n    mapPropsToStyles = () => ({} as StyleProps),\n    mapPropsToInlineStyles = () => ({} as InlineStyleProps<StyleProps>),\n    rtl = false,\n  } = options;\n  const componentStylesProps = mapPropsToStyles();\n\n  // `composeProps` should include all props including stylesProps as they can contain state\n  const composeProps = { ...elementProps, ...componentStylesProps };\n  const composeStylesProps = composeOptions?.mapPropsToStylesPropsChain?.reduce(\n    (acc, fn) => ({ ...acc, ...fn(composeProps) }),\n    {},\n  );\n\n  // Stores debug information for component.\n  const debug = React.useRef<{ fluentUIDebug: DebugData | null }>({ fluentUIDebug: null });\n  const { classes, styles: resolvedStyles } = getStyles({\n    // Input values\n    className: composeOptions?.className || className,\n    displayNames: composeOptions?.displayNames || [displayName],\n    props: {\n      ...componentStylesProps,\n      ...mapPropsToInlineStyles(),\n      ...composeStylesProps,\n    },\n\n    // Context values\n    disableAnimations: context.disableAnimations,\n    renderer: context.renderer,\n    rtl,\n    saveDebug: fluentUIDebug => (debug.current = { fluentUIDebug }),\n    theme: context.theme,\n    performance: context.performance,\n  });\n\n  return { classes, styles: resolvedStyles };\n};\n\nexport default useStyles;\n"]},"metadata":{},"sourceType":"module"}