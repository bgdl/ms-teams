{"ast":null,"code":"import * as constants from '../constants';\nimport * as msTeams from '@microsoft/teams-js';\nimport AuthenticationContext from 'adal-angular';\nconst authenticationContext = new AuthenticationContext({\n  clientId: constants.Auth.appId,\n  redirectUri: `${window.location.origin}/${constants.Auth.signInEndPage}`,\n  cacheLocation: constants.Auth.cacheLocation,\n  endpoints: constants.Auth.authenticatedDomains,\n  navigateToLoginRequestUrl: false\n});\nexport default class AuthHelper {\n  /**\n   * Uses the current authetication context to check if a user\n   * is logged in. In this case, this is determined by the presence\n   * of a cached user and cached token with length > 0.\n   */\n  static IsUserLoggedIn() {\n    let cachedUser = authenticationContext.getCachedUser();\n    let cachedToken = authenticationContext.getCachedToken(constants.Auth.appId);\n    return !!cachedUser && cachedToken.length > 0;\n  }\n  /**\n   * Attempts to get an access token for the user. If successful,\n   * sends the user to the home page again where they will now\n   * be logged in.\n   */\n\n\n  static async Login() {\n    let accessToken = '';\n\n    try {\n      console.trace('Login');\n      accessToken = await AuthHelper.getAccessToken();\n    } catch (err) {\n      console.error(err);\n    }\n\n    if (accessToken.length > 0) {\n      console.trace('Login token', accessToken);\n      window.location.replace(window.location.origin);\n    }\n  }\n  /**\n   * Clears any existing user from the cache, then requests\n   * an AD token.\n   */\n\n\n  static StartSignIn() {\n    console.trace('StartSignIn');\n    authenticationContext.clearCache();\n    authenticationContext.login();\n  }\n  /**\n   * Called from the sign-in-end page. Checks for the presence\n   * of the AD token, and notifies teams of a successful log in\n   * if it is there, or notifies of failure otherwise.\n   */\n\n\n  static EndSignIn() {\n    if (authenticationContext.isCallback(window.location.hash)) {\n      authenticationContext.handleWindowCallback(window.location.hash);\n\n      if (window.opener) {\n        if (authenticationContext.getCachedUser()) {\n          authenticationContext.acquireToken(\"https://graph.microsoft.com\", (err, token) => {\n            if (token) {\n              msTeams.authentication.notifySuccess(token);\n            } else if (err) {\n              msTeams.authentication.notifyFailure(err);\n            } else {\n              msTeams.authentication.notifyFailure(\"UnexpectedFailure\");\n            }\n          });\n        } else {\n          microsoftTeams.authentication.notifyFailure(authenticationContext.getLoginError());\n        }\n      }\n    }\n  }\n  /**\n   * Begins the login flow by opening a popup window\n   * at the sign-in-start page.\n   */\n\n\n  static async getAccessToken() {\n    return new Promise((resolve, reject) => {\n      console.trace('getAccessToken URL', window.location.origin);\n      msTeams.authentication.authenticate({\n        url: `${window.location.origin}/${constants.Auth.signInStartPage}`,\n        width: 600,\n        height: 535,\n        successCallback: accessToken => {\n          resolve(accessToken);\n        },\n        failureCallback: reason => {\n          reject(reason);\n        }\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/bogdanluca/moqups/ms-teams/src/helpers/auth-helper.ts"],"names":["constants","msTeams","AuthenticationContext","authenticationContext","clientId","Auth","appId","redirectUri","window","location","origin","signInEndPage","cacheLocation","endpoints","authenticatedDomains","navigateToLoginRequestUrl","AuthHelper","IsUserLoggedIn","cachedUser","getCachedUser","cachedToken","getCachedToken","length","Login","accessToken","console","trace","getAccessToken","err","error","replace","StartSignIn","clearCache","login","EndSignIn","isCallback","hash","handleWindowCallback","opener","acquireToken","token","authentication","notifySuccess","notifyFailure","microsoftTeams","getLoginError","Promise","resolve","reject","authenticate","url","signInStartPage","width","height","successCallback","failureCallback","reason"],"mappings":"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","sourcesContent":["import * as constants from '../constants';\nimport * as msTeams from '@microsoft/teams-js';\nimport AuthenticationContext from 'adal-angular';\n\nconst authenticationContext = new AuthenticationContext({\n    clientId: constants.Auth.appId,\n    redirectUri: `${window.location.origin}/${constants.Auth.signInEndPage}`,\n    cacheLocation: constants.Auth.cacheLocation as 'localStorage' | 'sessionStorage',\n    endpoints: constants.Auth.authenticatedDomains,\n    navigateToLoginRequestUrl: false\n});\n\nexport default class AuthHelper {\n    /**\n     * Uses the current authetication context to check if a user\n     * is logged in. In this case, this is determined by the presence\n     * of a cached user and cached token with length > 0.\n     */\n    public static IsUserLoggedIn(): boolean {\n        let cachedUser = authenticationContext.getCachedUser();\n        let cachedToken = authenticationContext.getCachedToken(constants.Auth.appId);\n\n        return !!cachedUser && cachedToken.length > 0;\n    }\n\n    /**\n     * Attempts to get an access token for the user. If successful,\n     * sends the user to the home page again where they will now\n     * be logged in.\n     */\n    public static async Login(): Promise<void> {\n        let accessToken: string = '';\n\n        try {\n            console.trace('Login')\n            accessToken = await AuthHelper.getAccessToken();\n        } catch (err) {\n            console.error(err)\n        }\n\n        if (accessToken.length > 0) {\n            console.trace('Login token', accessToken)\n            window.location.replace(window.location.origin);\n        }\n    }\n\n    /**\n     * Clears any existing user from the cache, then requests\n     * an AD token.\n     */\n    public static StartSignIn(): void {\n        console.trace('StartSignIn')\n        authenticationContext.clearCache();\n        authenticationContext.login();\n    }\n\n    /**\n     * Called from the sign-in-end page. Checks for the presence\n     * of the AD token, and notifies teams of a successful log in\n     * if it is there, or notifies of failure otherwise.\n     */\n    public static EndSignIn(): void {\n        if (authenticationContext.isCallback(window.location.hash)) {\n            authenticationContext.handleWindowCallback(window.location.hash);\n\n            if (window.opener) {\n                if (authenticationContext.getCachedUser()) {\n                    authenticationContext.acquireToken(\"https://graph.microsoft.com\", (err, token) => {\n                        if (token) {\n                            msTeams.authentication.notifySuccess(token);\n                        } else if (err) {\n                            msTeams.authentication.notifyFailure(err);\n                        } else {\n                            msTeams.authentication.notifyFailure(\"UnexpectedFailure\");\n                        }\n                    });\n                } else {\n                    microsoftTeams.authentication.notifyFailure(authenticationContext.getLoginError());\n                }\n            }\n        }\n    }\n\n    /**\n     * Begins the login flow by opening a popup window\n     * at the sign-in-start page.\n     */\n    private static async getAccessToken(): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            console.trace('getAccessToken URL', window.location.origin)\n            msTeams.authentication.authenticate({\n                url: `${window.location.origin}/${constants.Auth.signInStartPage}`,\n                width: 600,\n                height: 535,\n                successCallback: (accessToken: string | undefined) => {\n                    resolve(accessToken);\n                },\n                failureCallback: (reason) => {\n                    reject(reason);\n                }\n            })\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}