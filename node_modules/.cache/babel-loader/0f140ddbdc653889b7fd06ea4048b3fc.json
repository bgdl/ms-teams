{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Image from '../Image/Image';\nimport Box from '../Box/Box';\n\nvar DropdownItem = function DropdownItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(DropdownItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var active = props.active,\n      accessibilityItemProps = props.accessibilityItemProps,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      header = props.header,\n      image = props.image,\n      isFromKeyboard = props.isFromKeyboard,\n      styles = props.styles,\n      checkable = props.checkable,\n      checkableIndicator = props.checkableIndicator,\n      selected = props.selected,\n      variables = props.variables;\n\n  var _useStyles = useStyles(DropdownItem.displayName, {\n    className: DropdownItem.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        active: active,\n        isFromKeyboard: isFromKeyboard,\n        selected: selected,\n        hasContent: !!content,\n        hasHeader: !!header\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var contentElement = Box.create(content, {\n    defaultProps: function defaultProps() {\n      return {\n        className: DropdownItem.slotClassNames.content,\n        styles: resolvedStyles.content\n      };\n    }\n  });\n  var headerElement = Box.create(header, {\n    defaultProps: function defaultProps() {\n      return {\n        className: DropdownItem.slotClassNames.header,\n        styles: resolvedStyles.header\n      };\n    }\n  });\n  var endMediaElement = selected && checkable ? Box.create(checkableIndicator, {\n    defaultProps: function defaultProps() {\n      return {\n        className: DropdownItem.slotClassNames.checkableIndicator,\n        styles: resolvedStyles.checkableIndicator,\n        accessibility: indicatorBehavior\n      };\n    }\n  }) : null;\n  var imageElement = Box.create(Image.create(image, {\n    defaultProps: function defaultProps() {\n      return {\n        avatar: true,\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.image\n      };\n    }\n  }), {\n    defaultProps: function defaultProps() {\n      return {\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.media\n      };\n    }\n  });\n  var element = React.createElement(ElementType, _extends({\n    className: classes.root,\n    onClick: handleClick\n  }, accessibilityItemProps, unhandledProps), imageElement, React.createElement(\"div\", {\n    className: cx(DropdownItem.slotClassNames.main, classes.main)\n  }, headerElement, contentElement), endMediaElement);\n  setEnd();\n  return element;\n};\n\nDropdownItem.className = 'ui-dropdown__item';\nDropdownItem.displayName = 'DropdownItem';\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {}\n};\nDropdownItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false\n}), {\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool\n});\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes);\nDropdownItem.slotClassNames = {\n  main: \"\".concat(DropdownItem.className, \"__main\"),\n  content: \"\".concat(DropdownItem.className, \"__content\"),\n  header: \"\".concat(DropdownItem.className, \"__header\"),\n  image: \"\".concat(DropdownItem.className, \"__image\"),\n  checkableIndicator: \"\".concat(DropdownItem.className, \"__checkable-indicator\")\n};\nDropdownItem.create = createShorthandFactory({\n  Component: DropdownItem,\n  mappedProp: 'header'\n});\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\n\nexport default withSafeTypeForAs(DropdownItem);","map":{"version":3,"sources":["components/Dropdown/DropdownItem.tsx"],"names":["DropdownItem","context","React","setStart","setEnd","useTelemetry","active","accessibilityItemProps","className","content","design","header","image","isFromKeyboard","styles","checkable","checkableIndicator","selected","variables","props","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","hasHeader","mapPropsToInlineStyles","rtl","ElementType","getElementType","unhandledProps","useUnhandledProps","handleClick","contentElement","defaultProps","headerElement","endMediaElement","accessibility","indicatorBehavior","imageElement","avatar","media","element","cx","as","children","PropTypes","customPropTypes","disabled","onClick","bool","Object","main","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { getElementType, useUnhandledProps, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport cx from 'classnames';\n\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport {\n  ShorthandValue,\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { UIComponentProps } from '../../utils/commonPropInterfaces';\nimport Image, { ImageProps } from '../Image/Image';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface DropdownItemSlotClassNames {\n  content: string;\n  header: string;\n  image: string;\n  checkableIndicator: string;\n  main: string;\n}\n\nexport interface DropdownItemProps extends UIComponentProps<DropdownItemProps> {\n  /** A dropdown item can be active. */\n  active?: boolean;\n\n  /** Item's accessibility props. */\n  accessibilityItemProps?: any;\n\n  /** Item's content. */\n  content?: ShorthandValue<BoxProps>;\n\n  /** Item can show check indicator if selected. */\n  checkable?: boolean;\n\n  /** A slot for a checkable indicator. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown item can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** Item's header. */\n  header?: ShorthandValue<BoxProps>;\n\n  /** Item's image. */\n  image?: ShorthandValue<ImageProps>;\n\n  /** Indicated whether the item has been set active by keyboard. */\n  isFromKeyboard?: boolean;\n\n  /**\n   * Called on dropdown item click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onClick?: ComponentEventHandler<DropdownItemProps>;\n\n  /** A dropdown item can be selected if single selection Dropdown is used. */\n  selected?: boolean;\n}\n\nconst DropdownItem: React.FC<WithAsProp<DropdownItemProps> & { index: number }> &\n  FluentComponentStaticProps<DropdownItemProps> & {\n    slotClassNames: DropdownItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(DropdownItem.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    active,\n    accessibilityItemProps,\n    className,\n    content,\n    design,\n    header,\n    image,\n    isFromKeyboard,\n    styles,\n    checkable,\n    checkableIndicator,\n    selected,\n    variables,\n  } = props;\n\n  const { classes, styles: resolvedStyles } = useStyles(DropdownItem.displayName, {\n    className: DropdownItem.className,\n    mapPropsToStyles: () => ({\n      active,\n      isFromKeyboard,\n      selected,\n      hasContent: !!content,\n      hasHeader: !!header,\n    }),\n    mapPropsToInlineStyles: () => ({ className, design, styles, variables }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DropdownItem.handledProps, props);\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const contentElement = Box.create(content, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.content,\n      styles: resolvedStyles.content,\n    }),\n  });\n  const headerElement = Box.create(header, {\n    defaultProps: () => ({\n      className: DropdownItem.slotClassNames.header,\n      styles: resolvedStyles.header,\n    }),\n  });\n  const endMediaElement =\n    selected && checkable\n      ? Box.create(checkableIndicator, {\n          defaultProps: () => ({\n            className: DropdownItem.slotClassNames.checkableIndicator,\n            styles: resolvedStyles.checkableIndicator,\n            accessibility: indicatorBehavior,\n          }),\n        })\n      : null;\n  const imageElement = Box.create(\n    Image.create(image, {\n      defaultProps: () => ({\n        avatar: true,\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.image,\n      }),\n    }),\n    {\n      defaultProps: () => ({\n        className: DropdownItem.slotClassNames.image,\n        styles: resolvedStyles.media,\n      }),\n    },\n  );\n\n  const element = (\n    <ElementType className={classes.root} onClick={handleClick} {...accessibilityItemProps} {...unhandledProps}>\n      {imageElement}\n\n      <div className={cx(DropdownItem.slotClassNames.main, classes.main)}>\n        {headerElement}\n        {contentElement}\n      </div>\n\n      {endMediaElement}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return element;\n};\n\nDropdownItem.className = 'ui-dropdown__item';\nDropdownItem.displayName = 'DropdownItem';\n\nDropdownItem.defaultProps = {\n  as: 'li',\n  checkableIndicator: {},\n};\n\nDropdownItem.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  accessibilityItemProps: PropTypes.object,\n  active: PropTypes.bool,\n  content: customPropTypes.itemShorthand,\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  disabled: PropTypes.bool,\n  header: customPropTypes.itemShorthand,\n  image: customPropTypes.itemShorthandWithoutJSX,\n  onClick: PropTypes.func,\n  isFromKeyboard: PropTypes.bool,\n  selected: PropTypes.bool,\n};\nDropdownItem.handledProps = Object.keys(DropdownItem.propTypes) as any;\n\nDropdownItem.slotClassNames = {\n  main: `${DropdownItem.className}__main`,\n  content: `${DropdownItem.className}__content`,\n  header: `${DropdownItem.className}__header`,\n  image: `${DropdownItem.className}__image`,\n  checkableIndicator: `${DropdownItem.className}__checkable-indicator`,\n};\n\nDropdownItem.create = createShorthandFactory({ Component: DropdownItem, mappedProp: 'header' });\n\n/**\n * A DropdownItem represents an option of Dropdown list.\n * Displays an item with optional rich media metadata.\n */\nexport default withSafeTypeForAs<typeof DropdownItem, DropdownItemProps>(DropdownItem);\n"]},"metadata":{},"sourceType":"module"}