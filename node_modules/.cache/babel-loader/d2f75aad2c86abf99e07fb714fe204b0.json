{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _map from \"lodash/map\";\nimport { tableBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, UIComponent, applyAccessibilityKeyHandlers, childrenExist } from '../../utils';\nimport { mergeComponentVariables } from '@fluentui/styles';\nimport TableRow from './TableRow';\nimport TableCell from './TableCell';\nimport { withSafeTypeForAs } from '../../types';\n\nvar handleVariablesOverrides = function handleVariablesOverrides(variables) {\n  return function (predefinedProps) {\n    return {\n      variables: mergeComponentVariables(variables, predefinedProps.variables)\n    };\n  };\n};\n\nvar Table = /*#__PURE__*/function (_UIComponent) {\n  _inherits(Table, _UIComponent);\n\n  function Table() {\n    _classCallCheck(this, Table);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Table).apply(this, arguments));\n  }\n\n  _createClass(Table, [{\n    key: \"renderRows\",\n    value: function renderRows(accessibility, variables) {\n      var _this$props = this.props,\n          rows = _this$props.rows,\n          compact = _this$props.compact;\n      return _map(rows, function (row, index) {\n        var props = {\n          compact: compact,\n          onClick: function onClick(e, props) {\n            _invoke(row, 'onClick', e, props);\n          }\n        };\n        var overrideProps = handleVariablesOverrides(variables);\n        return TableRow.create(row, {\n          defaultProps: function defaultProps() {\n            return Object.assign({}, props, {\n              accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined\n            });\n          },\n          overrideProps: overrideProps\n        });\n      });\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader(accessibility, variables) {\n      var _this$props2 = this.props,\n          header = _this$props2.header,\n          compact = _this$props2.compact;\n\n      if (!header) {\n        return null;\n      }\n\n      var headerRowProps = {\n        header: true,\n        compact: compact,\n        className: Table.slotClassNames.header\n      };\n      var overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(header, {\n        defaultProps: function defaultProps() {\n          return Object.assign({}, headerRowProps, {\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined\n          });\n        },\n        overrideProps: overrideProps\n      });\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var accessibility = _ref.accessibility,\n          ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          variables = _ref.variables,\n          unhandledProps = _ref.unhandledProps;\n      var children = this.props.children;\n      var hasChildren = childrenExist(children);\n      return React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), hasChildren && children, !hasChildren && this.renderHeader(accessibility, variables), !hasChildren && this.renderRows(accessibility, variables));\n    }\n  }]);\n\n  return Table;\n}(UIComponent);\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\n\n\n_defineProperty(Table, \"displayName\", 'Table');\n\n_defineProperty(Table, \"className\", 'ui-table');\n\n_defineProperty(Table, \"Cell\", TableCell);\n\n_defineProperty(Table, \"Row\", TableRow);\n\n_defineProperty(Table, \"slotClassNames\", {\n  header: \"\".concat(Table.className, \"__header\")\n});\n\n_defineProperty(Table, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),\n  header: customPropTypes.itemShorthand,\n  rows: customPropTypes.collectionShorthand,\n  compact: PropTypes.bool\n}));\n\n_defineProperty(Table, \"defaultProps\", {\n  as: 'div',\n  accessibility: tableBehavior\n});\n\nexport default withSafeTypeForAs(Table);","map":{"version":3,"sources":["components/Table/Table.tsx"],"names":["handleVariablesOverrides","variables","mergeComponentVariables","predefinedProps","Table","UIComponent","TableCell","TableRow","header","content","customPropTypes","PropTypes","itemShorthand","rows","collectionShorthand","compact","bool","as","accessibility","tableBehavior","props","onClick","overrideProps","defaultProps","undefined","headerRowProps","className","ElementType","classes","unhandledProps","children","hasChildren","childrenExist","root","applyAccessibilityKeyHandlers","withSafeTypeForAs"],"mappings":";;;;;;;;;AAAA,SAAA,aAAA,QAAA,yBAAA;AAEA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,eAAA,EAAA,WAAA,EAAA,6BAAA,EAAA,aAAA,QAAA,aAAA;AASA,SAAA,uBAAA,QAAA,kBAAA;AACA,OAAA,QAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,SAAA,iBAAA,QAAA,aAAA;;AA0BA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,SAAA,EAAS;AAAA,SAAI,UAAA,eAAA,EAAe;AAAA,WAAK;AAChEC,MAAAA,SAAS,EAAEC,uBAAuB,CAAA,SAAA,EAAYC,eAAe,CAA3B,SAAA;AAD8B,KAAL;AAAnB,GAAA;AAA1C,CAAA;;IAIMC,K;;;;;;;;;;;+BA6BOc,a,EAA2CjB,S,EAAqC;AAAA,UAAA,WAAA,GAC/D,KAD+D,KAAA;AAAA,UACjFY,IADiF,GAAA,WAAA,CAAA,IAAA;AAAA,UAC3EE,OAD2E,GAAA,WAAA,CAAA,OAAA;AAGzF,aAAO,IAAA,CAAA,IAAA,EAAY,UAAA,GAAA,EAAA,KAAA,EAAuC;AACxD,YAAMK,KAAK,GAAG;AACZL,UAAAA,OAAO,EADK,OAAA;AAEZM,UAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAc;AACrB,YAAA,OAAA,CAAA,GAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AACD;AAJW,SAAd;AAMA,YAAMC,aAAa,GAAGtB,wBAAwB,CAA9C,SAA8C,CAA9C;AACA,eAAO,QAAQ,CAAR,MAAA,CAAA,GAAA,EAAqB;AAC1BuB,UAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEZL,cAAAA,aAAa,EAAEA,aAAa,CAAbA,cAAAA,GAA+BA,aAAa,CAAbA,cAAAA,CAA/BA,GAAAA,GAAkEM;AAFrE,aAAA,CAAA;AADY,WAAA;AAK1BF,UAAAA,aAAa,EAAbA;AAL0B,SAArB,CAAP;AARF,OAAO,CAAP;AAgBD;;;iCAEYJ,a,EAA2CjB,S,EAAqC;AAAA,UAAA,YAAA,GAC/D,KAD+D,KAAA;AAAA,UACnFO,MADmF,GAAA,YAAA,CAAA,MAAA;AAAA,UAC3EO,OAD2E,GAAA,YAAA,CAAA,OAAA;;AAE3F,UAAI,CAAJ,MAAA,EAAa;AACX,eAAA,IAAA;AACD;;AAED,UAAMU,cAAc,GAAG;AACrBjB,QAAAA,MAAM,EADe,IAAA;AAErBO,QAAAA,OAAO,EAFc,OAAA;AAGrBW,QAAAA,SAAS,EAAEtB,KAAK,CAALA,cAAAA,CAAqBI;AAHX,OAAvB;AAMA,UAAMc,aAAa,GAAGtB,wBAAwB,CAA9C,SAA8C,CAA9C;AAEA,aAAO,QAAQ,CAAR,MAAA,CAAA,MAAA,EAAwB;AAC7BuB,QAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,iBAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAA,EAAA;AAEZL,YAAAA,aAAa,EAAEA,aAAa,CAAbA,cAAAA,GAA+BA,aAAa,CAAbA,cAAAA,CAA/BA,GAAAA,GAAkEM;AAFrE,WAAA,CAAA;AADe,SAAA;AAK7BF,QAAAA,aAAa,EAAbA;AAL6B,OAAxB,CAAP;AAOD;;;0CAQ4C;AAAA,UAL3CJ,aAK2C,GAAA,IAAA,CAL3CA,aAK2C;AAAA,UAJ3CS,WAI2C,GAAA,IAAA,CAJ3CA,WAI2C;AAAA,UAH3CC,OAG2C,GAAA,IAAA,CAH3CA,OAG2C;AAAA,UAF3C3B,SAE2C,GAAA,IAAA,CAF3CA,SAE2C;AAAA,UAD3C4B,cAC2C,GAAA,IAAA,CAD3CA,cAC2C;AAAA,UACnCC,QADmC,GACtB,KADsB,KACtB,CADsB,QAAA;AAE3C,UAAMC,WAAW,GAAGC,aAAa,CAAjC,QAAiC,CAAjC;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,SAAS,EAAEJ,OAAO,CAACK;AADrB,OAAA,EAEMf,aAAa,CAAbA,UAAAA,CAFN,IAAA,EAAA,cAAA,EAIMgB,6BAA6B,CAAChB,aAAa,CAAbA,WAAAA,CAAD,IAAA,EAJnC,cAImC,CAJnC,CAAA,EAMGa,WAAW,IANd,QAAA,EAQG,CAAA,WAAA,IAAgB,KAAA,YAAA,CAAA,aAAA,EARnB,SAQmB,CARnB,EAWG,CAAA,WAAA,IAAgB,KAAA,UAAA,CAAA,aAAA,EAZrB,SAYqB,CAXnB,CADF;AAgBD;;;;EAnGiB1B,W;AAsGpB;;;;;;;;;;;;;;;;;;;;;gBAtGMD,K,iBACiB,O;;gBADjBA,K,eAEe,U;;gBAFfA,K,UAIUE,S;;gBAJVF,K,SAKSG,Q;;gBALTH,K,oBAOyC;AAC3CI,EAAAA,MAAM,EAAA,GAAA,MAAA,CAAKJ,KAAK,CAAV,SAAA,EAAA,UAAA;AADqC,C;;gBAPzCA,K,iCAYC,eAAe,CAAf,YAAA,CAA6B;AAC9BK,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHA,EAAAA,OAAO,EAAEC,eAAe,CAAfA,KAAAA,CAAsB,CAC7BA,eAAe,CAAfA,QAAAA,CAAyB,CADI,UACJ,CAAzBA,CAD6B,EAE7BC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAATA,OAAAA,CAAkBD,eAAe,CAAlC,WAACC,CAAD,EAAiDD,eAAe,CAF7EA,WAEa,CAApBC,CAF6B,CAAtBD,C;AAITF,EAAAA,MAAM,EAAEE,eAAe,CAACE,a;AACxBC,EAAAA,IAAI,EAAEH,eAAe,CAACI,mB;AACtBC,EAAAA,OAAO,EAAEJ,SAAS,CAACK;;;gBArBjBZ,K,kBAwBkB;AACpBa,EAAAA,EAAE,EADkB,KAAA;AAEpBC,EAAAA,aAAa,EAAEC;AAFK,C;;AAiGxB,eAAegB,iBAAiB,CAAhC,KAAgC,CAAhC","sourcesContent":["import { Accessibility, tableBehavior } from '@fluentui/accessibility';\nimport { ReactAccessibilityBehavior } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  RenderResultConfig,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  UIComponent,\n  applyAccessibilityKeyHandlers,\n  childrenExist,\n} from '../../utils';\nimport { ComponentVariablesObject, mergeComponentVariables } from '@fluentui/styles';\nimport TableRow, { TableRowProps } from './TableRow';\nimport TableCell from './TableCell';\nimport { WithAsProp, ShorthandCollection, ShorthandValue, withSafeTypeForAs } from '../../types';\n\nexport interface TableSlotClassNames {\n  header: string;\n}\n\nexport interface TableProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * */\n  accessibility?: Accessibility;\n\n  /** The columns of the Table with a space-separated list of values.\n   */\n  header?: ShorthandValue<TableRowProps>;\n\n  /** The rows of the Table with a space-separated list of values.\n   */\n  rows?: ShorthandCollection<TableRowProps>;\n\n  /**\n   * Render table in compact mode\n   */\n  compact?: boolean;\n}\n\nconst handleVariablesOverrides = variables => predefinedProps => ({\n  variables: mergeComponentVariables(variables, predefinedProps.variables),\n});\n\nclass Table extends UIComponent<WithAsProp<TableProps>> {\n  static displayName = 'Table';\n  static className = 'ui-table';\n\n  static Cell = TableCell;\n  static Row = TableRow;\n\n  static slotClassNames: TableSlotClassNames = {\n    header: `${Table.className}__header`,\n  };\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    content: customPropTypes.every([\n      customPropTypes.disallow(['children']),\n      PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n    ]),\n    header: customPropTypes.itemShorthand,\n    rows: customPropTypes.collectionShorthand,\n    compact: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'div',\n    accessibility: tableBehavior as Accessibility,\n  };\n\n  renderRows(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { rows, compact } = this.props;\n\n    return _.map(rows, (row: TableRowProps, index: number) => {\n      const props = {\n        compact,\n        onClick: (e, props) => {\n          _.invoke(row, 'onClick', e, props);\n        },\n      } as TableRowProps;\n      const overrideProps = handleVariablesOverrides(variables);\n      return TableRow.create(row, {\n        defaultProps: () => ({\n          ...props,\n          accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined,\n        }),\n        overrideProps,\n      });\n    });\n  }\n\n  renderHeader(accessibility: ReactAccessibilityBehavior, variables: ComponentVariablesObject) {\n    const { header, compact } = this.props;\n    if (!header) {\n      return null;\n    }\n\n    const headerRowProps = {\n      header: true,\n      compact,\n      className: Table.slotClassNames.header,\n    } as TableRowProps;\n\n    const overrideProps = handleVariablesOverrides(variables);\n\n    return TableRow.create(header, {\n      defaultProps: () => ({\n        ...headerRowProps,\n        accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.row : undefined,\n      }),\n      overrideProps,\n    });\n  }\n\n  renderComponent({\n    accessibility,\n    ElementType,\n    classes,\n    variables,\n    unhandledProps,\n  }: RenderResultConfig<any>): React.ReactNode {\n    const { children } = this.props;\n    const hasChildren = childrenExist(children);\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {hasChildren && children}\n        {/* <thead> */}\n        {!hasChildren && this.renderHeader(accessibility, variables)}\n        {/* </thead> */}\n        {/* <tbody> */}\n        {!hasChildren && this.renderRows(accessibility, variables)}\n        {/* </tbody> */}\n      </ElementType>\n    );\n  }\n}\n\n/**\n * A Table is used to display data in tabular layout\n * * @accessibility\n * Implements ARIA [Data Grid](https://www.w3.org/TR/wai-aria-practices/#dataGrid) design pattern for presenting tabular information.\n * When gridcell contains actionable element, use [gridCellWithFocusableElementBehavior](/components/table/accessibility#grid-cell-with-focusable-element-behavior-ts). [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_focus)\n * Use [gridCellMultipleFocusableBehavior](/components/table/accessibility#gridCellMultipleFocusableBehavior), when gridcell contains:\n * \\- editable content\n * \\- multiple actionable elements\n * \\- component that utilizes arrow keys in its navigation, like menu button, dropdown, radio group, slider, etc.\n * [More information available in aria documentation.](https://www.w3.org/TR/wai-aria-practices/#gridNav_inside)\n * @accessibilityIssues\n * [NVDA narrate table title(aria-label) twice](https://github.com/nvaccess/nvda/issues/10548)\n * [Accessibility DOM > Table > gridcell > when gridcell is focused, then selected state is send to reader](https://bugs.chromium.org/p/chromium/issues/detail?id=1030378)\n * [JAWS narrate grid name twice, once as table and second time as grid](https://github.com/FreedomScientific/VFO-standards-support/issues/346)\n * [JAWS doesn't narrate grid column name, when focus is on actionable element in the cell] (https://github.com/FreedomScientific/VFO-standards-support/issues/348)\n * [aria-sort is not output at child elements](https://github.com/FreedomScientific/VFO-standards-support/issues/319)\n * [VoiceOver not announcing rows correctly for a grid with presentation elements inside](https://bugs.chromium.org/p/chromium/issues/detail?id=1054424)\n * VoiceOver doesn't narrate aria-rowcount value in table or grid\n */\nexport default withSafeTypeForAs<typeof Table, TableProps, 'div'>(Table);\n"]},"metadata":{},"sourceType":"module"}