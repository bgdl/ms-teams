{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar Box = function Box(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Box.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      content = props.content;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Box.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Box.displayName, {\n    className: Box.className,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var unhandledProps = useUnhandledProps(Box.handledProps, props);\n  var ElementType = getElementType(props);\n  var result = React.createElement(ElementType, getA11Props('root', Object.assign({}, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {\n    className: classes.root\n  }, unhandledProps)), childrenExist(children) ? children : content);\n  setEnd();\n  return result;\n};\n\nBox.className = 'ui-box';\nBox.displayName = 'Box';\nBox.propTypes = commonPropTypes.createCommon();\nBox.handledProps = Object.keys(Box.propTypes);\nBox.create = createShorthandFactory({\n  Component: Box\n});\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\n\nexport default withSafeTypeForAs(Box);","map":{"version":3,"sources":["components/Box/Box.tsx"],"names":["Box","context","React","setStart","setEnd","useTelemetry","accessibility","className","design","styles","variables","children","content","props","getA11Props","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","result","forElements","root","childrenExist","commonPropTypes","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"AAAA,SAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,SAAA,EAAA,YAAA,QAAA,0BAAA;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AAEA,SAAA,aAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,gBAAA,QAAA,aAAA;AASA,SAAA,iBAAA,QAAA,aAAA;;AASA,IAAMA,GAA0E,GAAG,SAA7EA,GAA6E,CAAA,KAAA,EAAS;AAC1F,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AAD0F,MAAA,aAAA,GAE7DG,YAAY,CAACL,GAAG,CAAJ,WAAA,EAAkBC,OAAO,CAFwB,SAEjD,CAFiD;AAAA,MAElFE,QAFkF,GAAA,aAAA,CAAA,QAAA;AAAA,MAExEC,MAFwE,GAAA,aAAA,CAAA,MAAA;;AAG1FD,EAAAA,QAAQ;AAHkF,MAKlFG,aALkF,GAKPO,KALO,CAAA,aAAA;AAAA,MAKnEN,SALmE,GAKPM,KALO,CAAA,SAAA;AAAA,MAKxDL,MALwD,GAKPK,KALO,CAAA,MAAA;AAAA,MAKhDJ,MALgD,GAKPI,KALO,CAAA,MAAA;AAAA,MAKxCH,SALwC,GAKPG,KALO,CAAA,SAAA;AAAA,MAK7BF,QAL6B,GAKPE,KALO,CAAA,QAAA;AAAA,MAKnBD,OALmB,GAKPC,KALO,CAAA,OAAA;AAO1F,MAAMC,WAAW,GAAGC,gBAAgB,CAAA,aAAA,EAAgB;AAClDC,IAAAA,SAAS,EAAEhB,GAAG,CADoC,WAAA;AAElDiB,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AAFqC,GAAhB,CAApC;;AAP0F,MAAA,UAAA,GAYtEE,SAAS,CAAiBnB,GAAG,CAApB,WAAA,EAAkC;AAC7DO,IAAAA,SAAS,EAAEP,GAAG,CAD+C,SAAA;AAE7DoB,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7Bb,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAATA;AAJ6B,OAAP;AAFqC,KAAA;AAQ7DO,IAAAA,GAAG,EAAEhB,OAAO,CAACgB;AARgD,GAAlC,CAZ6D;AAAA,MAYlFC,OAZkF,GAAA,UAAA,CAAA,OAAA;;AAuB1F,MAAMG,cAAc,GAAGC,iBAAiB,CAACtB,GAAG,CAAJ,YAAA,EAAxC,KAAwC,CAAxC;AACA,MAAMuB,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AAEA,MAAMC,MAAM,GACV,KAAA,CAAA,aAAA,CAAA,WAAA,EACMX,WAAW,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,gBAAgB,CAAhB,aAAA,CAA+B;AAAEY,IAAAA,WAAW,EAAE,CAAA,QAAA,EAAA,OAAA;AAAf,GAA/B,CADU,EAAA;AAEbnB,IAAAA,SAAS,EAAEW,OAAO,CAACS;AAFN,GAAA,EADjB,cACiB,CAAA,CADjB,EAOGC,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GARL,OACE,CADF;AAYAxB,EAAAA,MAAM;AAEN,SAAA,MAAA;AAxCF,CAAA;;AA2CAJ,GAAG,CAAHA,SAAAA,GAAAA,QAAAA;AACAA,GAAG,CAAHA,WAAAA,GAAAA,KAAAA;AAEAA,GAAG,CAAHA,SAAAA,GAAgB6B,eAAe,CAA/B7B,YAAgB6B,EAAhB7B;AACAA,GAAG,CAAHA,YAAAA,GAAmB8B,MAAM,CAANA,IAAAA,CAAY9B,GAAG,CAAlCA,SAAmB8B,CAAnB9B;AAEAA,GAAG,CAAHA,MAAAA,GAAa+B,sBAAsB,CAAC;AAAEC,EAAAA,SAAS,EAAEhC;AAAb,CAAD,CAAnCA;AAEA;;;;;AAIA,eAAeiC,iBAAiB,CAAhC,GAAgC,CAAhC","sourcesContent":["import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { Accessibility } from '@fluentui/accessibility';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  UIComponentProps,\n} from '../../utils';\nimport { ProviderContextPrepared, WithAsProp, withSafeTypeForAs, FluentComponentStaticProps } from '../../types';\n\nexport interface BoxProps extends UIComponentProps<BoxProps>, ContentComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<never>;\n}\n\nexport type BoxStylesProps = never;\n\nconst Box: React.FC<WithAsProp<BoxProps>> & FluentComponentStaticProps<BoxProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Box.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables, children, content } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Box.displayName,\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<BoxStylesProps>(Box.displayName, {\n    className: Box.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(Box.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const result = (\n    <ElementType\n      {...getA11Props('root', {\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nBox.className = 'ui-box';\nBox.displayName = 'Box';\n\nBox.propTypes = commonPropTypes.createCommon();\nBox.handledProps = Object.keys(Box.propTypes) as any;\n\nBox.create = createShorthandFactory({ Component: Box });\n\n/**\n * A Box is a basic component, commonly used for slots in other Fluent UI components.\n * By default it just renders a `div`.\n */\nexport default withSafeTypeForAs<typeof Box, BoxProps>(Box);\n"]},"metadata":{},"sourceType":"module"}