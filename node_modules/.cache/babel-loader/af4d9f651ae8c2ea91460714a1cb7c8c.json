{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport { splitButtonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { withSafeTypeForAs } from '../../types';\nimport { isFromKeyboard, commonPropTypes, AutoControlledComponent } from '../../utils';\nimport SplitButtonToggle from './SplitButtonToggle';\nimport Button from '../Button/Button';\nimport MenuButton from '../MenuButton/MenuButton';\nimport { Ref } from '@fluentui/react-component-ref';\n\nvar SplitButton = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(SplitButton, _AutoControlledCompon);\n\n  function SplitButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SplitButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SplitButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"targetRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMenuButtonOverrides\", function (predefinedProps) {\n      return {\n        onMenuItemClick: function onMenuItemClick(e, menuItemProps) {\n          _this.setState({\n            open: false\n          });\n\n          _invoke(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {\n            open: false\n          }));\n\n          _invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n\n          _invoke(_this.props, 'onMenuItemClick', e, menuItemProps);\n        },\n        onOpenChange: function onOpenChange(e, popupProps) {\n          e.stopPropagation();\n\n          _this.setState({\n            open: popupProps.open\n          });\n\n          _invoke(_this.props, 'onOpenChange', e, Object.assign({}, _this.props, {\n            open: popupProps.open\n          }));\n        }\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMenuButtonTriggerOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          _invoke(_this.props, 'onMainButtonClick', e, buttonProps);\n        },\n        onFocus: function onFocus(e, buttonProps) {\n          _invoke(predefinedProps, 'onFocus', e, buttonProps);\n\n          _this.setState({\n            isFromKeyboard: isFromKeyboard()\n          });\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(SplitButton, [{\n    key: \"getInitialAutoControlledState\",\n    value: function getInitialAutoControlledState() {\n      return {\n        isFromKeyboard: false,\n        open: false\n      };\n    }\n  }, {\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var _this$props = this.props,\n          button = _this$props.button,\n          disabled = _this$props.disabled,\n          menu = _this$props.menu,\n          primary = _this$props.primary,\n          secondary = _this$props.secondary,\n          toggleButton = _this$props.toggleButton,\n          size = _this$props.size,\n          position = _this$props.position,\n          align = _this$props.align,\n          flipBoundary = _this$props.flipBoundary,\n          overflowBoundary = _this$props.overflowBoundary,\n          positionFixed = _this$props.positionFixed,\n          offset = _this$props.offset,\n          unstable_pinned = _this$props.unstable_pinned;\n      var trigger = Button.create(button, {\n        defaultProps: function defaultProps() {\n          return {\n            styles: styles.menuButton,\n            primary: primary,\n            secondary: secondary,\n            disabled: disabled\n          };\n        },\n        overrideProps: this.handleMenuButtonTriggerOverrides\n      });\n      return React.createElement(Ref, {\n        innerRef: this.targetRef\n      }, React.createElement(ElementType, _extends({\n        className: classes.root\n      }, accessibility.attributes.root, unhandledProps), MenuButton.create({}, {\n        defaultProps: function defaultProps() {\n          return {\n            accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,\n            menu: menu,\n            // Opening is handled manually.\n            on: [],\n            open: _this2.state.open,\n            trigger: trigger,\n            target: _this2.targetRef.current,\n            position: position,\n            align: align,\n            flipBoundary: flipBoundary,\n            overflowBoundary: overflowBoundary,\n            positionFixed: positionFixed,\n            offset: offset,\n            unstable_pinned: unstable_pinned\n          };\n        },\n        overrideProps: this.handleMenuButtonOverrides\n      }), SplitButtonToggle.create(toggleButton, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            disabled: disabled,\n            primary: primary,\n            secondary: secondary,\n            size: size\n          }, accessibility.attributes.toggleButton);\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onClick: function onClick(e, buttonProps) {\n              _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n              _this2.setState(function (state) {\n                var open = !state.open;\n\n                _invoke(_this2.props, 'onOpenChange', e, Object.assign({}, _this2.props, {\n                  open: open\n                }));\n\n                return {\n                  open: open\n                };\n              });\n            }\n          };\n        }\n      })));\n    }\n  }]);\n\n  return SplitButton;\n}(AutoControlledComponent);\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\n\n\n_defineProperty(SplitButton, \"create\", void 0);\n\n_defineProperty(SplitButton, \"displayName\", 'SplitButton');\n\n_defineProperty(SplitButton, \"Toggle\", SplitButtonToggle);\n\n_defineProperty(SplitButton, \"className\", 'ui-splitbutton');\n\n_defineProperty(SplitButton, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  button: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),\n  onMainButtonClick: PropTypes.func,\n  onMenuItemClick: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  open: PropTypes.bool,\n  size: customPropTypes.size,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  toggleButton: customPropTypes.itemShorthand,\n  position: PropTypes.oneOf(POSITIONS),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.oneOf(['scrollParent', 'window', 'viewport'])]),\n  overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.oneOf(['scrollParent', 'window', 'viewport'])]),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.string,\n  unstable_pinned: PropTypes.bool\n}));\n\n_defineProperty(SplitButton, \"defaultProps\", {\n  accessibility: splitButtonBehavior,\n  toggleButton: {},\n  position: 'below',\n  align: 'start'\n});\n\n_defineProperty(SplitButton, \"autoControlledProps\", ['open']);\n\nexport default withSafeTypeForAs(SplitButton);","map":{"version":3,"sources":["components/SplitButton/SplitButton.tsx"],"names":["SplitButton","AutoControlledComponent","SplitButtonToggle","content","button","customPropTypes","itemShorthand","defaultOpen","PropTypes","bool","menu","onMainButtonClick","func","onMenuItemClick","onOpenChange","open","size","primary","secondary","toggleButton","position","align","flipBoundary","overflowBoundary","positionFixed","offset","string","unstable_pinned","accessibility","React","isFromKeyboard","e","popupProps","onClick","onFocus","ElementType","classes","styles","unhandledProps","disabled","trigger","defaultProps","overrideProps","handleMenuButtonTriggerOverrides","targetRef","root","on","target","handleMenuButtonOverrides","state","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, splitButtonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { WithAsProp, withSafeTypeForAs, ComponentEventHandler, ShorthandValue, ShorthandCollection } from '../../types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  isFromKeyboard,\n  commonPropTypes,\n  AutoControlledComponent,\n  RenderResultConfig,\n  ShorthandFactory,\n  SizeValue,\n} from '../../utils';\nimport SplitButtonToggle, { SplitButtonToggleProps } from './SplitButtonToggle';\nimport Button, { ButtonProps } from '../Button/Button';\nimport MenuButton, { MenuButtonProps } from '../MenuButton/MenuButton';\nimport { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PopupProps } from '../Popup/Popup';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { PositioningProps } from '../../utils/positioner/types';\n\nexport interface SplitButtonProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility;\n\n  /** Shorthand for the main button. */\n  button?: ShorthandValue<ButtonProps>;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** A split button can be disabled. */\n  disabled?: boolean;\n\n  /** Shorthand for the menu. */\n  menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;\n\n  /**\n   * Called after user's click on the main button.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMainButtonClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after user's click on a menu item.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMenuItemClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<SplitButtonProps>;\n\n  /** Defines whether menu is displayed. */\n  open?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  secondary?: boolean;\n\n  /** A split button can be sized */\n  size?: SizeValue;\n\n  /** Shorthand for the toggle button. */\n  toggleButton?: ShorthandValue<SplitButtonToggleProps>;\n}\n\nexport interface SplitButtonState {\n  isFromKeyboard: boolean;\n  open: boolean;\n}\n\nclass SplitButton extends AutoControlledComponent<WithAsProp<SplitButtonProps>, SplitButtonState> {\n  static create: ShorthandFactory<SplitButton>;\n\n  static displayName = 'SplitButton';\n\n  static Toggle = SplitButtonToggle;\n\n  static className = 'ui-splitbutton';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    button: customPropTypes.itemShorthand,\n    defaultOpen: PropTypes.bool,\n    menu: PropTypes.oneOfType([\n      customPropTypes.itemShorthand,\n      PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),\n    ]),\n    onMainButtonClick: PropTypes.func,\n    onMenuItemClick: PropTypes.func,\n    onOpenChange: PropTypes.func,\n    open: PropTypes.bool,\n    size: customPropTypes.size,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    toggleButton: customPropTypes.itemShorthand,\n    position: PropTypes.oneOf(POSITIONS),\n    align: PropTypes.oneOf(ALIGNMENTS),\n    flipBoundary: PropTypes.oneOfType([\n      PropTypes.object as PropTypes.Requireable<Element>,\n      PropTypes.oneOf<'scrollParent' | 'window' | 'viewport'>(['scrollParent', 'window', 'viewport']),\n    ]),\n    overflowBoundary: PropTypes.oneOfType([\n      PropTypes.object as PropTypes.Requireable<Element>,\n      PropTypes.oneOf<'scrollParent' | 'window' | 'viewport'>(['scrollParent', 'window', 'viewport']),\n    ]),\n    positionFixed: PropTypes.bool,\n    offset: PropTypes.string,\n    unstable_pinned: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    accessibility: splitButtonBehavior,\n    toggleButton: {},\n    position: 'below',\n    align: 'start',\n  };\n\n  static autoControlledProps = ['open'];\n\n  targetRef = React.createRef<HTMLDivElement>();\n\n  getInitialAutoControlledState(): SplitButtonState {\n    return {\n      isFromKeyboard: false,\n      open: false,\n    };\n  }\n\n  handleMenuButtonOverrides = (predefinedProps: MenuButtonProps) => ({\n    onMenuItemClick: (e: React.SyntheticEvent, menuItemProps: MenuItemProps) => {\n      this.setState({ open: false });\n      _.invoke(this.props, 'onOpenChange', e, { ...this.props, open: false });\n\n      _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n      _.invoke(this.props, 'onMenuItemClick', e, menuItemProps);\n    },\n    onOpenChange: (e: React.SyntheticEvent, popupProps: PopupProps) => {\n      e.stopPropagation();\n      this.setState({ open: popupProps.open });\n      _.invoke(this.props, 'onOpenChange', e, { ...this.props, open: popupProps.open });\n    },\n  });\n\n  handleMenuButtonTriggerOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(this.props, 'onMainButtonClick', e, buttonProps);\n    },\n    onFocus: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, buttonProps);\n      this.setState({ isFromKeyboard: isFromKeyboard() });\n    },\n  });\n\n  renderComponent({\n    ElementType,\n    classes,\n    accessibility,\n    styles,\n    unhandledProps,\n  }: RenderResultConfig<MenuButtonProps>): React.ReactNode {\n    const {\n      button,\n      disabled,\n      menu,\n      primary,\n      secondary,\n      toggleButton,\n      size,\n      position,\n      align,\n      flipBoundary,\n      overflowBoundary,\n      positionFixed,\n      offset,\n      unstable_pinned,\n    } = this.props;\n    const trigger = Button.create(button, {\n      defaultProps: () => ({\n        styles: styles.menuButton,\n        primary,\n        secondary,\n        disabled,\n      }),\n      overrideProps: this.handleMenuButtonTriggerOverrides,\n    });\n\n    return (\n      <Ref innerRef={this.targetRef}>\n        <ElementType className={classes.root} {...accessibility.attributes.root} {...unhandledProps}>\n          {MenuButton.create(\n            {},\n            {\n              defaultProps: () => ({\n                accessibility: accessibility.childBehaviors ? accessibility.childBehaviors.menuButton : undefined,\n                menu,\n                // Opening is handled manually.\n                on: [],\n                open: this.state.open,\n                trigger,\n                target: this.targetRef.current,\n                position,\n                align,\n                flipBoundary,\n                overflowBoundary,\n                positionFixed,\n                offset,\n                unstable_pinned,\n              }),\n              overrideProps: this.handleMenuButtonOverrides,\n            },\n          )}\n\n          {SplitButtonToggle.create(toggleButton, {\n            defaultProps: () => ({\n              disabled,\n              primary,\n              secondary,\n              size,\n              ...accessibility.attributes.toggleButton,\n            }),\n            overrideProps: (predefinedProps: ButtonProps) => ({\n              onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n                _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n                this.setState(state => {\n                  const open = !state.open;\n                  _.invoke(this.props, 'onOpenChange', e, { ...this.props, open });\n                  return { open };\n                });\n              },\n            }),\n          })}\n        </ElementType>\n      </Ref>\n    );\n  }\n}\n\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\nexport default withSafeTypeForAs<typeof SplitButton, SplitButtonProps>(SplitButton);\n"]},"metadata":{},"sourceType":"module"}