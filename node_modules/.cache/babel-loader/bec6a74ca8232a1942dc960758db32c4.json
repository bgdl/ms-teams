{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _invoke from \"lodash/invoke\";\nimport { attachmentBehavior } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport Box from '../Box/Box';\nimport Button from '../Button/Button';\nimport Text from '../Text/Text';\n\nvar Attachment = function Attachment(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Attachment.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      action = props.action,\n      actionable = props.actionable,\n      className = props.className,\n      description = props.description,\n      design = props.design,\n      disabled = props.disabled,\n      header = props.header,\n      icon = props.icon,\n      onClick = props.onClick,\n      progress = props.progress,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Attachment.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        if (e.currentTarget === e.target) {\n          e.stopPropagation();\n          handleClick(e);\n        }\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Attachment.displayName, {\n    className: Attachment.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        actionable: actionable || !!onClick,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Attachment.handledProps, props);\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), Box.create(icon, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.icon\n      };\n    }\n  }), (header || description) && React.createElement(\"div\", {\n    className: classes.content\n  }, Text.create(header, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.header\n      };\n    }\n  }), Text.create(description, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.description\n      };\n    }\n  })), Button.create(action, {\n    defaultProps: function defaultProps() {\n      return {\n        iconOnly: true,\n        text: true,\n        styles: resolvedStyles.action,\n        className: Attachment.slotClassNames.action\n      };\n    }\n  }), !_isNil(progress) && React.createElement(\"div\", {\n    className: classes.progress,\n    style: {\n      width: \"\".concat(progress, \"%\")\n    }\n  }));\n  setEnd();\n  return element;\n};\n\nAttachment.create = createShorthandFactory({\n  Component: Attachment,\n  mappedProp: 'header'\n});\nAttachment.slotClassNames = {\n  action: \"\".concat(Attachment.className, \"__action\")\n};\nAttachment.className = 'ui-attachment';\nAttachment.displayName = 'Attachment';\nAttachment.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n});\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior\n};\nAttachment.handledProps = Object.keys(Attachment.propTypes);\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\n\nexport default withSafeTypeForAs(Attachment);","map":{"version":3,"sources":["components/Attachment/Attachment.tsx"],"names":["Attachment","context","React","setStart","setEnd","useTelemetry","accessibility","action","actionable","className","description","design","disabled","header","icon","onClick","progress","styles","variables","props","getA11Props","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","defaultProps","content","iconOnly","text","width","createShorthandFactory","Component","mappedProp","customPropTypes","PropTypes","attachmentBehavior","Object","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, attachmentBehavior, AttachmentBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  ComponentEventHandler,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { createShorthandFactory, commonPropTypes, UIComponentProps, ChildrenComponentProps } from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport Button, { ButtonProps } from '../Button/Button';\nimport Text, { TextProps } from '../Text/Text';\n\nexport interface AttachmentProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<AttachmentBehaviorProps>;\n\n  /** Button shorthand for the action slot. */\n  action?: ShorthandValue<ButtonProps>;\n\n  /** An Attachment can be styled to indicate possible user interaction. */\n  actionable?: boolean;\n\n  /** A string describing the attachment. */\n  description?: ShorthandValue<TextProps>;\n\n  /** An attachment can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** The name of the attachment. */\n  header?: ShorthandValue<TextProps>;\n\n  /** Shorthand for the icon. */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** Value indicating percent complete. */\n  progress?: string | number;\n\n  /**\n   * Called after user's click.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AttachmentProps>;\n}\n\nexport type AttachmentStylesProps = Required<Pick<AttachmentProps, 'actionable' | 'disabled'>>;\n\nexport interface AttachmentSlotClassNames {\n  action: string;\n}\n\nconst Attachment: React.FC<WithAsProp<AttachmentProps>> &\n  FluentComponentStaticProps<AttachmentProps> & { slotClassNames: AttachmentSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Attachment.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    action,\n    actionable,\n    className,\n    description,\n    design,\n    disabled,\n    header,\n    icon,\n    onClick,\n    progress,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Attachment.displayName,\n    actionHandlers: {\n      performClick: e => {\n        if (e.currentTarget === e.target) {\n          e.stopPropagation();\n          handleClick(e);\n        }\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<AttachmentStylesProps>(Attachment.displayName, {\n    className: Attachment.className,\n    mapPropsToStyles: () => ({\n      actionable: actionable || !!onClick,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Attachment.handledProps, props);\n\n  const handleClick = (e: React.KeyboardEvent | React.MouseEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, onClick: handleClick, ...unhandledProps })}>\n      {Box.create(icon, {\n        defaultProps: () => ({ styles: resolvedStyles.icon }),\n      })}\n      {(header || description) && (\n        <div className={classes.content}>\n          {Text.create(header, {\n            defaultProps: () => ({ styles: resolvedStyles.header }),\n          })}\n\n          {Text.create(description, {\n            defaultProps: () => ({ styles: resolvedStyles.description }),\n          })}\n        </div>\n      )}\n      {Button.create(action, {\n        defaultProps: () => ({\n          iconOnly: true,\n          text: true,\n          styles: resolvedStyles.action,\n          className: Attachment.slotClassNames.action,\n        }),\n      })}\n      {!_.isNil(progress) && <div className={classes.progress} style={{ width: `${progress}%` }} />}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nAttachment.create = createShorthandFactory({ Component: Attachment, mappedProp: 'header' });\nAttachment.slotClassNames = {\n  action: `${Attachment.className}__action`,\n};\n\nAttachment.className = 'ui-attachment';\nAttachment.displayName = 'Attachment';\n\nAttachment.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  action: customPropTypes.itemShorthand,\n  actionable: PropTypes.bool,\n  description: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  icon: customPropTypes.shorthandAllowingChildren,\n  progress: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\nAttachment.defaultProps = {\n  accessibility: attachmentBehavior,\n};\n\nAttachment.handledProps = Object.keys(Attachment.propTypes) as any;\n\n/**\n * An Attachment represents a file or media attachment, which may contain some metadata or actions.\n */\nexport default withSafeTypeForAs<typeof Attachment, AttachmentProps>(Attachment);\n"]},"metadata":{},"sourceType":"module"}