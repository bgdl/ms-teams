{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { treeTitleBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\n\nvar TreeTitle = function TreeTitle(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(TreeTitle.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      design = props.design,\n      hasSubtree = props.hasSubtree,\n      level = props.level,\n      index = props.index,\n      styles = props.styles,\n      treeSize = props.treeSize,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        e.preventDefault();\n        handleClick(e);\n      }\n    },\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        hasSubtree: hasSubtree,\n        level: level,\n        index: index,\n        treeSize: treeSize\n      };\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(TreeTitle.displayName, {\n    className: TreeTitle.className,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, rtlTextContainer.getAttributes({\n    forElements: [children, content]\n  }), {}, unhandledProps)), childrenExist(children) ? children : content);\n  setEnd();\n  return element;\n};\n\nTreeTitle.className = 'ui-tree__title';\nTreeTitle.displayName = 'TreeTitle';\nTreeTitle.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  treeSize: PropTypes.number\n});\nTreeTitle.defaultProps = {\n  as: 'a',\n  accessibility: treeTitleBehavior\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes);\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content'\n});\n/**\n * A TreeTitle renders a title of TreeItem.\n */\n\nexport default withSafeTypeForAs(TreeTitle);","map":{"version":3,"sources":["components/Tree/TreeTitle.tsx"],"names":["TreeTitle","context","React","setStart","setEnd","useTelemetry","accessibility","children","className","content","design","hasSubtree","level","index","styles","treeSize","variables","props","getA11Props","useAccessibility","debugName","actionHandlers","performClick","e","handleClick","mapPropsToBehavior","rtl","classes","useStyles","mapPropsToInlineStyles","ElementType","getElementType","unhandledProps","useUnhandledProps","element","onClick","forElements","childrenExist","commonPropTypes","PropTypes","expanded","number","as","treeTitleBehavior","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, treeTitleBehavior, TreeTitleBehaviorProps } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  commonPropTypes,\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  rtlTextContainer,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  WithAsProp,\n  withSafeTypeForAs,\n} from '../../types';\n\nexport interface TreeTitleProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<TreeTitleBehaviorProps>;\n\n  /** Whether or not the title has a subtree. */\n  hasSubtree?: boolean;\n\n  /** The index of the title among its siblings. Count starts at 1. */\n  index?: number;\n\n  /** Level of the tree/subtree that contains this title. */\n  level?: number;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<TreeTitleProps>;\n\n  /** Whether or not the subtree of the title is in the open state. */\n  expanded?: boolean;\n\n  /** Size of the tree containing this title without any children. */\n  treeSize?: number;\n}\n\nexport type TreeTitleStylesProps = never;\n\nconst TreeTitle: React.FC<WithAsProp<TreeTitleProps>> & FluentComponentStaticProps<TreeTitleProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(TreeTitle.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    children,\n    className,\n    content,\n    design,\n    hasSubtree,\n    level,\n    index,\n    styles,\n    treeSize,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: TreeTitle.displayName,\n    actionHandlers: {\n      performClick: e => {\n        e.preventDefault();\n        handleClick(e);\n      },\n    },\n    mapPropsToBehavior: () => ({\n      hasSubtree,\n      level,\n      index,\n      treeSize,\n    }),\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<TreeTitleStylesProps>(TreeTitle.displayName, {\n    className: TreeTitle.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TreeTitle.handledProps, props);\n\n  const handleClick = e => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...rtlTextContainer.getAttributes({ forElements: [children, content] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : content}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nTreeTitle.className = 'ui-tree__title';\nTreeTitle.displayName = 'TreeTitle';\n\nTreeTitle.propTypes = {\n  ...commonPropTypes.createCommon(),\n  hasSubtree: PropTypes.bool,\n  index: PropTypes.number,\n  level: PropTypes.number,\n  onClick: PropTypes.func,\n  expanded: PropTypes.bool,\n  treeSize: PropTypes.number,\n};\nTreeTitle.defaultProps = {\n  as: 'a',\n  accessibility: treeTitleBehavior,\n};\nTreeTitle.handledProps = Object.keys(TreeTitle.propTypes) as any;\n\nTreeTitle.create = createShorthandFactory({\n  Component: TreeTitle,\n  mappedProp: 'content',\n});\n\n/**\n * A TreeTitle renders a title of TreeItem.\n */\nexport default withSafeTypeForAs<typeof TreeTitle, TreeTitleProps, 'a'>(TreeTitle);\n"]},"metadata":{},"sourceType":"module"}