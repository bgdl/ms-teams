{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _get from \"lodash/get\";\nimport { textAreaBehavior } from '@fluentui/accessibility';\nimport { withSafeTypeForAs } from '../../types';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { commonPropTypes, AutoControlledComponent, applyAccessibilityKeyHandlers } from '../../utils';\n\nvar TextArea = /*#__PURE__*/function (_AutoControlledCompon) {\n  _inherits(TextArea, _AutoControlledCompon);\n\n  function TextArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (e) {\n      var value = _get(e, 'target.value');\n\n      _invoke(_this.props, 'onChange', e, Object.assign({}, _this.props, {\n        value: value\n      }));\n\n      _this.setState({\n        value: value\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TextArea, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          accessibility = _ref.accessibility,\n          variables = _ref.variables,\n          styles = _ref.styles,\n          unhandledProps = _ref.unhandledProps;\n      var disabled = this.props.disabled;\n      var _this$state$value = this.state.value,\n          value = _this$state$value === void 0 ? '' : _this$state$value;\n      return React.createElement(ElementType, _extends({\n        value: value,\n        className: classes.root,\n        onChange: this.handleChange,\n        disabled: disabled\n      }, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)));\n    }\n  }]);\n\n  return TextArea;\n}(AutoControlledComponent);\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\n\n\n_defineProperty(TextArea, \"className\", 'ui-textarea');\n\n_defineProperty(TextArea, \"displayName\", 'TextArea');\n\n_defineProperty(TextArea, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.string,\n  disabled: PropTypes.bool\n}));\n\n_defineProperty(TextArea, \"defaultProps\", {\n  as: 'textarea',\n  accessibility: textAreaBehavior\n});\n\n_defineProperty(TextArea, \"autoControlledProps\", ['value']);\n\nexport default withSafeTypeForAs(TextArea);","map":{"version":3,"sources":["components/TextArea/TextArea.tsx"],"names":["TextArea","AutoControlledComponent","content","defaultValue","PropTypes","string","onChange","func","value","disabled","bool","as","accessibility","textAreaBehavior","ElementType","classes","variables","styles","unhandledProps","applyAccessibilityKeyHandlers","withSafeTypeForAs"],"mappings":";;;;;;;;;;AAAA,SAAA,gBAAA,QAAA,yBAAA;AACA,SAAA,iBAAA,QAAA,aAAA;AAEA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,SAAA,eAAA,EAAA,uBAAA,EAAA,6BAAA,QAAA,aAAA;;IA4CMA,Q;;;;;;;;;;;;;;;;mEA8CW,UAAA,CAAA,EAA4C;AACzD,UAAMQ,KAAK,GAAG,IAAA,CAAA,CAAA,EAAd,cAAc,CAAd;;AAEA,MAAA,OAAA,CAAS,KAAA,CAAT,KAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAyC,KAAA,CAAzC,KAAA,EAAA;AAAqDA,QAAAA,KAAK,EAALA;AAArD,OAAA,CAAA,CAAA;;AACA,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEA,QAAAA,KAAK,EAALA;AAAF,OAAd;;;;;;;;0CArBoC;AAAA,UANpCM,WAMoC,GAAA,IAAA,CANpCA,WAMoC;AAAA,UALpCC,OAKoC,GAAA,IAAA,CALpCA,OAKoC;AAAA,UAJpCH,aAIoC,GAAA,IAAA,CAJpCA,aAIoC;AAAA,UAHpCI,SAGoC,GAAA,IAAA,CAHpCA,SAGoC;AAAA,UAFpCC,MAEoC,GAAA,IAAA,CAFpCA,MAEoC;AAAA,UADpCC,cACoC,GAAA,IAAA,CADpCA,cACoC;AAAA,UAC5BT,QAD4B,GACf,KADe,KACf,CADe,QAAA;AAAA,UAAA,iBAAA,GAEb,KAFa,KAEb,CAFa,KAAA;AAAA,UAE5BD,KAF4B,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,iBAAA;AAIpC,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,QAAA,KAAK,EADP,KAAA;AAEE,QAAA,SAAS,EAAEO,OAAO,CAFpB,IAAA;AAGE,QAAA,QAAQ,EAAE,KAHZ,YAAA;AAIE,QAAA,QAAQ,EAAEN;AAJZ,OAAA,EAKMG,aAAa,CAAbA,UAAAA,CALN,IAAA,EAAA,cAAA,EAOMO,6BAA6B,CAACP,aAAa,CAAbA,WAAAA,CAAD,IAAA,EARrC,cAQqC,CAPnC,CAAA,CADF;AAWD;;;;EA5CoBX,uB;AAsDvB;;;;;;;;;;;;gBAtDMD,Q,eACe,a;;gBADfA,Q,iBAGiB,U;;gBAHjBA,Q,iCAMC,eAAe,CAAf,YAAA,CAA6B;AAC9BE,EAAAA,OAAO,EAAE;AADqB,CAA7B,C;AAGHC,EAAAA,YAAY,EAAEC,SAAS,CAACC,M;AACxBC,EAAAA,QAAQ,EAAEF,SAAS,CAACG,I;AACpBC,EAAAA,KAAK,EAAEJ,SAAS,CAACC,M;AACjBI,EAAAA,QAAQ,EAAEL,SAAS,CAACM;;;gBAZlBV,Q,kBAekB;AACpBW,EAAAA,EAAE,EADkB,UAAA;AAEpBC,EAAAA,aAAa,EAAEC;AAFK,C;;gBAflBb,Q,yBAoByB,CAAA,OAAA,C;;AA4C/B,eAAeoB,iBAAiB,CAAhC,QAAgC,CAAhC","sourcesContent":["import { Accessibility, textAreaBehavior } from '@fluentui/accessibility';\nimport { ComponentEventHandler, WithAsProp, withSafeTypeForAs } from '../../types';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  RenderResultConfig,\n  AutoControlledComponent,\n  applyAccessibilityKeyHandlers,\n} from '../../utils';\n\nexport interface TextAreaProps extends UIComponentProps, ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility;\n\n  /** The default value of the text area. */\n  defaultValue?: string;\n\n  /**\n   * Called on change.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<TextAreaProps>;\n\n  /** The value of the text area. */\n  value?: string;\n\n  /** The text area becomes read-only. */\n  disabled?: boolean;\n\n  /** An input can have inverted colors. */\n  inverted?: boolean;\n\n  /** A textarea can be resized. */\n  resize?: 'none' | 'both' | 'horizontal' | 'vertical';\n\n  /** A textarea can take the width of its container. */\n  fluid?: boolean;\n}\n\nexport interface TextAreaState {\n  value?: TextAreaProps['value'];\n}\n\nclass TextArea extends AutoControlledComponent<WithAsProp<TextAreaProps>, TextAreaState> {\n  static className = 'ui-textarea';\n\n  static displayName = 'TextArea';\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      content: false,\n    }),\n    defaultValue: PropTypes.string,\n    onChange: PropTypes.func,\n    value: PropTypes.string,\n    disabled: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    as: 'textarea',\n    accessibility: textAreaBehavior,\n  };\n\n  static autoControlledProps = ['value'];\n\n  renderComponent({\n    ElementType,\n    classes,\n    accessibility,\n    variables,\n    styles,\n    unhandledProps,\n  }: RenderResultConfig<TextAreaProps>) {\n    const { disabled } = this.props;\n    const { value = '' } = this.state;\n\n    return (\n      <ElementType\n        value={value}\n        className={classes.root}\n        onChange={this.handleChange}\n        disabled={disabled}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      />\n    );\n  }\n\n  handleChange = (e: React.ChangeEvent | React.FormEvent) => {\n    const value = _.get(e, 'target.value');\n\n    _.invoke(this.props, 'onChange', e, { ...this.props, value });\n    this.setState({ value });\n  };\n}\n\n/**\n * A TextArea is a multi-line plan-text editing control.\n *\n * @accessibility\n * For good screen reader experience set `aria-label` or `aria-labelledby` attribute for textarea.\n * When using maxlength attribute, provide the information about max length in label for screen reader.\n * @accessibilityIssues\n * [NVDA - No announcement of maxlength](https://github.com/nvaccess/nvda/issues/7910)\n * [JAWS - textarea - no announcement of maxlength](https://github.com/FreedomScientific/VFO-standards-support/issues/300)\n */\nexport default withSafeTypeForAs<typeof TextArea, TextAreaProps, 'textarea'>(TextArea);\n"]},"metadata":{},"sourceType":"module"}