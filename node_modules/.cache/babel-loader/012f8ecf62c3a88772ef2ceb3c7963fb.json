{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { withSafeTypeForAs } from '../../types';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport Box from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nvar ChatItem = function ChatItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ChatItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      attached = props.attached,\n      children = props.children,\n      className = props.className,\n      contentPosition = props.contentPosition,\n      design = props.design,\n      gutter = props.gutter,\n      message = props.message,\n      styles = props.styles,\n      variables = props.variables;\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ChatItem.displayName, {\n    className: ChatItem.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        attached: attached,\n        contentPosition: contentPosition\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var renderContent = function renderContent() {\n    var gutterElement = Box.create(gutter, {\n      defaultProps: function defaultProps() {\n        return getA11Props('gutter', {\n          className: ChatItem.slotClassNames.gutter,\n          styles: resolvedStyles.gutter\n        });\n      }\n    });\n    var messageElement = Box.create(message, {\n      defaultProps: function defaultProps() {\n        return getA11Props('message', {\n          className: ChatItem.slotClassNames.message,\n          styles: resolvedStyles.message\n        });\n      }\n    });\n    return React.createElement(ChatItemContextProvider, {\n      value: {\n        attached: attached\n      }\n    }, contentPosition === 'start' && gutterElement, messageElement, contentPosition === 'end' && gutterElement);\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), {}, unhandledProps)), childrenExist(children) ? children : renderContent());\n  setEnd();\n  return element;\n};\n\nChatItem.className = 'ui-chat__item';\nChatItem.displayName = 'ChatItem';\nChatItem.slotClassNames = {\n  message: \"\".concat(ChatItem.className, \"__message\"),\n  gutter: \"\".concat(ChatItem.className, \"__gutter\")\n};\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false\n};\nChatItem.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand\n});\nChatItem.handledProps = Object.keys(ChatItem.propTypes);\nChatItem.create = createShorthandFactory({\n  Component: ChatItem,\n  mappedProp: 'message'\n});\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\n\nexport default withSafeTypeForAs(ChatItem);","map":{"version":3,"sources":["components/Chat/ChatItem.tsx"],"names":["ChatItem","context","React","setStart","setEnd","useTelemetry","accessibility","attached","children","className","contentPosition","design","gutter","message","styles","variables","props","getA11Props","useAccessibility","debugName","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","renderContent","gutterElement","defaultProps","messageElement","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","forElements","childrenExist","as","content","PropTypes","customPropTypes","itemShorthand","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  WithAsProp,\n  ShorthandValue,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n} from '../../utils';\nimport Box, { BoxProps } from '../Box/Box';\nimport { ChatItemContextProvider } from './chatItemContext';\n\nexport interface ChatItemSlotClassNames {\n  message: string;\n  gutter: string;\n}\n\nexport interface ChatItemProps extends UIComponentProps, ChildrenComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n\n  /** Controls item's relation to other chat items. */\n  attached?: boolean | 'top' | 'bottom';\n\n  /** Chat items can have a gutter. */\n  gutter?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the content is positioned at the start or the end. */\n  contentPosition?: 'start' | 'end';\n\n  /** Chat items can have a message. */\n  message?: ShorthandValue<BoxProps>;\n}\n\nexport type ChatItemStylesProps = Pick<ChatItemProps, 'attached' | 'contentPosition'>;\n\nconst ChatItem: React.FC<WithAsProp<ChatItemProps>> &\n  FluentComponentStaticProps<ChatItemProps> & {\n    slotClassNames: ChatItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ChatItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    attached,\n    children,\n    className,\n    contentPosition,\n    design,\n    gutter,\n    message,\n    styles,\n    variables,\n  } = props;\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: ChatItem.displayName,\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<ChatItemStylesProps>(ChatItem.displayName, {\n    className: ChatItem.className,\n    mapPropsToStyles: () => ({\n      attached,\n      contentPosition,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const renderContent = () => {\n    const gutterElement = Box.create(gutter, {\n      defaultProps: () =>\n        getA11Props('gutter', {\n          className: ChatItem.slotClassNames.gutter,\n          styles: resolvedStyles.gutter,\n        }),\n    });\n    const messageElement = Box.create(message, {\n      defaultProps: () =>\n        getA11Props('message', {\n          className: ChatItem.slotClassNames.message,\n          styles: resolvedStyles.message,\n        }),\n    });\n\n    return (\n      <ChatItemContextProvider value={{ attached }}>\n        {contentPosition === 'start' && gutterElement}\n        {messageElement}\n        {contentPosition === 'end' && gutterElement}\n      </ChatItemContextProvider>\n    );\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ChatItem.handledProps, props);\n\n  const element = (\n    <ElementType\n      {...getA11Props('root', {\n        className: classes.root,\n        ...rtlTextContainer.getAttributes({ forElements: [children] }),\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? children : renderContent()}\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nChatItem.className = 'ui-chat__item';\nChatItem.displayName = 'ChatItem';\n\nChatItem.slotClassNames = {\n  message: `${ChatItem.className}__message`,\n  gutter: `${ChatItem.className}__gutter`,\n};\n\nChatItem.defaultProps = {\n  as: 'li',\n  contentPosition: 'start',\n  attached: false,\n};\nChatItem.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'top' | 'bottom'>(['top', 'bottom'])]),\n  gutter: customPropTypes.itemShorthand,\n  contentPosition: PropTypes.oneOf(['start', 'end']),\n  message: customPropTypes.itemShorthand,\n};\nChatItem.handledProps = Object.keys(ChatItem.propTypes) as any;\n\nChatItem.create = createShorthandFactory({ Component: ChatItem, mappedProp: 'message' });\n\n/**\n * A ChatItem is container for single entity in Chat (e.g. message, notification, etc).\n */\nexport default withSafeTypeForAs<typeof ChatItem, ChatItemProps, 'li'>(ChatItem);\n"]},"metadata":{},"sourceType":"module"}