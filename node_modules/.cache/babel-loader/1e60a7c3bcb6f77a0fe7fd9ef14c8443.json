{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\nimport gridHeaderCellBehavior from './gridHeaderCellBehavior';\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Provides arrow key navigation in horizontal direction.\n * Focused active element of the component is reset when TAB from the component.\n * When component's container element receives focus, focus will be set to the default focusable child element of the component.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridHeaderCellBehavior' for 'cell' child component.\n */\n\nvar gridHeaderRowBehavior = function gridHeaderRowBehavior(props) {\n  var _root;\n\n  return {\n    attributes: {\n      root: (_root = {}, _defineProperty(_root, IS_FOCUSABLE_ATTRIBUTE, true), _defineProperty(_root, \"role\", 'row'), _root)\n    },\n    focusZone: {\n      props: {\n        direction: FocusZoneDirection.horizontal,\n        shouldFocusInnerElementWhenReceivedFocus: true,\n        shouldResetActiveElementWhenTabFromZone: true\n      }\n    },\n    keyActions: {\n      root: {\n        unsetRowTabbable: {\n          keyCombinations: [{\n            keyCode: keyboardKey.Tab,\n            shiftKey: true\n          }]\n        }\n      }\n    },\n    childBehaviors: {\n      cell: gridHeaderCellBehavior\n    }\n  };\n};\n\nexport default gridHeaderRowBehavior;","map":{"version":3,"sources":["behaviors/Table/gridHeaderRowBehavior.ts"],"names":["gridHeaderRowBehavior","attributes","root","focusZone","props","direction","FocusZoneDirection","shouldFocusInnerElementWhenReceivedFocus","shouldResetActiveElementWhenTabFromZone","keyActions","unsetRowTabbable","keyCombinations","keyCode","keyboardKey","shiftKey","childBehaviors","cell","gridHeaderCellBehavior"],"mappings":";AACA,SAAA,sBAAA,QAAA,kBAAA;AACA,SAAA,kBAAA,QAAA,uBAAA;AACA,OAAO,KAAP,WAAA,MAAA,cAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AAEA;;;;;;;;;;;AAUA,IAAMA,qBAAoC,GAAG,SAAvCA,qBAAuC,CAAA,KAAA,EAAK;AAAA,MAAA,KAAA;;AAAA,SAAK;AACrDC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,GAAA,KAAA,GAAA,EAAA,EAAA,eAAA,CAAA,KAAA,EAAA,sBAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,KAAA,EAAA,MAAA,EAAA,KAAA,CAAA,EAAA,KAAA;AADM,KADyC;AAOrDC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAEC,kBAAkB,CADxB,UAAA;AAELC,QAAAA,wCAAwC,EAFnC,IAAA;AAGLC,QAAAA,uCAAuC,EAAE;AAHpC;AADE,KAP0C;AAcrDC,IAAAA,UAAU,EAAE;AACVP,MAAAA,IAAI,EAAE;AACJQ,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,eAAe,EAAE,CAAC;AAAEC,YAAAA,OAAO,EAAEC,WAAW,CAAtB,GAAA;AAA4BC,YAAAA,QAAQ,EAAE;AAAtC,WAAD;AADD;AADd;AADI,KAdyC;AAqBrDC,IAAAA,cAAc,EAAE;AACdC,MAAAA,IAAI,EAAEC;AADQ;AArBqC,GAAL;AAAlD,CAAA;;AA0BA,eAAA,qBAAA","sourcesContent":["import { Accessibility } from '../../types';\nimport { IS_FOCUSABLE_ATTRIBUTE } from '../../attributes';\nimport { FocusZoneDirection } from '../../focusZone/types';\nimport * as keyboardKey from 'keyboard-key';\nimport gridHeaderCellBehavior from './gridHeaderCellBehavior';\n\n/**\n * @specification\n * Adds role='row'.\n * Adds attribute 'data-is-focusable=true' to 'root' slot.\n * Provides arrow key navigation in horizontal direction.\n * Focused active element of the component is reset when TAB from the component.\n * When component's container element receives focus, focus will be set to the default focusable child element of the component.\n * Triggers 'unsetRowTabbable' action using 'shiftKey' + 'Tab' key on 'root'.\n * Applies 'gridHeaderCellBehavior' for 'cell' child component.\n */\nconst gridHeaderRowBehavior: Accessibility = props => ({\n  attributes: {\n    root: {\n      [IS_FOCUSABLE_ATTRIBUTE]: true,\n      role: 'row',\n    },\n  },\n  focusZone: {\n    props: {\n      direction: FocusZoneDirection.horizontal,\n      shouldFocusInnerElementWhenReceivedFocus: true,\n      shouldResetActiveElementWhenTabFromZone: true,\n    },\n  },\n  keyActions: {\n    root: {\n      unsetRowTabbable: {\n        keyCombinations: [{ keyCode: keyboardKey.Tab, shiftKey: true }],\n      },\n    },\n  },\n  childBehaviors: {\n    cell: gridHeaderCellBehavior,\n  },\n});\n\nexport default gridHeaderRowBehavior;\n"]},"metadata":{},"sourceType":"module"}