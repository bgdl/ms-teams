{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { createShorthandFactory, pxToRem, UIComponent, commonPropTypes, rtlTextContainer } from '../../utils';\nimport Layout from '../Layout/Layout';\nimport { withSafeTypeForAs } from '../../types';\n\nvar ItemLayout = /*#__PURE__*/function (_UIComponent) {\n  _inherits(ItemLayout, _UIComponent);\n\n  function ItemLayout() {\n    _classCallCheck(this, ItemLayout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ItemLayout).apply(this, arguments));\n  }\n\n  _createClass(ItemLayout, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles;\n      var _this$props = this.props,\n          as = _this$props.as,\n          debug = _this$props.debug,\n          endMedia = _this$props.endMedia,\n          media = _this$props.media,\n          renderMainArea = _this$props.renderMainArea,\n          rootCSS = _this$props.rootCSS,\n          mediaCSS = _this$props.mediaCSS,\n          endMediaCSS = _this$props.endMediaCSS;\n      var startArea = media;\n      var mainArea = renderMainArea(this.props, this.state, classes);\n      var endArea = endMedia;\n      var mergedMediaClasses = cx(ItemLayout.slotClassNames.media, classes.media);\n      var mergedEndMediaClasses = cx(ItemLayout.slotClassNames.endMedia, classes.endMedia);\n      return React.createElement(Layout, _extends({\n        as: as,\n        className: classes.root,\n        styles: styles.root,\n        rootCSS: rootCSS,\n        alignItems: \"center\",\n        gap: pxToRem(8),\n        debug: debug,\n        reducing: true,\n        start: startArea && React.createElement(\"span\", {\n          style: mediaCSS,\n          className: mergedMediaClasses\n        }, rtlTextContainer.createFor({\n          element: startArea\n        })),\n        main: mainArea,\n        end: endArea && React.createElement(\"span\", {\n          style: endMediaCSS,\n          className: mergedEndMediaClasses\n        }, rtlTextContainer.createFor({\n          element: endArea\n        }))\n      }, unhandledProps));\n    }\n  }]);\n\n  return ItemLayout;\n}(UIComponent);\n\n_defineProperty(ItemLayout, \"create\", void 0);\n\n_defineProperty(ItemLayout, \"displayName\", 'ItemLayout');\n\n_defineProperty(ItemLayout, \"className\", 'ui-itemlayout');\n\n_defineProperty(ItemLayout, \"slotClassNames\", void 0);\n\n_defineProperty(ItemLayout, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  accessibility: false,\n  children: false,\n  content: false\n}), {\n  contentMedia: PropTypes.any,\n  content: PropTypes.any,\n  debug: PropTypes.bool,\n  header: PropTypes.any,\n  endMedia: PropTypes.any,\n  headerMedia: PropTypes.any,\n  media: PropTypes.any,\n  renderContentArea: PropTypes.func,\n  renderHeaderArea: PropTypes.func,\n  renderMainArea: PropTypes.func,\n  rootCSS: PropTypes.object,\n  mediaCSS: PropTypes.object,\n  headerCSS: PropTypes.object,\n  headerMediaCSS: PropTypes.object,\n  contentCSS: PropTypes.object,\n  contentMediaCSS: PropTypes.object,\n  endMediaCSS: PropTypes.object\n}));\n\n_defineProperty(ItemLayout, \"defaultProps\", {\n  as: 'div',\n  renderMainArea: function renderMainArea(props, state, classes) {\n    var renderHeaderArea = props.renderHeaderArea,\n        renderContentArea = props.renderContentArea;\n    var headerArea = renderHeaderArea(props, state, classes);\n    var contentArea = renderContentArea(props, state, classes);\n    return React.createElement(\"div\", {\n      className: ItemLayout.slotClassNames.main,\n      style: {\n        gridTemplateRows: '1fr 1fr'\n      }\n    }, headerArea, contentArea);\n  },\n  renderHeaderArea: function renderHeaderArea(props, state, classes) {\n    var debug = props.debug,\n        header = props.header,\n        headerMedia = props.headerMedia,\n        headerCSS = props.headerCSS,\n        headerMediaCSS = props.headerMediaCSS;\n    var mergedClasses = cx(ItemLayout.slotClassNames.header, classes.header);\n    var mediaClasses = cx(ItemLayout.slotClassNames.headerMedia, classes.headerMedia);\n    return !header && !headerMedia ? null : React.createElement(Layout, {\n      className: mergedClasses,\n      alignItems: \"end\",\n      gap: pxToRem(8),\n      debug: debug,\n      main: rtlTextContainer.createFor({\n        element: header\n      }),\n      rootCSS: headerCSS,\n      end: headerMedia && React.createElement(\"span\", {\n        style: headerMediaCSS,\n        className: mediaClasses\n      }, rtlTextContainer.createFor({\n        element: headerMedia\n      }))\n    });\n  },\n  renderContentArea: function renderContentArea(props, state, classes) {\n    var debug = props.debug,\n        content = props.content,\n        contentMedia = props.contentMedia,\n        contentCSS = props.contentCSS,\n        contentMediaCSS = props.contentMediaCSS;\n    var mergedClasses = cx(ItemLayout.slotClassNames.content, classes.content);\n    var mediaClasses = cx(ItemLayout.slotClassNames.contentMedia, classes.contentMedia);\n    return !content && !contentMedia ? null : React.createElement(Layout, {\n      className: mergedClasses,\n      alignItems: \"start\",\n      gap: pxToRem(8),\n      debug: debug,\n      rootCSS: contentCSS,\n      main: rtlTextContainer.createFor({\n        element: content\n      }),\n      end: contentMedia && React.createElement(\"span\", {\n        style: contentMediaCSS,\n        className: mediaClasses\n      }, rtlTextContainer.createFor({\n        element: contentMedia\n      }))\n    });\n  }\n});\n\nItemLayout.create = createShorthandFactory({\n  Component: ItemLayout,\n  mappedProp: 'content'\n});\nItemLayout.slotClassNames = {\n  header: \"\".concat(ItemLayout.className, \"__header\"),\n  headerMedia: \"\".concat(ItemLayout.className, \"__headerMedia\"),\n  main: \"\".concat(ItemLayout.className, \"__main\"),\n  content: \"\".concat(ItemLayout.className, \"__content\"),\n  contentMedia: \"\".concat(ItemLayout.className, \"__contentMedia\"),\n  media: \"\".concat(ItemLayout.className, \"__media\"),\n  endMedia: \"\".concat(ItemLayout.className, \"__endMedia\")\n};\n/**\n * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.\n */\n\nexport default withSafeTypeForAs(ItemLayout);","map":{"version":3,"sources":["components/ItemLayout/ItemLayout.tsx"],"names":["ItemLayout","UIComponent","accessibility","children","content","contentMedia","PropTypes","any","debug","bool","header","endMedia","headerMedia","media","renderContentArea","func","renderHeaderArea","renderMainArea","rootCSS","object","mediaCSS","headerCSS","headerMediaCSS","contentCSS","contentMediaCSS","endMediaCSS","as","props","headerArea","contentArea","gridTemplateRows","mergedClasses","cx","classes","mediaClasses","pxToRem","element","unhandledProps","styles","startArea","mainArea","endArea","mergedMediaClasses","mergedEndMediaClasses","createShorthandFactory","Component","mappedProp","main","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { ComponentSlotClasses } from '@fluentui/react-bindings';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport {\n  createShorthandFactory,\n  pxToRem,\n  UIComponent,\n  UIComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  rtlTextContainer,\n  ShorthandFactory,\n} from '../../utils';\nimport Layout from '../Layout/Layout';\nimport { WithAsProp, withSafeTypeForAs } from '../../types';\n\nexport interface ItemLayoutSlotClassNames {\n  header: string;\n  headerMedia: string;\n  main: string;\n  content: string;\n  contentMedia: string;\n  media: string;\n  endMedia: string;\n}\n\nexport interface ItemLayoutProps extends UIComponentProps, ContentComponentProps<any> {\n  contentMedia?: any;\n  /** Toggle debug mode */\n  debug?: boolean;\n  header?: any;\n  endMedia?: any;\n  headerMedia?: any;\n  media?: any;\n  renderContentArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderHeaderArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  renderMainArea?: (props: ItemLayoutProps, state: any, classes: ComponentSlotClasses) => React.ReactNode;\n  /** Styled applied to the root element of the rendered component. */\n  rootCSS?: React.CSSProperties;\n  /** Styled applied to the media element of the rendered component. */\n  mediaCSS?: React.CSSProperties;\n  /** Styled applied to the header element of the rendered component. */\n  headerCSS?: React.CSSProperties;\n  /** Styled applied to the header media element of the rendered component. */\n  headerMediaCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentCSS?: React.CSSProperties;\n  /** Styled applied to the content element of the rendered component. */\n  contentMediaCSS?: React.CSSProperties;\n  /** Styled applied to the end media element of the rendered component. */\n  endMediaCSS?: React.CSSProperties;\n}\n\nclass ItemLayout extends UIComponent<WithAsProp<ItemLayoutProps>, any> {\n  static create: ShorthandFactory<ItemLayoutProps>;\n\n  static displayName = 'ItemLayout';\n\n  static className = 'ui-itemlayout';\n\n  static slotClassNames: ItemLayoutSlotClassNames;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({\n      accessibility: false,\n      children: false,\n      content: false,\n    }),\n    contentMedia: PropTypes.any,\n    content: PropTypes.any,\n    debug: PropTypes.bool,\n    header: PropTypes.any,\n    endMedia: PropTypes.any,\n    headerMedia: PropTypes.any,\n    media: PropTypes.any,\n    renderContentArea: PropTypes.func,\n    renderHeaderArea: PropTypes.func,\n    renderMainArea: PropTypes.func,\n    rootCSS: PropTypes.object,\n    mediaCSS: PropTypes.object,\n    headerCSS: PropTypes.object,\n    headerMediaCSS: PropTypes.object,\n    contentCSS: PropTypes.object,\n    contentMediaCSS: PropTypes.object,\n    endMediaCSS: PropTypes.object,\n  };\n\n  static defaultProps = {\n    as: 'div',\n\n    renderMainArea: (props, state, classes) => {\n      const { renderHeaderArea, renderContentArea } = props;\n\n      const headerArea = renderHeaderArea(props, state, classes);\n      const contentArea = renderContentArea(props, state, classes);\n\n      return (\n        <div\n          className={ItemLayout.slotClassNames.main}\n          style={{\n            gridTemplateRows: '1fr 1fr',\n          }}\n        >\n          {headerArea}\n          {contentArea}\n        </div>\n      );\n    },\n\n    renderHeaderArea: (props, state, classes) => {\n      const { debug, header, headerMedia, headerCSS, headerMediaCSS } = props;\n\n      const mergedClasses = cx(ItemLayout.slotClassNames.header, classes.header);\n      const mediaClasses = cx(ItemLayout.slotClassNames.headerMedia, classes.headerMedia);\n\n      return !header && !headerMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"end\"\n          gap={pxToRem(8)}\n          debug={debug}\n          main={rtlTextContainer.createFor({ element: header })}\n          rootCSS={headerCSS}\n          end={\n            headerMedia && (\n              <span style={headerMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: headerMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n\n    renderContentArea: (props, state, classes) => {\n      const { debug, content, contentMedia, contentCSS, contentMediaCSS } = props;\n\n      const mergedClasses = cx(ItemLayout.slotClassNames.content, classes.content);\n      const mediaClasses = cx(ItemLayout.slotClassNames.contentMedia, classes.contentMedia);\n\n      return !content && !contentMedia ? null : (\n        <Layout\n          className={mergedClasses}\n          alignItems=\"start\"\n          gap={pxToRem(8)}\n          debug={debug}\n          rootCSS={contentCSS}\n          main={rtlTextContainer.createFor({ element: content })}\n          end={\n            contentMedia && (\n              <span style={contentMediaCSS} className={mediaClasses}>\n                {rtlTextContainer.createFor({ element: contentMedia })}\n              </span>\n            )\n          }\n        />\n      );\n    },\n  };\n\n  renderComponent({ classes, unhandledProps, styles }) {\n    const { as, debug, endMedia, media, renderMainArea, rootCSS, mediaCSS, endMediaCSS } = this.props;\n\n    const startArea = media;\n    const mainArea = renderMainArea(this.props, this.state, classes);\n    const endArea = endMedia;\n\n    const mergedMediaClasses = cx(ItemLayout.slotClassNames.media, classes.media);\n    const mergedEndMediaClasses = cx(ItemLayout.slotClassNames.endMedia, classes.endMedia);\n\n    return (\n      <Layout\n        as={as}\n        className={classes.root}\n        styles={styles.root}\n        rootCSS={rootCSS}\n        alignItems=\"center\"\n        gap={pxToRem(8)}\n        debug={debug}\n        reducing\n        start={\n          startArea && (\n            <span style={mediaCSS} className={mergedMediaClasses}>\n              {rtlTextContainer.createFor({ element: startArea })}\n            </span>\n          )\n        }\n        main={mainArea}\n        end={\n          endArea && (\n            <span style={endMediaCSS} className={mergedEndMediaClasses}>\n              {rtlTextContainer.createFor({ element: endArea })}\n            </span>\n          )\n        }\n        {...unhandledProps}\n      />\n    );\n  }\n}\n\nItemLayout.create = createShorthandFactory({ Component: ItemLayout, mappedProp: 'content' });\nItemLayout.slotClassNames = {\n  header: `${ItemLayout.className}__header`,\n  headerMedia: `${ItemLayout.className}__headerMedia`,\n  main: `${ItemLayout.className}__main`,\n  content: `${ItemLayout.className}__content`,\n  contentMedia: `${ItemLayout.className}__contentMedia`,\n  media: `${ItemLayout.className}__media`,\n  endMedia: `${ItemLayout.className}__endMedia`,\n};\n\n/**\n * (DEPRECATED) The Item Layout handles layout styles for menu items, list items and other similar item templates.\n */\nexport default withSafeTypeForAs<typeof ItemLayout, ItemLayoutProps>(ItemLayout);\n"]},"metadata":{},"sourceType":"module"}