{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _invoke from \"lodash/invoke\";\nimport _get from \"lodash/get\";\nimport _toNumber from \"lodash/toNumber\";\nimport { sliderBehavior } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStateManager, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { commonPropTypes, partitionHTMLProps, setWhatInputSource, createShorthandFactory } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\n\nvar processInputValues = function processInputValues(p) {\n  var min = _toNumber(p.min);\n\n  var max = _toNumber(p.max);\n\n  var value = _toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  var valueAsPercentage = \"\".concat(100 * (value - min) / (max - min), \"%\");\n  return {\n    min: min,\n    max: max,\n    value: value,\n    valueAsPercentage: valueAsPercentage\n  };\n};\n\nvar Slider = function Slider(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Slider.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      min = props.min,\n      max = props.max,\n      value = props.value,\n      getA11yValueMessageOnChange = props.getA11yValueMessageOnChange,\n      defaultValue = props.defaultValue,\n      input = props.input,\n      userInputRef = props.inputRef,\n      step = props.step,\n      className = props.className,\n      styles = props.styles,\n      variables = props.variables,\n      design = props.design,\n      fluid = props.fluid,\n      vertical = props.vertical,\n      disabled = props.disabled;\n  var inputRef = React.createRef();\n\n  var _useStateManager = useStateManager(createSliderManager, {\n    mapPropsToInitialState: function mapPropsToInitialState() {\n      return {\n        value: defaultValue\n      };\n    },\n    mapPropsToState: function mapPropsToState() {\n      return {\n        value: value\n      };\n    }\n  }),\n      state = _useStateManager.state,\n      actions = _useStateManager.actions;\n\n  var _processInputValues = processInputValues({\n    min: min,\n    max: max,\n    value: state.value || ''\n  }),\n      numericMin = _processInputValues.min,\n      numericMax = _processInputValues.max,\n      numericValue = _processInputValues.value,\n      valueAsPercentage = _processInputValues.valueAsPercentage;\n\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: Slider.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        disabled: disabled,\n        getA11yValueMessageOnChange: getA11yValueMessageOnChange,\n        max: numericMax,\n        min: numericMax,\n        value: numericValue,\n        vertical: vertical\n      };\n    }\n  });\n\n  var _useStyles = useStyles(Slider.displayName, {\n    className: Slider.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        fluid: fluid,\n        vertical: vertical,\n        disabled: disabled\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        styles: styles,\n        variables: variables,\n        design: design\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var handleInputOverrides = function handleInputOverrides() {\n    return {\n      onChange: function onChange(e) {\n        var value = _get(e, 'target.value');\n\n        _invoke(props, 'onChange', e, Object.assign({}, props, {\n          value: value\n        }));\n\n        actions.change(value);\n      },\n      onMouseDown: function onMouseDown(e) {\n        setWhatInputSource(context.target, 'mouse');\n\n        _invoke(props, 'onMouseDown', e, props);\n      }\n    };\n  };\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Slider.handledProps, props);\n\n  var _partitionHTMLProps = partitionHTMLProps(unhandledProps),\n      _partitionHTMLProps2 = _slicedToArray(_partitionHTMLProps, 2),\n      htmlInputProps = _partitionHTMLProps2[0],\n      restProps = _partitionHTMLProps2[1];\n\n  var type = 'range'; // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n  var inputElement = Box.create(input || type, {\n    defaultProps: function defaultProps() {\n      return getA11Props('input', Object.assign({}, htmlInputProps, {\n        as: 'input',\n        className: Slider.slotClassNames.input,\n        fluid: fluid,\n        min: numericMin,\n        max: numericMax,\n        step: step,\n        styles: resolvedStyles.input,\n        type: type,\n        value: numericValue,\n        vertical: vertical\n      }));\n    },\n    overrideProps: handleInputOverrides\n  });\n  var element = React.createElement(ElementType, getA11Props('root', Object.assign({\n    className: classes.root\n  }, restProps)), React.createElement(\"div\", getA11Props('inputWrapper', {\n    className: cx(Slider.slotClassNames.inputWrapper, classes.inputWrapper)\n  }), React.createElement(\"span\", getA11Props('rail', {\n    className: cx(Slider.slotClassNames.rail, classes.rail)\n  })), React.createElement(\"span\", _extends({}, getA11Props('track', {\n    className: cx(Slider.slotClassNames.track, classes.track)\n  }), {\n    style: {\n      width: valueAsPercentage\n    }\n  })), React.createElement(Ref, {\n    innerRef: function innerRef(inputElement) {\n      handleRef(inputRef, inputElement);\n      handleRef(userInputRef, inputElement);\n    }\n  }, inputElement), React.createElement(\"span\", _extends({}, getA11Props('thumb', {\n    className: cx(Slider.slotClassNames.thumb, classes.thumb)\n  }), {\n    style: _defineProperty({}, context.rtl ? 'right' : 'left', valueAsPercentage)\n  }))));\n  setEnd();\n  return element;\n};\n\nSlider.className = 'ui-slider';\nSlider.displayName = 'Slider';\nSlider.slotClassNames = {\n  input: \"\".concat(Slider.className, \"__input\"),\n  inputWrapper: \"\".concat(Slider.className, \"__input-wrapper\"),\n  rail: \"\".concat(Slider.className, \"__rail\"),\n  thumb: \"\".concat(Slider.className, \"__thumb\"),\n  track: \"\".concat(Slider.className, \"__track\")\n};\nSlider.defaultProps = {\n  accessibility: sliderBehavior,\n  getA11yValueMessageOnChange: function getA11yValueMessageOnChange(_ref2) {\n    var value = _ref2.value;\n    return String(value);\n  },\n  max: 100,\n  min: 0,\n  step: 1\n};\nSlider.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: false\n}), {\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fluid: PropTypes.bool,\n  getA11yValueMessageOnChange: PropTypes.func,\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool\n});\nSlider.handledProps = Object.keys(Slider.propTypes);\nSlider.create = createShorthandFactory({\n  Component: Slider,\n  mappedProp: 'value'\n});\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\n\nexport default withSafeTypeForAs(Slider);","map":{"version":3,"sources":["components/Slider/Slider.tsx"],"names":["processInputValues","min","p","max","value","isNaN","Number","Slider","Math","valueAsPercentage","context","React","setStart","setEnd","useTelemetry","accessibility","getA11yValueMessageOnChange","defaultValue","input","userInputRef","step","className","styles","variables","design","fluid","vertical","disabled","props","inputRef","state","actions","useStateManager","mapPropsToInitialState","mapPropsToState","numericMin","numericMax","numericValue","getA11Props","useAccessibility","debugName","rtl","mapPropsToBehavior","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleInputOverrides","onChange","onMouseDown","setWhatInputSource","ElementType","getElementType","unhandledProps","useUnhandledProps","htmlInputProps","restProps","partitionHTMLProps","type","inputElement","defaultProps","as","overrideProps","element","root","cx","width","handleRef","inputWrapper","rail","thumb","track","String","content","PropTypes","customPropTypes","bool","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, sliderBehavior, SliderBehaviorProps } from '@fluentui/accessibility';\nimport {\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n  useStateManager,\n  useStyles,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { createSliderManager } from '@fluentui/state';\nimport cx from 'classnames';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  partitionHTMLProps,\n  UIComponentProps,\n  setWhatInputSource,\n  createShorthandFactory,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  WithAsProp,\n  withSafeTypeForAs,\n  Omit,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { SupportedIntrinsicInputProps } from '../../utils/htmlPropsUtils';\nimport Box, { BoxProps } from '../Box/Box';\n\nconst processInputValues = (\n  p: Pick<SliderProps, 'min' | 'max'> & { value: string },\n): { min: number; max: number; value: number; valueAsPercentage: string } => {\n  let min = _.toNumber(p.min);\n  let max = _.toNumber(p.max);\n  let value = _.toNumber(p.value);\n\n  if (isNaN(min)) min = Number(Slider.defaultProps.min);\n  if (isNaN(max)) max = Number(Slider.defaultProps.max);\n  value = isNaN(value) ? min + (max - min) / 2 : Math.min(max, Math.max(min, value));\n  const valueAsPercentage = `${(100 * (value - min)) / (max - min)}%`;\n\n  return { min, max, value, valueAsPercentage };\n};\n\nexport interface SliderSlotClassNames {\n  input: string;\n  inputWrapper: string;\n  rail: string;\n  thumb: string;\n  track: string;\n}\n\nexport interface SliderProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    Omit<SupportedIntrinsicInputProps, 'defaultValue'> {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<SliderBehaviorProps>;\n\n  /** The default value of the slider. */\n  defaultValue?: string | number;\n\n  /** A slider can be read-only and unable to change states. */\n  disabled?: SupportedIntrinsicInputProps['disabled'];\n\n  /** A slider can take the width of its container. */\n  fluid?: boolean;\n\n  /**\n   * Callback that creates custom accessibility message a screen reader narrates when the value changes.\n   * @param props - Slider props.\n   */\n  getA11yValueMessageOnChange?: (props: SliderProps) => string;\n\n  /** Shorthand for the input component. */\n  input?: ShorthandValue<BoxProps>;\n\n  /** Ref for input DOM node. */\n  inputRef?: React.Ref<HTMLElement>;\n\n  /** The maximum value of the slider. */\n  max?: SupportedIntrinsicInputProps['max'];\n\n  /** The minimum value of the slider. */\n  min?: SupportedIntrinsicInputProps['min'];\n\n  /**\n   * Called after item checked state is changed.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onChange?: ComponentEventHandler<SliderProps & { value: string }>;\n\n  /**\n   * A number that specifies the granularity that the value must adhere to, or the special value 'any'.\n   * A string value of any means that no stepping is implied, and any value is allowed\n   * (barring other constraints, such as min and max).\n   */\n  step?: SupportedIntrinsicInputProps['step'];\n\n  /** The value of the slider. */\n  value?: string | number;\n\n  /** A slider can be displayed vertically. */\n  vertical?: boolean;\n}\n\nexport type SliderStylesProps = Pick<SliderProps, 'fluid' | 'disabled' | 'vertical'>;\n\nconst Slider: React.FC<WithAsProp<SliderProps>> &\n  FluentComponentStaticProps & { slotClassNames: SliderSlotClassNames } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Slider.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    min,\n    max,\n    value,\n    getA11yValueMessageOnChange,\n    defaultValue,\n    input,\n    inputRef: userInputRef,\n    step,\n    className,\n    styles,\n    variables,\n    design,\n    fluid,\n    vertical,\n    disabled,\n  } = props;\n  const inputRef = React.createRef<HTMLElement>();\n\n  const { state, actions } = useStateManager(createSliderManager, {\n    mapPropsToInitialState: () => ({\n      value: defaultValue as string,\n    }),\n    mapPropsToState: () => ({\n      value: value as string,\n    }),\n  });\n  const { min: numericMin, max: numericMax, value: numericValue, valueAsPercentage } = processInputValues({\n    min,\n    max,\n    value: state.value || '',\n  });\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: Slider.displayName,\n    rtl: context.rtl,\n    mapPropsToBehavior: () => ({\n      disabled,\n      getA11yValueMessageOnChange,\n      max: numericMax,\n      min: numericMax,\n      value: numericValue,\n      vertical,\n    }),\n  });\n  const { classes, styles: resolvedStyles } = useStyles<SliderStylesProps>(Slider.displayName, {\n    className: Slider.className,\n    mapPropsToStyles: () => ({\n      fluid,\n      vertical,\n      disabled,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      styles,\n      variables,\n      design,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleInputOverrides = () => ({\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = _.get(e, 'target.value');\n      _.invoke(props, 'onChange', e, { ...props, value });\n      actions.change(value);\n    },\n    onMouseDown: (e: React.MouseEvent<HTMLInputElement>) => {\n      setWhatInputSource(context.target, 'mouse');\n      _.invoke(props, 'onMouseDown', e, props);\n    },\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Slider.handledProps, props);\n  const [htmlInputProps, restProps] = partitionHTMLProps(unhandledProps);\n  const type = 'range';\n\n  // we need 2 wrappers around the slider rail, track, input and thumb slots to achieve correct component sizes\n\n  const inputElement = Box.create(input || type, {\n    defaultProps: () =>\n      getA11Props('input', {\n        ...htmlInputProps,\n        as: 'input',\n        className: Slider.slotClassNames.input,\n        fluid,\n        min: numericMin,\n        max: numericMax,\n        step,\n        styles: resolvedStyles.input,\n        type,\n        value: numericValue,\n        vertical,\n      }),\n    overrideProps: handleInputOverrides,\n  });\n\n  const element = (\n    <ElementType {...getA11Props('root', { className: classes.root, ...restProps })}>\n      <div\n        {...getA11Props('inputWrapper', {\n          className: cx(Slider.slotClassNames.inputWrapper, classes.inputWrapper),\n        })}\n      >\n        <span {...getA11Props('rail', { className: cx(Slider.slotClassNames.rail, classes.rail) })} />\n        <span\n          {...getA11Props('track', { className: cx(Slider.slotClassNames.track, classes.track) })}\n          style={{ width: valueAsPercentage }}\n        />\n        <Ref\n          innerRef={(inputElement: HTMLElement) => {\n            handleRef(inputRef, inputElement);\n            handleRef(userInputRef, inputElement);\n          }}\n        >\n          {inputElement}\n        </Ref>\n        {/* the thumb slot needs to appear after the input slot */}\n        <span\n          {...getA11Props('thumb', { className: cx(Slider.slotClassNames.thumb, classes.thumb) })}\n          style={{ [context.rtl ? 'right' : 'left']: valueAsPercentage }}\n        />\n      </div>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nSlider.className = 'ui-slider';\nSlider.displayName = 'Slider';\n\nSlider.slotClassNames = {\n  input: `${Slider.className}__input`,\n  inputWrapper: `${Slider.className}__input-wrapper`,\n  rail: `${Slider.className}__rail`,\n  thumb: `${Slider.className}__thumb`,\n  track: `${Slider.className}__track`,\n};\n\nSlider.defaultProps = {\n  accessibility: sliderBehavior,\n  getA11yValueMessageOnChange: ({ value }) => String(value),\n  max: 100,\n  min: 0,\n  step: 1,\n};\nSlider.propTypes = {\n  ...commonPropTypes.createCommon({ content: false }),\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  fluid: PropTypes.bool,\n  getA11yValueMessageOnChange: PropTypes.func,\n  input: customPropTypes.itemShorthand,\n  inputRef: customPropTypes.ref,\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  vertical: PropTypes.bool,\n};\nSlider.handledProps = Object.keys(Slider.propTypes) as any;\n\nSlider.create = createShorthandFactory({ Component: Slider, mappedProp: 'value' });\n\n/**\n * A Slider represents an input that allows user to choose a value from within a specific range.\n *\n * @accessibility\n * Implements [ARIA Slider](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) design pattern.\n * @accessibilityIssues\n * [Slider - JAWS narrates slider value twice when using PageUp / PageDown](https://github.com/FreedomScientific/VFO-standards-support/issues/220)\n * [Slider - JAWS narrates current and new value in vertical slider](https://github.com/FreedomScientific/VFO-standards-support/issues/219)\n */\nexport default withSafeTypeForAs<typeof Slider, SliderProps, 'input'>(Slider);\n"]},"metadata":{},"sourceType":"module"}