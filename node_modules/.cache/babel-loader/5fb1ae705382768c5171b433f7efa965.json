{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _invoke from \"lodash/invoke\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport { buttonBehavior } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, commonPropTypes, rtlTextContainer } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport Box from '../Box/Box'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\n\nvar AlertDismissAction = function AlertDismissAction(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(AlertDismissAction.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      as = props.as,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      danger = props.danger,\n      warning = props.warning,\n      info = props.info,\n      success = props.success;\n  var hasChildren = childrenExist(children);\n  var hasContent = !!content && !_isEmpty(content);\n  var getA11Props = useAccessibility(accessibility, {\n    debugName: AlertDismissAction.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        as: as,\n        disabled: disabled\n      };\n    },\n    actionHandlers: {\n      performClick: function performClick(event) {\n        event.preventDefault();\n        handleClick(event);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(AlertDismissAction.displayName, {\n    className: AlertDismissAction.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        disabled: disabled,\n        danger: danger,\n        warning: warning,\n        info: info,\n        success: success,\n        hasContent: hasContent || hasChildren\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var unhandledProps = useUnhandledProps(AlertDismissAction.handledProps, props);\n  var ElementType = getElementType(props);\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var result = React.createElement(ElementType, _extends({}, rtlTextContainer.getAttributes({\n    forElements: [children]\n  }), getA11Props('root', Object.assign({\n    onClick: handleClick,\n    disabled: disabled,\n    className: classes.root\n  }, unhandledProps))), hasChildren ? children : Box.create(content, {\n    defaultProps: function defaultProps() {\n      return getA11Props('content', {\n        as: 'span',\n        className: AlertDismissAction.slotClassNames.content,\n        styles: resolvedStyles.content\n      });\n    }\n  }));\n  setEnd();\n  return result;\n};\n\nAlertDismissAction.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n  content: {}\n};\nAlertDismissAction.displayName = 'AlertDismissAction';\nAlertDismissAction.className = 'ui-alert__dismissaction';\nAlertDismissAction.propTypes = Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  disabled: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  onClick: PropTypes.func\n});\nAlertDismissAction.handledProps = Object.keys(AlertDismissAction.propTypes);\nAlertDismissAction.create = createShorthandFactory({\n  Component: AlertDismissAction,\n  mappedProp: 'content'\n});\nAlertDismissAction.slotClassNames = {\n  content: \"\".concat(AlertDismissAction.className, \"__content\")\n};\n/**\n * A AlertDismissAction allows users to customize the dismissAction slot  inside the Alert component.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\n\nexport default withSafeTypeForAs(AlertDismissAction);","map":{"version":3,"sources":["components/Alert/AlertDismissAction.tsx"],"names":["AlertDismissAction","context","React","setStart","setEnd","useTelemetry","accessibility","as","children","className","content","disabled","design","styles","variables","danger","warning","info","success","props","hasChildren","childrenExist","hasContent","getA11Props","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","event","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","unhandledProps","useUnhandledProps","ElementType","getElementType","e","result","forElements","onClick","root","defaultProps","PropTypes","func","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility, buttonBehavior, ButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  ContentComponentProps,\n} from '../../utils';\n\nimport {\n  ComponentEventHandler,\n  WithAsProp,\n  withSafeTypeForAs,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n  ShorthandValue,\n} from '../../types';\nimport { getElementType, useAccessibility, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport Box, { BoxProps } from '../Box/Box';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nexport interface AlertDismissActionProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<ButtonBehaviorProps>;\n\n  /** A dismiss action can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** An alert may be formatted to display a danger message. */\n  danger?: boolean;\n\n  /** An alert can be formatted to display a warning message. */\n  warning?: boolean;\n\n  /** An alert can be formatted to display a successful message. */\n  success?: boolean;\n\n  /** An alert may be formatted to display information. */\n  info?: boolean;\n\n  /**\n   * Called after a user clicks the paddle.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AlertDismissActionProps>;\n}\n\nexport type AlertDismissActionSlotClassNames = {\n  content: string;\n};\n\nexport type AlertDismissActionStylesProps = Pick<\n  AlertDismissActionProps,\n  'disabled' | 'danger' | 'warning' | 'info' | 'success'\n> & {\n  hasContent?: boolean;\n};\n\nconst AlertDismissAction: React.FC<WithAsProp<AlertDismissActionProps>> &\n  FluentComponentStaticProps<AlertDismissActionProps> & {\n    slotClassNames: AlertDismissActionSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(AlertDismissAction.displayName, context.telemetry);\n  setStart();\n\n  const {\n    accessibility,\n    as,\n    children,\n    className,\n    content,\n    disabled,\n    design,\n    styles,\n    variables,\n    danger,\n    warning,\n    info,\n    success,\n  } = props;\n\n  const hasChildren = childrenExist(children);\n  const hasContent = !!content && !_.isEmpty(content);\n\n  const getA11Props = useAccessibility(accessibility, {\n    debugName: AlertDismissAction.displayName,\n    mapPropsToBehavior: () => ({\n      as,\n      disabled,\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n    },\n    rtl: context.rtl,\n  });\n  const { classes, styles: resolvedStyles } = useStyles<AlertDismissActionStylesProps>(AlertDismissAction.displayName, {\n    className: AlertDismissAction.className,\n    mapPropsToStyles: () => ({\n      disabled,\n      danger,\n      warning,\n      info,\n      success,\n      hasContent: hasContent || hasChildren,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const unhandledProps = useUnhandledProps(AlertDismissAction.handledProps, props);\n  const ElementType = getElementType(props);\n\n  const handleClick = (e: React.SyntheticEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const result = (\n    <ElementType\n      {...rtlTextContainer.getAttributes({ forElements: [children] })}\n      {...getA11Props('root', {\n        onClick: handleClick,\n        disabled,\n        className: classes.root,\n        ...unhandledProps,\n      })}\n    >\n      {hasChildren\n        ? children\n        : Box.create(content, {\n            defaultProps: () =>\n              getA11Props('content', {\n                as: 'span',\n                className: AlertDismissAction.slotClassNames.content,\n                styles: resolvedStyles.content,\n              }),\n          })}\n    </ElementType>\n  );\n\n  setEnd();\n\n  return result;\n};\n\nAlertDismissAction.defaultProps = {\n  as: 'button',\n  accessibility: buttonBehavior,\n  content: {},\n};\n\nAlertDismissAction.displayName = 'AlertDismissAction';\nAlertDismissAction.className = 'ui-alert__dismissaction';\n\nAlertDismissAction.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: 'shorthand',\n  }),\n  disabled: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nAlertDismissAction.handledProps = Object.keys(AlertDismissAction.propTypes) as any;\n\nAlertDismissAction.create = createShorthandFactory({ Component: AlertDismissAction, mappedProp: 'content' });\n\nAlertDismissAction.slotClassNames = {\n  content: `${AlertDismissAction.className}__content`,\n};\n\n/**\n * A AlertDismissAction allows users to customize the dismissAction slot  inside the Alert component.\n *\n * @accessibility\n * Implements [ARIA Button](https://www.w3.org/TR/wai-aria-practices-1.1/#button) design pattern.\n */\nexport default withSafeTypeForAs<typeof AlertDismissAction, AlertDismissActionProps, 'button'>(AlertDismissAction);\n"]},"metadata":{},"sourceType":"module"}