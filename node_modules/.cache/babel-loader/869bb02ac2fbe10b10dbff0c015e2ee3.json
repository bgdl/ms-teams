{"ast":null,"code":"import * as React from 'react';\nimport getAccessibility from '../accessibility/getAccessibility';\nimport FocusZone from '../FocusZone/FocusZone';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\n\nvar useAccessibility = function useAccessibility(behavior) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var actionHandlers = options.actionHandlers,\n      _options$debugName = options.debugName,\n      debugName = _options$debugName === void 0 ? 'Undefined' : _options$debugName,\n      _options$mapPropsToBe = options.mapPropsToBehavior,\n      mapPropsToBehavior = _options$mapPropsToBe === void 0 ? function () {\n    return {};\n  } : _options$mapPropsToBe,\n      _options$rtl = options.rtl,\n      rtl = _options$rtl === void 0 ? false : _options$rtl;\n  var definition = getAccessibility(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);\n  var latestDefinition = React.useRef();\n  var slotHandlers = React.useRef({});\n  var slotProps = React.useRef({});\n  useIsomorphicLayoutEffect(function () {\n    latestDefinition.current = definition;\n  });\n\n  var getA11yProps = function getA11yProps(slotName, userProps) {\n    var hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);\n    slotProps.current[slotName] = userProps; // We want to avoid adding event handlers until it's really needed\n\n    if (hasKeyDownHandlers) {\n      if (!slotHandlers.current[slotName]) {\n        slotHandlers.current[slotName] = function (e) {\n          var _latestDefinition$cur, _latestDefinition$cur2;\n\n          var accessibilityHandler = (_latestDefinition$cur = latestDefinition.current) === null || _latestDefinition$cur === void 0 ? void 0 : (_latestDefinition$cur2 = _latestDefinition$cur.keyHandlers[slotName]) === null || _latestDefinition$cur2 === void 0 ? void 0 : _latestDefinition$cur2.onKeyDown;\n          var userHandler = slotProps.current[slotName].onKeyDown;\n          if (accessibilityHandler) accessibilityHandler(e);\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          if (userHandler) userHandler.apply(void 0, [e].concat(args));\n        };\n      }\n    } else {\n      delete slotHandlers.current[slotName];\n    }\n\n    var finalProps = Object.assign({}, definition.attributes[slotName], {}, userProps, {\n      onKeyDown: slotHandlers.current[slotName]\n    });\n    return finalProps;\n  }; // Provides an experimental handling for FocusZone definition in behaviors\n\n\n  getA11yProps.unstable_wrapWithFocusZone = function (element) {\n    if (definition.focusZone) {\n      var child = element;\n\n      if (process.env.NODE_ENV !== 'production') {\n        child = React.Children.only(element);\n      }\n\n      return React.createElement(FocusZone, Object.assign({}, definition.focusZone.props, {}, child.props, {\n        as: child.type,\n        isRtl: rtl\n      }));\n    }\n\n    return element;\n  };\n\n  return getA11yProps;\n};\n\nexport default useAccessibility;","map":{"version":3,"sources":["hooks/useAccessibility.ts"],"names":["useAccessibility","options","actionHandlers","debugName","mapPropsToBehavior","rtl","definition","getAccessibility","latestDefinition","React","slotHandlers","slotProps","useIsomorphicLayoutEffect","getA11yProps","hasKeyDownHandlers","Boolean","userProps","args","accessibilityHandler","userHandler","finalProps","onKeyDown","child","process","as","isRtl"],"mappings":"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","sourcesContent":["import { Accessibility, AccessibilityAttributesBySlot } from '@fluentui/accessibility';\nimport * as React from 'react';\n\nimport getAccessibility from '../accessibility/getAccessibility';\nimport { AccessibilityActionHandlers, KeyboardEventHandler, ReactAccessibilityBehavior } from '../accessibility/types';\nimport FocusZone from '../FocusZone/FocusZone';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\n\ntype UseAccessibilityOptions<Props> = {\n  actionHandlers?: AccessibilityActionHandlers;\n  debugName?: string;\n  mapPropsToBehavior?: () => Props;\n  rtl?: boolean;\n};\n\ntype UseAccessibilityResult = (<SlotProps extends Record<string, any> & UserProps>(\n  slotName: string,\n  slotProps: SlotProps,\n) => MergedProps<SlotProps>) & {\n  unstable_wrapWithFocusZone: (children: React.ReactElement) => React.ReactElement;\n};\n\ntype UserProps = {\n  onKeyDown?: KeyboardEventHandler;\n};\n\ntype MergedProps<SlotProps extends Record<string, any> = any> = SlotProps &\n  Partial<AccessibilityAttributesBySlot> &\n  UserProps;\n\nconst useAccessibility = <Props>(behavior: Accessibility<Props>, options: UseAccessibilityOptions<Props> = {}) => {\n  const { actionHandlers, debugName = 'Undefined', mapPropsToBehavior = () => ({}), rtl = false } = options;\n\n  const definition = getAccessibility(debugName, behavior, mapPropsToBehavior(), rtl, actionHandlers);\n\n  const latestDefinition = React.useRef<ReactAccessibilityBehavior>();\n  const slotHandlers = React.useRef<Record<string, KeyboardEventHandler>>({});\n  const slotProps = React.useRef<Record<string, UserProps>>({});\n\n  useIsomorphicLayoutEffect(() => {\n    latestDefinition.current = definition;\n  });\n\n  const getA11yProps: UseAccessibilityResult = (slotName, userProps) => {\n    const hasKeyDownHandlers = Boolean(definition.keyHandlers[slotName] || userProps.onKeyDown);\n    slotProps.current[slotName] = userProps;\n\n    // We want to avoid adding event handlers until it's really needed\n    if (hasKeyDownHandlers) {\n      if (!slotHandlers.current[slotName]) {\n        slotHandlers.current[slotName] = (e, ...args) => {\n          const accessibilityHandler = latestDefinition.current?.keyHandlers[slotName]?.onKeyDown;\n          const userHandler = slotProps.current[slotName].onKeyDown;\n\n          if (accessibilityHandler) accessibilityHandler(e);\n          if (userHandler) userHandler(e, ...args);\n        };\n      }\n    } else {\n      delete slotHandlers.current[slotName];\n    }\n\n    const finalProps: MergedProps = {\n      ...definition.attributes[slotName],\n      ...userProps,\n      onKeyDown: slotHandlers.current[slotName],\n    };\n\n    return finalProps;\n  };\n\n  // Provides an experimental handling for FocusZone definition in behaviors\n  getA11yProps.unstable_wrapWithFocusZone = (element: React.ReactElement) => {\n    if (definition.focusZone) {\n      let child: React.ReactElement = element;\n\n      if (process.env.NODE_ENV !== 'production') {\n        child = React.Children.only(element);\n      }\n\n      return React.createElement(FocusZone, {\n        ...definition.focusZone.props,\n        ...child.props,\n        as: child.type,\n        isRtl: rtl,\n      });\n    }\n\n    return element;\n  };\n\n  return getA11yProps;\n};\n\nexport default useAccessibility;\n"]},"metadata":{},"sourceType":"module"}