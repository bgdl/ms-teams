{"ast":null,"code":"import { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { createShorthandFactory, commonPropTypes } from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nvar ToolbarDivider = function ToolbarDivider(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarDivider.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var accessibility = props.accessibility,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarDivider.displayName,\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarDivider.displayName, {\n    className: ToolbarDivider.className,\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergeComponentVariables(parentVariables, variables)\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarDivider.handledProps, props);\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({}, unhandledProps, {\n    className: classes.root\n  })));\n  setEnd();\n  return element;\n};\n\nToolbarDivider.className = 'ui-toolbar__divider';\nToolbarDivider.displayName = 'ToolbarDivider';\nToolbarDivider.propTypes = commonPropTypes.createCommon();\nToolbarDivider.handledProps = Object.keys(ToolbarDivider.propTypes);\nToolbarDivider.create = createShorthandFactory({\n  Component: ToolbarDivider,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\n\nexport default withSafeTypeForAs(ToolbarDivider);","map":{"version":3,"sources":["components/Toolbar/ToolbarDivider.tsx"],"names":["ToolbarDivider","context","React","setStart","setEnd","useTelemetry","accessibility","className","design","styles","variables","props","parentVariables","getA11yProps","useAccessibility","debugName","rtl","classes","useStyles","mapPropsToInlineStyles","mergeComponentVariables","ElementType","getElementType","unhandledProps","useUnhandledProps","element","root","commonPropTypes","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { Accessibility } from '@fluentui/accessibility';\nimport { getElementType, useUnhandledProps, useAccessibility, useStyles, useTelemetry } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\n\nimport * as React from 'react';\nimport { FluentComponentStaticProps, ProviderContextPrepared, WithAsProp, withSafeTypeForAs } from '../../types';\nimport {\n  ChildrenComponentProps,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n  commonPropTypes,\n} from '../../utils';\nimport { ToolbarVariablesContext } from './toolbarVariablesContext';\n\nexport interface ToolbarDividerProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<never>;\n}\n\nexport type ToolbarDividerStylesProps = never;\n\nconst ToolbarDivider: React.FC<WithAsProp<ToolbarDividerProps>> &\n  FluentComponentStaticProps<ToolbarDividerProps> = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarDivider.displayName, context.telemetry);\n  setStart();\n\n  const { accessibility, className, design, styles, variables } = props;\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n\n  const getA11yProps = useAccessibility(accessibility, {\n    debugName: ToolbarDivider.displayName,\n    rtl: context.rtl,\n  });\n  const { classes } = useStyles<ToolbarDividerStylesProps>(ToolbarDivider.displayName, {\n    className: ToolbarDivider.className,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergeComponentVariables(parentVariables, variables),\n    }),\n    rtl: context.rtl,\n  });\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarDivider.handledProps, props);\n\n  const element = <ElementType {...getA11yProps('root', { ...unhandledProps, className: classes.root })} />;\n  setEnd();\n\n  return element;\n};\n\nToolbarDivider.className = 'ui-toolbar__divider';\nToolbarDivider.displayName = 'ToolbarDivider';\n\nToolbarDivider.propTypes = commonPropTypes.createCommon();\nToolbarDivider.handledProps = Object.keys(ToolbarDivider.propTypes) as any;\n\nToolbarDivider.create = createShorthandFactory({ Component: ToolbarDivider, mappedProp: 'content' });\n\n/**\n * A ToolbarDivider is a non-actionable element that visually segments Toolbar items.\n */\nexport default withSafeTypeForAs<typeof ToolbarDivider, ToolbarDividerProps>(ToolbarDivider);\n"]},"metadata":{},"sourceType":"module"}