{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport _noop from \"lodash/noop\";\nimport { accordionTitleBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, createShorthandFactory, UIComponent, commonPropTypes, rtlTextContainer, applyAccessibilityKeyHandlers } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport Box from '../Box/Box';\n\nvar AccordionTitle = /*#__PURE__*/function (_UIComponent) {\n  _inherits(AccordionTitle, _UIComponent);\n\n  function AccordionTitle() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccordionTitle);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionTitle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"actionHandlers\", {\n      performClick: function performClick(e) {\n        e.preventDefault();\n\n        _this.handleClick(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      if (!_this.props.disabled) {\n        _invoke(_this.props, 'onClick', e, _this.props);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function (e) {\n      e.stopPropagation();\n\n      _invoke(_this.props, 'onFocus', e, _this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWrapperOverrides\", function (predefinedProps) {\n      return {\n        onFocus: function onFocus(e) {\n          _this.handleFocus(e);\n\n          _invoke(predefinedProps, 'onFocus', e, _this.props);\n        },\n        onClick: function onClick(e) {\n          _this.handleClick(e);\n\n          _invoke(predefinedProps, 'onClick', e, _this.props);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(AccordionTitle, [{\n    key: \"renderComponent\",\n    value: function renderComponent(_ref) {\n      var _this2 = this;\n\n      var ElementType = _ref.ElementType,\n          classes = _ref.classes,\n          unhandledProps = _ref.unhandledProps,\n          styles = _ref.styles,\n          accessibility = _ref.accessibility;\n      var _this$props = this.props,\n          contentRef = _this$props.contentRef,\n          children = _this$props.children,\n          content = _this$props.content,\n          indicator = _this$props.indicator,\n          contentWrapper = _this$props.contentWrapper;\n      var contentWrapperElement = React.createElement(Ref, {\n        innerRef: contentRef\n      }, Box.create(contentWrapper, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: AccordionTitle.slotClassNames.contentWrapper,\n            styles: styles.contentWrapper\n          }, accessibility.attributes.content, {}, applyAccessibilityKeyHandlers(accessibility.keyHandlers.content, unhandledProps));\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return Object.assign({\n            children: React.createElement(React.Fragment, null, Box.create(indicator, {\n              defaultProps: function defaultProps() {\n                return {\n                  styles: styles.indicator,\n                  accessibility: indicatorBehavior\n                };\n              }\n            }), Box.create(content, {\n              defaultProps: function defaultProps() {\n                return {\n                  as: 'span',\n                  styles: styles.content\n                };\n              }\n            }))\n          }, _this2.handleWrapperOverrides(predefinedProps));\n        }\n      }));\n      return React.createElement(ElementType, _extends({\n        className: classes.root\n      }, rtlTextContainer.getAttributes({\n        forElements: [children]\n      }), accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)), childrenExist(children) ? children : contentWrapperElement);\n    }\n  }]);\n\n  return AccordionTitle;\n}(UIComponent);\n\n_defineProperty(AccordionTitle, \"displayName\", 'AccordionTitle');\n\n_defineProperty(AccordionTitle, \"create\", void 0);\n\n_defineProperty(AccordionTitle, \"className\", 'ui-accordion__title');\n\n_defineProperty(AccordionTitle, \"slotClassNames\", void 0);\n\n_defineProperty(AccordionTitle, \"propTypes\", Object.assign({}, commonPropTypes.createCommon({\n  content: 'shorthand'\n}), {\n  accordionContentId: PropTypes.string,\n  active: PropTypes.bool,\n  contentRef: customPropTypes.ref,\n  contentWrapper: customPropTypes.wrapperShorthand,\n  canBeCollapsed: PropTypes.bool,\n  disabled: PropTypes.bool,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  indicator: customPropTypes.shorthandAllowingChildren\n}));\n\n_defineProperty(AccordionTitle, \"defaultProps\", {\n  accessibility: accordionTitleBehavior,\n  as: 'dt',\n  contentRef: _noop,\n  indicator: {},\n  contentWrapper: {}\n});\n\nAccordionTitle.create = createShorthandFactory({\n  Component: AccordionTitle,\n  mappedProp: 'content'\n});\nAccordionTitle.slotClassNames = {\n  contentWrapper: \"\".concat(AccordionTitle.className, \"__content-wrapper\")\n};\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\n\nexport default withSafeTypeForAs(AccordionTitle);","map":{"version":3,"sources":["components/Accordion/AccordionTitle.tsx"],"names":["AccordionTitle","UIComponent","content","accordionContentId","PropTypes","string","active","bool","contentRef","customPropTypes","ref","contentWrapper","wrapperShorthand","canBeCollapsed","disabled","index","number","onClick","func","indicator","shorthandAllowingChildren","accessibility","as","performClick","e","onFocus","ElementType","classes","unhandledProps","styles","children","contentWrapperElement","defaultProps","className","applyAccessibilityKeyHandlers","overrideProps","indicatorBehavior","root","forElements","childrenExist","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import { accordionTitleBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {\n  childrenExist,\n  createShorthandFactory,\n  UIComponent,\n  UIComponentProps,\n  ContentComponentProps,\n  ChildrenComponentProps,\n  commonPropTypes,\n  rtlTextContainer,\n  applyAccessibilityKeyHandlers,\n  ShorthandFactory,\n} from '../../utils';\nimport { WithAsProp, ComponentEventHandler, ShorthandValue, withSafeTypeForAs } from '../../types';\nimport Box, { BoxProps } from '../Box/Box';\n\nexport interface AccordionTitleSlotClassNames {\n  contentWrapper: string;\n}\n\nexport interface AccordionTitleProps\n  extends UIComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>>,\n    ChildrenComponentProps {\n  /** Id of the content it owns. */\n  accordionContentId?: string;\n\n  /** Whether or not the title is in the open state. */\n  active?: boolean;\n\n  /** If at least one panel needs to stay active and this title does not correspond to the last active one. */\n  canBeCollapsed?: boolean;\n\n  /** Shorthand for the content wrapper element. */\n  contentWrapper?: ShorthandValue<BoxProps>;\n\n  /** An accordion title can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** AccordionTitle index inside Accordion. */\n  index?: number;\n\n  /** Ref to the clickable element that contains the title. */\n  contentRef?: React.Ref<HTMLElement>;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<AccordionTitleProps>;\n\n  /**\n   * Called after user's focus.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onFocus?: ComponentEventHandler<AccordionTitleProps>;\n\n  /** Shorthand for the active indicator. */\n  indicator?: ShorthandValue<BoxProps>;\n}\n\nclass AccordionTitle extends UIComponent<WithAsProp<AccordionTitleProps>, any> {\n  static displayName = 'AccordionTitle';\n\n  static create: ShorthandFactory<AccordionTitleProps>;\n\n  static className = 'ui-accordion__title';\n\n  static slotClassNames: AccordionTitleSlotClassNames;\n\n  static propTypes = {\n    ...commonPropTypes.createCommon({ content: 'shorthand' }),\n    accordionContentId: PropTypes.string,\n    active: PropTypes.bool,\n    contentRef: customPropTypes.ref,\n    contentWrapper: customPropTypes.wrapperShorthand,\n    canBeCollapsed: PropTypes.bool,\n    disabled: PropTypes.bool,\n    index: PropTypes.number,\n    onClick: PropTypes.func,\n    indicator: customPropTypes.shorthandAllowingChildren,\n  };\n\n  static defaultProps = {\n    accessibility: accordionTitleBehavior,\n    as: 'dt',\n    contentRef: _.noop,\n    indicator: {},\n    contentWrapper: {},\n  };\n\n  actionHandlers = {\n    performClick: e => {\n      e.preventDefault();\n      this.handleClick(e);\n    },\n  };\n\n  handleClick = (e: React.SyntheticEvent) => {\n    if (!this.props.disabled) {\n      _.invoke(this.props, 'onClick', e, this.props);\n    }\n  };\n\n  handleFocus = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    _.invoke(this.props, 'onFocus', e, this.props);\n  };\n\n  handleWrapperOverrides = predefinedProps => ({\n    onFocus: (e: React.FocusEvent) => {\n      this.handleFocus(e);\n      _.invoke(predefinedProps, 'onFocus', e, this.props);\n    },\n    onClick: (e: React.MouseEvent) => {\n      this.handleClick(e);\n      _.invoke(predefinedProps, 'onClick', e, this.props);\n    },\n  });\n\n  renderComponent({ ElementType, classes, unhandledProps, styles, accessibility }) {\n    const { contentRef, children, content, indicator, contentWrapper } = this.props;\n\n    const contentWrapperElement = (\n      <Ref innerRef={contentRef}>\n        {Box.create(contentWrapper, {\n          defaultProps: () => ({\n            className: AccordionTitle.slotClassNames.contentWrapper,\n            styles: styles.contentWrapper,\n            ...accessibility.attributes.content,\n            ...applyAccessibilityKeyHandlers(accessibility.keyHandlers.content, unhandledProps),\n          }),\n          overrideProps: predefinedProps => ({\n            children: (\n              <>\n                {Box.create(indicator, {\n                  defaultProps: () => ({\n                    styles: styles.indicator,\n                    accessibility: indicatorBehavior,\n                  }),\n                })}\n                {Box.create(content, {\n                  defaultProps: () => ({\n                    as: 'span',\n                    styles: styles.content,\n                  }),\n                })}\n              </>\n            ),\n            ...this.handleWrapperOverrides(predefinedProps),\n          }),\n        })}\n      </Ref>\n    );\n\n    return (\n      <ElementType\n        className={classes.root}\n        {...rtlTextContainer.getAttributes({ forElements: [children] })}\n        {...accessibility.attributes.root}\n        {...unhandledProps}\n        {...applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps)}\n      >\n        {childrenExist(children) ? children : contentWrapperElement}\n      </ElementType>\n    );\n  }\n}\n\nAccordionTitle.create = createShorthandFactory({ Component: AccordionTitle, mappedProp: 'content' });\n\nAccordionTitle.slotClassNames = {\n  contentWrapper: `${AccordionTitle.className}__content-wrapper`,\n};\n\n/**\n * An AccordionTitle represents the title of Accordion's item that can be interacted with to expand or collapse the item's content.\n */\nexport default withSafeTypeForAs<typeof AccordionTitle, AccordionTitleProps>(AccordionTitle);\n"]},"metadata":{},"sourceType":"module"}