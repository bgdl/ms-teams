{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport * as React from 'react';\nimport { withSafeTypeForAs } from '../../types';\nimport { cardBehavior } from '@fluentui/accessibility';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport { commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport CardHeader from './CardHeader';\nimport CardBody from './CardBody';\nimport CardPreview from './CardPreview';\nimport CardFooter from './CardFooter';\nimport CardTopControls from './CardTopControls';\nimport CardColumn from './CardColumn';\n\nvar Card = function Card(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(Card.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables,\n      children = props.children,\n      compact = props.compact,\n      horizontal = props.horizontal,\n      centered = props.centered,\n      size = props.size,\n      fluid = props.fluid;\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(Card.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: function performClick(e) {\n        handleClick(e);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(Card.displayName, {\n    className: Card.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        centered: centered,\n        horizontal: horizontal,\n        compact: compact,\n        size: size,\n        fluid: fluid\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: variables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes;\n\n  var handleClick = function handleClick(e) {\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick\n  }, unhandledProps)), children);\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\nCard.className = 'ui-card';\nCard.slotClassNames = {\n  header: \"\".concat(Card.className, \"__header\"),\n  body: \"\".concat(Card.className, \"__body\"),\n  footer: \"\".concat(Card.className, \"__footer\"),\n  preview: \"\".concat(Card.className, \"__preview\"),\n  topControls: \"\".concat(Card.className, \"__top-controls\")\n};\nCard.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool\n});\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium'\n};\nCard.handledProps = Object.keys(Card.propTypes);\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\nCard.create = createShorthandFactory({\n  Component: Card\n});\n/**\n * A Card is used to display data in sematically grouped way.\n */\n\nexport default withSafeTypeForAs(Card);","map":{"version":3,"sources":["components/Card/Card.tsx"],"names":["Card","context","React","setStart","setEnd","useTelemetry","className","design","styles","variables","children","compact","horizontal","centered","size","fluid","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","performClick","handleClick","rtl","classes","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","onClick","header","body","footer","preview","topControls","commonPropTypes","PropTypes","CustomPropTypes","bool","accessibility","Object","createShorthandFactory","Component","withSafeTypeForAs"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  WithAsProp,\n  withSafeTypeForAs,\n  ComponentEventHandler,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { Accessibility, cardBehavior, CardBehaviorProps } from '@fluentui/accessibility';\nimport * as CustomPropTypes from '@fluentui/react-proptypes';\nimport { UIComponentProps, commonPropTypes, createShorthandFactory, SizeValue } from '../../utils';\nimport { useTelemetry, useStyles, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport CardHeader from './CardHeader';\nimport CardBody from './CardBody';\nimport CardPreview from './CardPreview';\nimport CardFooter from './CardFooter';\nimport CardTopControls from './CardTopControls';\nimport CardColumn from './CardColumn';\n\nexport interface CardProps extends UIComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<CardBehaviorProps>;\n\n  /** A primary content. */\n  children?: React.ReactNode;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<CardProps>;\n\n  /** A card can be compact, without any padding inside. */\n  compact?: boolean;\n\n  /** A card will used horizontal layout. */\n  horizontal?: boolean;\n\n  /** Centers content in a card. */\n  centered?: boolean;\n\n  /** A card can be sized. */\n  size?: SizeValue;\n\n  /** A card can take up the width and height of its container. */\n  fluid?: boolean;\n}\n\nexport type CardStylesProps = Pick<CardProps, 'compact' | 'horizontal' | 'centered' | 'size' | 'fluid'>;\n\nexport interface CardSlotClassNames {\n  header: string;\n  body: string;\n  footer: string;\n  preview: string;\n  topControls: string;\n}\n\nconst Card: React.FC<WithAsProp<CardProps>> &\n  FluentComponentStaticProps<CardProps> & {\n    Header: typeof CardHeader;\n    Body: typeof CardBody;\n    Footer: typeof CardFooter;\n    Preview: typeof CardPreview;\n    TopControls: typeof CardPreview;\n    Column: typeof CardColumn;\n    slotClassNames: CardSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(Card.displayName, context.telemetry);\n  setStart();\n\n  const { className, design, styles, variables, children, compact, horizontal, centered, size, fluid } = props;\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Card.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Card.displayName,\n    actionHandlers: {\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<CardStylesProps>(Card.displayName, {\n    className: Card.className,\n    mapPropsToStyles: () => ({\n      centered,\n      horizontal,\n      compact,\n      size,\n      fluid,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        ...unhandledProps,\n      })}\n    >\n      {children}\n    </ElementType>\n  );\n  setEnd();\n  return element;\n};\n\nCard.displayName = 'Card';\nCard.className = 'ui-card';\n\nCard.slotClassNames = {\n  header: `${Card.className}__header`,\n  body: `${Card.className}__body`,\n  footer: `${Card.className}__footer`,\n  preview: `${Card.className}__preview`,\n  topControls: `${Card.className}__top-controls`,\n};\n\nCard.propTypes = {\n  ...commonPropTypes.createCommon(),\n  onClick: PropTypes.func,\n  compact: PropTypes.bool,\n  horizontal: PropTypes.bool,\n  centered: PropTypes.bool,\n  size: CustomPropTypes.size,\n  fluid: PropTypes.bool,\n};\n\nCard.defaultProps = {\n  accessibility: cardBehavior,\n  size: 'medium',\n};\n\nCard.handledProps = Object.keys(Card.propTypes) as any;\nCard.Header = CardHeader;\nCard.Body = CardBody;\nCard.Footer = CardFooter;\nCard.Preview = CardPreview;\nCard.TopControls = CardTopControls;\nCard.Column = CardColumn;\n\nCard.create = createShorthandFactory({ Component: Card });\n\n/**\n * A Card is used to display data in sematically grouped way.\n */\nexport default withSafeTypeForAs<typeof Card, CardProps, 'div'>(Card);\n"]},"metadata":{},"sourceType":"module"}