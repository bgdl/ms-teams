{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _some from \"lodash/some\";\nimport _invoke from \"lodash/invoke\";\nimport { toolbarMenuItemBehavior, indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { focusAsync, useTelemetry, useStyles, useAutoControlled, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles'; // @ts-ignore\n\nimport { ThemeContext } from 'react-fela';\nimport { Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\nimport { commonPropTypes, createShorthandFactory, childrenExist, doesNodeContainClick } from '../../utils';\nimport { withSafeTypeForAs } from '../../types';\nimport { getPopperPropsFromShorthand, Popper } from '../../utils/positioner';\nimport Box from '../Box/Box';\nimport Popup from '../Popup/Popup';\nimport ToolbarMenu from './ToolbarMenu';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nvar ToolbarMenuItem = function ToolbarMenuItem(props) {\n  var context = React.useContext(ThemeContext);\n\n  var _useTelemetry = useTelemetry(ToolbarMenuItem.displayName, context.telemetry),\n      setStart = _useTelemetry.setStart,\n      setEnd = _useTelemetry.setEnd;\n\n  setStart();\n  var active = props.active,\n      activeIndicator = props.activeIndicator,\n      children = props.children,\n      content = props.content,\n      disabled = props.disabled,\n      submenuIndicator = props.submenuIndicator,\n      icon = props.icon,\n      menu = props.menu,\n      popup = props.popup,\n      wrapper = props.wrapper,\n      inSubmenu = props.inSubmenu,\n      className = props.className,\n      design = props.design,\n      styles = props.styles,\n      variables = props.variables;\n\n  var _useAutoControlled = useAutoControlled({\n    defaultValue: props.defaultMenuOpen,\n    value: props.menuOpen,\n    initialValue: false\n  }),\n      _useAutoControlled2 = _slicedToArray(_useAutoControlled, 2),\n      menuOpen = _useAutoControlled2[0],\n      setMenuOpen = _useAutoControlled2[1];\n\n  var itemRef = React.useRef();\n  var menuRef = React.useRef();\n  var parentVariables = React.useContext(ToolbarVariablesContext);\n  var mergedVariables = mergeComponentVariables(parentVariables, variables);\n  var ElementType = getElementType(props);\n  var unhandledProps = useUnhandledProps(ToolbarMenuItem.handledProps, props);\n  var getA11yProps = useAccessibility(props.accessibility, {\n    debugName: ToolbarMenuItem.displayName,\n    mapPropsToBehavior: function mapPropsToBehavior() {\n      return {\n        menu: menu,\n        menuOpen: menuOpen,\n        disabled: disabled,\n        'aria-label': props['aria-label'],\n        'aria-labelledby': props['aria-labelledby'],\n        'aria-describedby': props['aria-describedby']\n      };\n    },\n    actionHandlers: {\n      performClick: function performClick(event) {\n        event.preventDefault();\n        handleClick(event);\n      },\n      openMenu: function openMenu(event) {\n        return _openMenu(event);\n      },\n      closeAllMenusAndFocusNextParentItem: function closeAllMenusAndFocusNextParentItem(event) {\n        return _closeAllMenus(event);\n      },\n      closeMenu: function closeMenu(event) {\n        return _closeMenu(event);\n      },\n      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {\n        return _closeMenu(event);\n      },\n      doNotNavigateNextParentItem: function doNotNavigateNextParentItem(event) {\n        event.stopPropagation();\n      },\n      closeAllMenus: function closeAllMenus(event) {\n        return _closeAllMenus(event);\n      }\n    },\n    rtl: context.rtl\n  });\n\n  var _useStyles = useStyles(ToolbarMenuItem.displayName, {\n    className: ToolbarMenuItem.className,\n    mapPropsToStyles: function mapPropsToStyles() {\n      return {\n        disabled: disabled,\n        hasContent: !!content\n      };\n    },\n    mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n      return {\n        className: className,\n        design: design,\n        styles: styles,\n        variables: mergedVariables\n      };\n    },\n    rtl: context.rtl\n  }),\n      classes = _useStyles.classes,\n      resolvedStyles = _useStyles.styles;\n\n  var _openMenu = function _openMenu(e) {\n    if (menu && !menuOpen) {\n      trySetMenuOpen(true, e);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  var _closeMenu = function _closeMenu(e) {\n    if (!isSubmenuOpen()) {\n      return;\n    }\n\n    trySetMenuOpen(false, e, function () {\n      focusAsync(itemRef.current);\n    });\n    e.stopPropagation();\n  };\n\n  var _closeAllMenus = function _closeAllMenus(e) {\n    if (!isSubmenuOpen()) {\n      return;\n    }\n\n    trySetMenuOpen(false, e, function () {\n      if (!inSubmenu) {\n        focusAsync(itemRef.current);\n      }\n    }); // avoid spacebar scrolling the page\n\n    if (!inSubmenu) {\n      e.preventDefault();\n    }\n  };\n\n  var isSubmenuOpen = function isSubmenuOpen() {\n    return !!(menu && menuOpen);\n  };\n\n  var trySetMenuOpen = function trySetMenuOpen(newValue, e, onStateChanged) {\n    setMenuOpen(newValue); // The reason why post-effect is not passed as callback to trySetState method\n    // is that in 'controlled' mode the post-effect is applied before final re-rendering\n    // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n    // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n\n    onStateChanged && onStateChanged();\n\n    _invoke(props, 'onMenuOpenChange', e, Object.assign({}, props, {\n      menuOpen: newValue\n    }));\n  };\n\n  var outsideClickHandler = function outsideClickHandler(getRefs) {\n    return function (e) {\n      var isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n\n      var isNestedClick = _some(getRefs(), function (childRef) {\n        return doesNodeContainClick(childRef.current, e, context.target);\n      });\n\n      var isInside = isItemClick || isNestedClick;\n\n      if (!isInside) {\n        trySetMenuOpen(false, e);\n      }\n    };\n  };\n\n  var handleMenuOverrides = function handleMenuOverrides(predefinedProps) {\n    return {\n      onItemClick: function onItemClick(e, itemProps) {\n        var popup = itemProps.popup,\n            menuOpen = itemProps.menuOpen;\n\n        _invoke(predefinedProps, 'onItemClick', e, itemProps);\n\n        if (popup) {\n          return;\n        }\n\n        trySetMenuOpen(menuOpen, e);\n\n        if (!menuOpen) {\n          _invoke(itemRef.current, 'focus');\n        }\n      }\n    };\n  };\n\n  var handleClick = function handleClick(e) {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (menu) {\n      // the menuItem element was clicked => toggle the open/close and stop propagation\n      trySetMenuOpen(!menuOpen, e);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    if (popup) {\n      e.stopPropagation();\n      e.preventDefault();\n      return;\n    }\n\n    _invoke(props, 'onClick', e, props);\n  };\n\n  var element = React.createElement(ElementType, getA11yProps('root', Object.assign({\n    className: classes.root,\n    onClick: handleClick,\n    disabled: disabled\n  }, unhandledProps)), childrenExist(children) ? children : React.createElement(React.Fragment, null, Box.create(icon, {\n    defaultProps: function defaultProps() {\n      return {\n        styles: resolvedStyles.icon\n      };\n    }\n  }), content, active && Box.create(activeIndicator, {\n    defaultProps: function defaultProps() {\n      return {\n        as: 'span',\n        className: ToolbarMenuItem.slotClassNames.activeIndicator,\n        styles: resolvedStyles.activeIndicator,\n        accessibility: indicatorBehavior\n      };\n    }\n  }), menu && Box.create(submenuIndicator, {\n    defaultProps: function defaultProps() {\n      return {\n        as: 'span',\n        className: ToolbarMenuItem.slotClassNames.submenuIndicator,\n        styles: resolvedStyles.submenuIndicator,\n        accessibility: indicatorBehavior\n      };\n    }\n  })));\n  var hasChildren = childrenExist(children);\n\n  if (popup && !hasChildren) {\n    var popupElement = Popup.create(popup, {\n      defaultProps: function defaultProps() {\n        return {\n          trapFocus: true,\n          onOpenChange: function onOpenChange(e) {\n            e.stopPropagation();\n          }\n        };\n      },\n      overrideProps: {\n        trigger: element,\n        children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger`\n\n      }\n    });\n    setEnd();\n    return popupElement;\n  }\n\n  var menuItemInner = hasChildren ? children : React.createElement(Ref, {\n    innerRef: itemRef\n  }, element);\n  var maybeSubmenu = menu && menuOpen ? React.createElement(Unstable_NestingAuto, null, function (getRefs, nestingRef) {\n    return React.createElement(React.Fragment, null, React.createElement(Ref, {\n      innerRef: function innerRef(node) {\n        nestingRef.current = node;\n        menuRef.current = node;\n      }\n    }, React.createElement(Popper, _extends({\n      align: \"top\",\n      position: context.rtl ? 'before' : 'after',\n      targetRef: itemRef\n    }, getPopperPropsFromShorthand(menu)), React.createElement(ToolbarVariablesProvider, {\n      value: mergedVariables\n    }, ToolbarMenu.create(menu, {\n      defaultProps: function defaultProps() {\n        return {\n          className: ToolbarMenuItem.slotClassNames.submenu,\n          styles: resolvedStyles.menu,\n          submenu: true,\n          submenuIndicator: submenuIndicator\n        };\n      },\n      overrideProps: handleMenuOverrides\n    })))), React.createElement(EventListener, {\n      listener: outsideClickHandler(getRefs),\n      target: context.target,\n      type: \"click\"\n    }));\n  }) : null;\n\n  if (!wrapper) {\n    setEnd();\n    return menuItemInner;\n  }\n\n  var wrapperElement = Box.create(wrapper, {\n    defaultProps: function defaultProps() {\n      return getA11yProps('wrapper', {\n        className: cx(ToolbarMenuItem.slotClassNames.wrapper, classes.wrapper)\n      });\n    },\n    overrideProps: function overrideProps() {\n      return {\n        children: React.createElement(React.Fragment, null, menuItemInner, maybeSubmenu)\n      };\n    }\n  });\n  setEnd();\n  return wrapperElement;\n};\n\nToolbarMenuItem.displayName = 'ToolbarMenuItem';\nToolbarMenuItem.className = 'ui-toolbar__menuitem';\nToolbarMenuItem.slotClassNames = {\n  activeIndicator: \"\".concat(ToolbarMenuItem.className, \"__activeIndicator\"),\n  wrapper: \"\".concat(ToolbarMenuItem.className, \"__wrapper\"),\n  submenu: \"\".concat(ToolbarMenuItem.className, \"__submenu\"),\n  submenuIndicator: \"\".concat(ToolbarMenuItem.className, \"__submenuIndicator\")\n};\nToolbarMenuItem.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n  active: PropTypes.bool,\n  activeIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultMenuOpen: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  index: PropTypes.number,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n  inSubmenu: PropTypes.bool,\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  menuOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  onMenuOpenChange: PropTypes.func,\n  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {\n    trigger: customPropTypes.never,\n    children: customPropTypes.never\n  })), PropTypes.string]),\n  wrapper: customPropTypes.itemShorthand\n});\nToolbarMenuItem.handledProps = Object.keys(ToolbarMenuItem.propTypes);\nToolbarMenuItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarMenuItemBehavior,\n  wrapper: {\n    as: 'li'\n  },\n  activeIndicator: {},\n  submenuIndicator: {}\n};\nToolbarMenuItem.create = createShorthandFactory({\n  Component: ToolbarMenuItem,\n  mappedProp: 'content'\n});\n/**\n * A ToolbarMenuItem renders ToolbarMenu item as button.\n */\n\nexport default withSafeTypeForAs(ToolbarMenuItem);","map":{"version":3,"sources":["components/Toolbar/ToolbarMenuItem.tsx"],"names":["ToolbarMenuItem","context","React","setStart","setEnd","useTelemetry","active","activeIndicator","children","content","disabled","submenuIndicator","icon","menu","popup","wrapper","inSubmenu","className","design","styles","variables","props","menuOpen","setMenuOpen","useAutoControlled","defaultValue","value","initialValue","itemRef","menuRef","parentVariables","mergedVariables","mergeComponentVariables","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","actionHandlers","performClick","event","handleClick","openMenu","closeAllMenusAndFocusNextParentItem","closeAllMenus","closeMenu","closeMenuAndFocusTrigger","doNotNavigateNextParentItem","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","hasContent","mapPropsToInlineStyles","trySetMenuOpen","e","isSubmenuOpen","focusAsync","onStateChanged","newValue","outsideClickHandler","isItemClick","doesNodeContainClick","isNestedClick","getRefs","childRef","isInside","handleMenuOverrides","onItemClick","itemProps","element","onClick","childrenExist","defaultProps","as","accessibility","indicatorBehavior","hasChildren","popupElement","trapFocus","onOpenChange","overrideProps","trigger","menuItemInner","maybeSubmenu","nestingRef","getPopperPropsFromShorthand","submenu","wrapperElement","cx","commonPropTypes","PropTypes","customPropTypes","defaultMenuOpen","index","onMenuOpenChange","Popup","never","itemShorthand","Object","createShorthandFactory","Component","mappedProp","withSafeTypeForAs"],"mappings":";;;;AAAA,SAAA,uBAAA,EAAA,iBAAA,QAAA,yBAAA;AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,EAAA,MAAA,YAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AAEA,SAAA,aAAA,QAAA,0CAAA;AACA,SAAA,GAAA,QAAA,+BAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,SAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,gBAAA,QAAA,0BAAA;AASA,SAAA,uBAAA,QAAA,kBAAA,C,CACA;;AACA,SAAA,YAAA,QAAA,YAAA;AACA,SAAA,oBAAA,QAAA,4CAAA;AAEA,SAAA,eAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,oBAAA,QAAA,aAAA;AASA,SAAA,iBAAA,QAAA,aAAA;AAUA,SAAA,2BAAA,EAAA,MAAA,QAAA,wBAAA;AAEA,OAAA,GAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,gBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AACA,SAAA,uBAAA,EAAA,wBAAA,QAAA,2BAAA;;AA4EA,IAAMA,eAGH,GAAG,SAHAA,eAGA,CAAA,KAAA,EAAS;AACb,MAAMC,OAAgC,GAAGC,KAAK,CAALA,UAAAA,CAAzC,YAAyCA,CAAzC;;AADa,MAAA,aAAA,GAEgBG,YAAY,CAACL,eAAe,CAAhB,WAAA,EAA8BC,OAAO,CAFjE,SAE4B,CAF5B;AAAA,MAELE,QAFK,GAAA,aAAA,CAAA,QAAA;AAAA,MAEKC,MAFL,GAAA,aAAA,CAAA,MAAA;;AAGbD,EAAAA,QAAQ;AAHK,MAMXG,MANW,GAqBTe,KArBS,CAAA,MAAA;AAAA,MAOXd,eAPW,GAqBTc,KArBS,CAAA,eAAA;AAAA,MAQXb,QARW,GAqBTa,KArBS,CAAA,QAAA;AAAA,MASXZ,OATW,GAqBTY,KArBS,CAAA,OAAA;AAAA,MAUXX,QAVW,GAqBTW,KArBS,CAAA,QAAA;AAAA,MAWXV,gBAXW,GAqBTU,KArBS,CAAA,gBAAA;AAAA,MAYXT,IAZW,GAqBTS,KArBS,CAAA,IAAA;AAAA,MAaXR,IAbW,GAqBTQ,KArBS,CAAA,IAAA;AAAA,MAcXP,KAdW,GAqBTO,KArBS,CAAA,KAAA;AAAA,MAeXN,OAfW,GAqBTM,KArBS,CAAA,OAAA;AAAA,MAgBXL,SAhBW,GAqBTK,KArBS,CAAA,SAAA;AAAA,MAiBXJ,SAjBW,GAqBTI,KArBS,CAAA,SAAA;AAAA,MAkBXH,MAlBW,GAqBTG,KArBS,CAAA,MAAA;AAAA,MAmBXF,MAnBW,GAqBTE,KArBS,CAAA,MAAA;AAAA,MAoBXD,SApBW,GAqBTC,KArBS,CAAA,SAAA;;AAAA,MAAA,kBAAA,GAuBmBG,iBAAiB,CAAC;AAChDC,IAAAA,YAAY,EAAEJ,KAAK,CAD6B,eAAA;AAEhDK,IAAAA,KAAK,EAAEL,KAAK,CAFoC,QAAA;AAGhDM,IAAAA,YAAY,EAAE;AAHkC,GAAD,CAvBpC;AAAA,MAAA,mBAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,CAAA,CAAA;AAAA,MAuBNL,QAvBM,GAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,MAuBIC,WAvBJ,GAAA,mBAAA,CAAA,CAAA,CAAA;;AA6Bb,MAAMK,OAAO,GAAG1B,KAAK,CAArB,MAAgBA,EAAhB;AACA,MAAM2B,OAAO,GAAG3B,KAAK,CAArB,MAAgBA,EAAhB;AAEA,MAAM4B,eAAe,GAAG5B,KAAK,CAALA,UAAAA,CAAxB,uBAAwBA,CAAxB;AACA,MAAM6B,eAAe,GAAGC,uBAAuB,CAAA,eAAA,EAA/C,SAA+C,CAA/C;AAEA,MAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,MAAMC,cAAc,GAAGC,iBAAiB,CAACpC,eAAe,CAAhB,YAAA,EAAxC,KAAwC,CAAxC;AAEA,MAAMqC,YAAY,GAAGC,gBAAgB,CAACjB,KAAK,CAAN,aAAA,EAAsB;AACzDkB,IAAAA,SAAS,EAAEvC,eAAe,CAD+B,WAAA;AAEzDwC,IAAAA,kBAAkB,EAAE,SAAA,kBAAA,GAAA;AAAA,aAAO;AACzB3B,QAAAA,IAAI,EADqB,IAAA;AAEzBS,QAAAA,QAAQ,EAFiB,QAAA;AAGzBZ,QAAAA,QAAQ,EAHiB,QAAA;AAIzB,sBAAcW,KAAK,CAJM,YAIN,CAJM;AAKzB,2BAAmBA,KAAK,CALC,iBAKD,CALC;AAMzB,4BAAoBA,KAAK,CAAA,kBAAA;AANA,OAAP;AAFqC,KAAA;AAUzDoB,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,KAAA,EAAS;AACrBC,QAAAA,KAAK,CAALA,cAAAA;AACAC,QAAAA,WAAW,CAAXA,KAAW,CAAXA;AAHY,OAAA;AAKdC,MAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAK;AAAA,eAAIA,SAAQ,CAAZ,KAAY,CAAZ;AALD,OAAA;AAMdC,MAAAA,mCAAmC,EAAE,SAAA,mCAAA,CAAA,KAAA,EAAK;AAAA,eAAIC,cAAa,CAAjB,KAAiB,CAAjB;AAN5B,OAAA;AAOdC,MAAAA,SAAS,EAAE,SAAA,SAAA,CAAA,KAAA,EAAK;AAAA,eAAIA,UAAS,CAAb,KAAa,CAAb;AAPF,OAAA;AAQdC,MAAAA,wBAAwB,EAAE,SAAA,wBAAA,CAAA,KAAA,EAAK;AAAA,eAAID,UAAS,CAAb,KAAa,CAAb;AARjB,OAAA;AASdE,MAAAA,2BAA2B,EAAE,SAAA,2BAAA,CAAA,KAAA,EAAS;AACpCP,QAAAA,KAAK,CAALA,eAAAA;AAVY,OAAA;AAYdI,MAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,KAAA,EAAK;AAAA,eAAIA,cAAa,CAAjB,KAAiB,CAAjB;AAAA;AAZN,KAVyC;AAwBzDI,IAAAA,GAAG,EAAElD,OAAO,CAACkD;AAxB4C,GAAtB,CAArC;;AAtCa,MAAA,UAAA,GAiE+BG,SAAS,CAA6BtD,eAAe,CAA5C,WAAA,EAA0D;AAC7GiB,IAAAA,SAAS,EAAEjB,eAAe,CADmF,SAAA;AAE7GuD,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,aAAO;AACvB7C,QAAAA,QAAQ,EADe,QAAA;AAEvB8C,QAAAA,UAAU,EAAE,CAAC,CAAC/C;AAFS,OAAP;AAF2F,KAAA;AAM7GgD,IAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,aAAO;AAC7BxC,QAAAA,SAAS,EADoB,SAAA;AAE7BC,QAAAA,MAAM,EAFuB,MAAA;AAG7BC,QAAAA,MAAM,EAHuB,MAAA;AAI7BC,QAAAA,SAAS,EAAEW;AAJkB,OAAP;AANqF,KAAA;AAY7GoB,IAAAA,GAAG,EAAElD,OAAO,CAACkD;AAZgG,GAA1D,CAjExC;AAAA,MAiELC,OAjEK,GAAA,UAAA,CAAA,OAAA;AAAA,MAiEYC,cAjEZ,GAAA,UAAA,CAAA,MAAA;;AAgFb,MAAMR,SAAQ,GAAG,SAAXA,SAAW,CAAA,CAAA,EAA4B;AAC3C,QAAIhC,IAAI,IAAI,CAAZ,QAAA,EAAuB;AACrB6C,MAAAA,cAAc,CAAA,IAAA,EAAdA,CAAc,CAAdA;AACAC,MAAAA,CAAC,CAADA,eAAAA;AACAA,MAAAA,CAAC,CAADA,cAAAA;AACD;AALH,GAAA;;AAQA,MAAMX,UAAS,GAAG,SAAZA,UAAY,CAAA,CAAA,EAA4B;AAC5C,QAAI,CAACY,aAAL,EAAA,EAAsB;AACpB;AACD;;AAEDF,IAAAA,cAAc,CAAA,KAAA,EAAA,CAAA,EAAW,YAAM;AAC7BG,MAAAA,UAAU,CAACjC,OAAO,CAAlBiC,OAAU,CAAVA;AADFH,KAAc,CAAdA;AAIAC,IAAAA,CAAC,CAADA,eAAAA;AATF,GAAA;;AAYA,MAAMZ,cAAa,GAAG,SAAhBA,cAAgB,CAAA,CAAA,EAA4B;AAChD,QAAI,CAACa,aAAL,EAAA,EAAsB;AACpB;AACD;;AACDF,IAAAA,cAAc,CAAA,KAAA,EAAA,CAAA,EAAW,YAAM;AAC7B,UAAI,CAAJ,SAAA,EAAgB;AACdG,QAAAA,UAAU,CAACjC,OAAO,CAAlBiC,OAAU,CAAVA;AACD;AAP6C,KAIlC,CAAdH,CAJgD,CAUhD;;AACA,QAAI,CAAJ,SAAA,EAAgB;AACdC,MAAAA,CAAC,CAADA,cAAAA;AACD;AAbH,GAAA;;AAgBA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAe;AACnC,WAAO,CAAC,EAAE/C,IAAI,IAAd,QAAQ,CAAR;AADF,GAAA;;AAIA,MAAM6C,cAAc,GAAG,SAAjBA,cAAiB,CAAA,QAAA,EAAA,CAAA,EAAA,cAAA,EAA8E;AACnGnC,IAAAA,WAAW,CADwF,QACxF,CAAXA,CADmG,CAEnG;AACA;AACA;AACA;;AACAuC,IAAAA,cAAc,IAAIA,cAAlBA,EAAAA;;AACA,IAAA,OAAA,CAAA,KAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEExC,MAAAA,QAAQ,EAAEyC;AAFZ,KAAA,CAAA,CAAA;AAPF,GAAA;;AAaA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,OAAA,EAAA;AAAA,WAAsB,UAAA,CAAA,EAAmB;AACnE,UAAMC,WAAW,GAAGC,oBAAoB,CAACtC,OAAO,CAAR,OAAA,EAAA,CAAA,EAAqB3B,OAAO,CAApE,MAAwC,CAAxC;;AACA,UAAMkE,aAAa,GAAG,KAAA,CAAOC,OAAP,EAAA,EAAkB,UAAA,QAAA,EAAuB;AAC7D,eAAOF,oBAAoB,CAACG,QAAQ,CAAT,OAAA,EAAA,CAAA,EAAqCpE,OAAO,CAAvE,MAA2B,CAA3B;AADF,OAAsB,CAAtB;;AAGA,UAAMqE,QAAQ,GAAGL,WAAW,IAA5B,aAAA;;AAEA,UAAI,CAAJ,QAAA,EAAe;AACbP,QAAAA,cAAc,CAAA,KAAA,EAAdA,CAAc,CAAdA;AACD;AATyB,KAAA;AAA5B,GAAA;;AAYA,MAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,eAAA,EAAA;AAAA,WAAwC;AAClEC,MAAAA,WAAW,EAAE,SAAA,WAAA,CAAA,CAAA,EAAA,SAAA,EAAwC;AAAA,YAC3C1D,KAD2C,GACvB2D,SADuB,CAAA,KAAA;AAAA,YACpCnD,QADoC,GACvBmD,SADuB,CAAA,QAAA;;AAEnD,QAAA,OAAA,CAAA,eAAA,EAAA,aAAA,EAAA,CAAA,EAAA,SAAA,CAAA;;AACA,YAAA,KAAA,EAAW;AACT;AACD;;AAEDf,QAAAA,cAAc,CAAA,QAAA,EAAdA,CAAc,CAAdA;;AACA,YAAI,CAAJ,QAAA,EAAe;AACb,UAAA,OAAA,CAAS9B,OAAO,CAAhB,OAAA,EAAA,OAAA,CAAA;AACD;AACF;AAZiE,KAAxC;AAA5B,GAAA;;AAeA,MAAMgB,WAAW,GAAG,SAAdA,WAAc,CAAA,CAAA,EAA+C;AACjE,QAAA,QAAA,EAAc;AACZe,MAAAA,CAAC,CAADA,cAAAA;AACA;AACD;;AAED,QAAA,IAAA,EAAU;AACR;AACAD,MAAAA,cAAc,CAAC,CAAD,QAAA,EAAdA,CAAc,CAAdA;AACAC,MAAAA,CAAC,CAADA,eAAAA;AACAA,MAAAA,CAAC,CAADA,cAAAA;AACD;;AAED,QAAA,KAAA,EAAW;AACTA,MAAAA,CAAC,CAADA,eAAAA;AACAA,MAAAA,CAAC,CAADA,cAAAA;AACA;AACD;;AAED,IAAA,OAAA,CAAA,KAAA,EAAA,SAAA,EAAA,CAAA,EAAA,KAAA,CAAA;AAnBF,GAAA;;AAsBA,MAAMe,OAAO,GACX,KAAA,CAAA,aAAA,CAAA,WAAA,EACMrC,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdpB,IAAAA,SAAS,EAAEmC,OAAO,CADJ,IAAA;AAEduB,IAAAA,OAAO,EAFO,WAAA;AAGdjE,IAAAA,QAAQ,EAARA;AAHc,GAAA,EADlB,cACkB,CAAA,CADlB,EAQGkE,aAAa,CAAbA,QAAa,CAAbA,GAAAA,QAAAA,GAGC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,GAAG,CAAH,MAAA,CAAA,IAAA,EAAiB;AAChBC,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAO;AACnB1D,QAAAA,MAAM,EAAEkC,cAAc,CAACzC;AADJ,OAAP;AAAA;AADE,GAAjB,CADH,EAAA,OAAA,EAOGN,MAAM,IACL,GAAG,CAAH,MAAA,CAAA,eAAA,EAA4B;AAC1BuE,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAO;AACnBC,QAAAA,EAAE,EADiB,MAAA;AAEnB7D,QAAAA,SAAS,EAAEjB,eAAe,CAAfA,cAAAA,CAFQ,eAAA;AAGnBmB,QAAAA,MAAM,EAAEkC,cAAc,CAHH,eAAA;AAInB0B,QAAAA,aAAa,EAAEC;AAJI,OAAP;AAAA;AADY,GAA5B,CARJ,EAgBGnE,IAAI,IACH,GAAG,CAAH,MAAA,CAAA,gBAAA,EAA6B;AAC3BgE,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aAAO;AACnBC,QAAAA,EAAE,EADiB,MAAA;AAEnB7D,QAAAA,SAAS,EAAEjB,eAAe,CAAfA,cAAAA,CAFQ,gBAAA;AAGnBmB,QAAAA,MAAM,EAAEkC,cAAc,CAHH,gBAAA;AAInB0B,QAAAA,aAAa,EAAEC;AAJI,OAAP;AAAA;AADa,GAA7B,CAjBJ,CAXJ,CADF;AA0CA,MAAMC,WAAW,GAAGL,aAAa,CAAjC,QAAiC,CAAjC;;AAEA,MAAI9D,KAAK,IAAI,CAAb,WAAA,EAA2B;AACzB,QAAMoE,YAAY,GAAG,KAAK,CAAL,MAAA,CAAA,KAAA,EAAoB;AACvCL,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eAAO;AACnBM,UAAAA,SAAS,EADU,IAAA;AAEnBC,UAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAK;AACjBzB,YAAAA,CAAC,CAADA,eAAAA;AACD;AAJkB,SAAP;AADyB,OAAA;AAOvC0B,MAAAA,aAAa,EAAE;AACbC,QAAAA,OAAO,EADM,OAAA;AAEb9E,QAAAA,QAAQ,EAFK,SAAA,CAEQ;;AAFR;AAPwB,KAApB,CAArB;AAYAJ,IAAAA,MAAM;AAEN,WAAA,YAAA;AACD;;AAED,MAAMmF,aAAa,GAAGN,WAAW,GAAA,QAAA,GAAsC,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,QAAQ,EAAErD;AAAf,GAAA,EAAvE,OAAuE,CAAvE;AAEA,MAAM4D,YAAY,GAChB,IAAI,IAAJ,QAAA,GACE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA,IAAA,EACG,UAAA,OAAA,EAAA,UAAA,EAAA;AAAA,WACC,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AACE,MAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,IAAA,EAAuB;AAC/BC,QAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AACA5D,QAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACD;AAJH,KAAA,EAME,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EADP,KAAA;AAEE,MAAA,QAAQ,EAAE5B,OAAO,CAAPA,GAAAA,GAAAA,QAAAA,GAFZ,OAAA;AAGE,MAAA,SAAS,EAAE2B;AAHb,KAAA,EAIM8D,2BAA2B,CAJjC,IAIiC,CAJjC,CAAA,EAME,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,MAAA,KAAK,EAAE3D;AAAjC,KAAA,EACG,WAAW,CAAX,MAAA,CAAA,IAAA,EAAyB;AACxB8C,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eAAO;AACnB5D,UAAAA,SAAS,EAAEjB,eAAe,CAAfA,cAAAA,CADQ,OAAA;AAEnBmB,UAAAA,MAAM,EAAEkC,cAAc,CAFH,IAAA;AAGnBsC,UAAAA,OAAO,EAHY,IAAA;AAInBhF,UAAAA,gBAAgB,EAAhBA;AAJmB,SAAP;AADU,OAAA;AAOxB0E,MAAAA,aAAa,EAAEd;AAPS,KAAzB,CADH,CANF,CANF,CADF,EA0BE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AAAe,MAAA,QAAQ,EAAEP,mBAAmB,CAA5C,OAA4C,CAA5C;AAAuD,MAAA,MAAM,EAAE/D,OAAO,CAAtE,MAAA;AAA+E,MAAA,IAAI,EAAC;AAApF,KAAA,CA1BF,CADD;AAFL,GACE,CADF,GADF,IAAA;;AAoCA,MAAI,CAAJ,OAAA,EAAc;AACZG,IAAAA,MAAM;AACN,WAAA,aAAA;AACD;;AAED,MAAMwF,cAAc,GAAG,GAAG,CAAH,MAAA,CAAA,OAAA,EAAoB;AACzCf,IAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,aACZxC,YAAY,CAAA,SAAA,EAAY;AACtBpB,QAAAA,SAAS,EAAE4E,EAAE,CAAC7F,eAAe,CAAfA,cAAAA,CAAD,OAAA,EAAyCoD,OAAO,CAAhD,OAAA;AADS,OAAZ,CADA;AAD2B,KAAA;AAKzCiC,IAAAA,aAAa,EAAE,SAAA,aAAA,GAAA;AAAA,aAAO;AACpB7E,QAAAA,QAAQ,EACN,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAA,aAAA,EAAA,YAAA;AAFkB,OAAP;AAAA;AAL0B,GAApB,CAAvB;AAcAJ,EAAAA,MAAM;AAEN,SAAA,cAAA;AAlTF,CAAA;;AAqTAJ,eAAe,CAAfA,WAAAA,GAAAA,iBAAAA;AAEAA,eAAe,CAAfA,SAAAA,GAAAA,sBAAAA;AAEAA,eAAe,CAAfA,cAAAA,GAAiC;AAC/BO,EAAAA,eAAe,EAAA,GAAA,MAAA,CAAKP,eAAe,CAApB,SAAA,EADgB,mBAChB,CADgB;AAE/Be,EAAAA,OAAO,EAAA,GAAA,MAAA,CAAKf,eAAe,CAApB,SAAA,EAFwB,WAExB,CAFwB;AAG/B2F,EAAAA,OAAO,EAAA,GAAA,MAAA,CAAK3F,eAAe,CAApB,SAAA,EAHwB,WAGxB,CAHwB;AAI/BW,EAAAA,gBAAgB,EAAA,GAAA,MAAA,CAAKX,eAAe,CAApB,SAAA,EAAA,oBAAA;AAJe,CAAjCA;AAOAA,eAAe,CAAfA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK8F,eAAe,CADpB9F,YACK8F,EADL9F,EAAAA;AAEEM,EAAAA,MAAM,EAAEyF,SAAS,CAFnB/F,IAAAA;AAGEO,EAAAA,eAAe,EAAEyF,eAAe,CAHlChG,yBAAAA;AAIEiG,EAAAA,eAAe,EAAEF,SAAS,CAJ5B/F,IAAAA;AAKEU,EAAAA,QAAQ,EAAEqF,SAAS,CALrB/F,IAAAA;AAMEY,EAAAA,IAAI,EAAEoF,eAAe,CANvBhG,yBAAAA;AAOEkG,EAAAA,KAAK,EAAEH,SAAS,CAPlB/F,MAAAA;AAQEW,EAAAA,gBAAgB,EAAEqF,eAAe,CARnChG,yBAAAA;AASEgB,EAAAA,SAAS,EAAE+E,SAAS,CATtB/F,IAAAA;AAUEa,EAAAA,IAAI,EAAEkF,SAAS,CAATA,SAAAA,CAAoB,CAACC,eAAe,CAAhB,aAAA,EAAgCA,eAAe,CAV3EhG,mBAU4B,CAApB+F,CAVR/F;AAWEsB,EAAAA,QAAQ,EAAEyE,SAAS,CAXrB/F,IAAAA;AAYE2E,EAAAA,OAAO,EAAEoB,SAAS,CAZpB/F,IAAAA;AAaEmG,EAAAA,gBAAgB,EAAEJ,SAAS,CAb7B/F,IAAAA;AAcEc,EAAAA,KAAK,EAAEiF,SAAS,CAATA,SAAAA,CAAoB,CACzB,SAAS,CAAT,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACKK,KAAK,CADV,SAAA,EAAA;AAEEd,IAAAA,OAAO,EAAEU,eAAe,CAF1B,KAAA;AAGExF,IAAAA,QAAQ,EAAEwF,eAAe,CAACK;AAH5B,GAAA,CAAA,CADyB,EAMzBN,SAAS,CApBb/F,MAc6B,CAApB+F,CAdT/F;AAsBEe,EAAAA,OAAO,EAAEiF,eAAe,CAACM;AAtB3BtG,CAAAA,CAAAA;AAyBAA,eAAe,CAAfA,YAAAA,GAA+BuG,MAAM,CAANA,IAAAA,CAAYvG,eAAe,CAA1DA,SAA+BuG,CAA/BvG;AAEAA,eAAe,CAAfA,YAAAA,GAA+B;AAC7B8E,EAAAA,EAAE,EAD2B,QAAA;AAE7BC,EAAAA,aAAa,EAFgB,uBAAA;AAG7BhE,EAAAA,OAAO,EAAE;AAAE+D,IAAAA,EAAE,EAAE;AAAN,GAHoB;AAI7BvE,EAAAA,eAAe,EAJc,EAAA;AAK7BI,EAAAA,gBAAgB,EAAE;AALW,CAA/BX;AAQAA,eAAe,CAAfA,MAAAA,GAAyBwG,sBAAsB,CAAC;AAC9CC,EAAAA,SAAS,EADqC,eAAA;AAE9CC,EAAAA,UAAU,EAAE;AAFkC,CAAD,CAA/C1G;AAKA;;;;AAGA,eAAe2G,iBAAiB,CAAhC,eAAgC,CAAhC","sourcesContent":["import {\n  Accessibility,\n  toolbarMenuItemBehavior,\n  ToolbarMenuItemBehaviorProps,\n  indicatorBehavior,\n} from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport * as PropTypes from 'prop-types';\n\nimport { EventListener } from '@fluentui/react-component-event-listener';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport {\n  focusAsync,\n  useTelemetry,\n  useStyles,\n  useAutoControlled,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n} from '@fluentui/react-bindings';\nimport { mergeComponentVariables } from '@fluentui/styles';\n// @ts-ignore\nimport { ThemeContext } from 'react-fela';\nimport { GetRefs, NodeRef, Unstable_NestingAuto } from '@fluentui/react-component-nesting-registry';\n\nimport {\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  UIComponentProps,\n  createShorthandFactory,\n  childrenExist,\n  doesNodeContainClick,\n} from '../../utils';\nimport {\n  ComponentEventHandler,\n  ShorthandValue,\n  WithAsProp,\n  withSafeTypeForAs,\n  Omit,\n  ShorthandCollection,\n  FluentComponentStaticProps,\n  ProviderContextPrepared,\n} from '../../types';\nimport { getPopperPropsFromShorthand, Popper, PopperShorthandProps } from '../../utils/positioner';\n\nimport Box, { BoxProps } from '../Box/Box';\nimport Popup, { PopupProps } from '../Popup/Popup';\nimport ToolbarMenu, { ToolbarMenuProps, ToolbarMenuItemShorthandKinds } from './ToolbarMenu';\nimport { ToolbarVariablesContext, ToolbarVariablesProvider } from './toolbarVariablesContext';\n\nexport interface ToolbarMenuItemProps extends UIComponentProps, ChildrenComponentProps, ContentComponentProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<ToolbarMenuItemBehaviorProps>;\n\n  /** A toolbar item can be active. */\n  active?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  activeIndicator?: ShorthandValue<BoxProps>;\n\n  /** A toolbar item can show it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Name or shorthand for Toolbar Item Icon */\n  icon?: ShorthandValue<BoxProps>;\n\n  /** ToolbarMenuItem index inside ToolbarMenu. */\n  index?: number;\n\n  /** Shorthand for the submenu indicator. */\n  submenuIndicator?: ShorthandValue<BoxProps>;\n\n  /** Indicates whether the menu item is part of submenu. */\n  inSubmenu?: boolean;\n\n  /** Shorthand for the submenu. */\n  menu?:\n    | ShorthandValue<ToolbarMenuProps & { popper?: PopperShorthandProps }>\n    | ShorthandCollection<ToolbarMenuItemProps, ToolbarMenuItemShorthandKinds>;\n\n  /** Indicates if the menu inside the item is open. */\n  menuOpen?: boolean;\n\n  /** Default menu open */\n  defaultMenuOpen?: boolean;\n\n  /**\n   * Called on click.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onClick?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /**\n   * Called when the menu inside the item opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `menuOpen` reflecting the new state.\n   */\n  onMenuOpenChange?: ComponentEventHandler<ToolbarMenuItemProps>;\n\n  /**\n   * Attaches a `Popup` component to the ToolbarMenuItem.\n   * Accepts all props as a `Popup`, except `trigger` and `children`.\n   * Traps focus by default.\n   * @see PopupProps\n   */\n  popup?: Omit<PopupProps, 'trigger' | 'children'> | string;\n\n  /** Shorthand for the wrapper component. */\n  wrapper?: ShorthandValue<BoxProps>;\n}\n\nexport type ToolbarMenuItemStylesProps = Pick<ToolbarMenuItemProps, 'disabled'> & { hasContent: boolean };\n\nexport interface ToolbarMenuItemSlotClassNames {\n  activeIndicator: string;\n  wrapper: string;\n  submenu: string;\n  submenuIndicator: string;\n}\n\nconst ToolbarMenuItem: React.FC<WithAsProp<ToolbarMenuItemProps>> &\n  FluentComponentStaticProps<ToolbarMenuItemProps> & {\n    slotClassNames: ToolbarMenuItemSlotClassNames;\n  } = props => {\n  const context: ProviderContextPrepared = React.useContext(ThemeContext);\n  const { setStart, setEnd } = useTelemetry(ToolbarMenuItem.displayName, context.telemetry);\n  setStart();\n\n  const {\n    active,\n    activeIndicator,\n    children,\n    content,\n    disabled,\n    submenuIndicator,\n    icon,\n    menu,\n    popup,\n    wrapper,\n    inSubmenu,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n\n  const [menuOpen, setMenuOpen] = useAutoControlled({\n    defaultValue: props.defaultMenuOpen,\n    value: props.menuOpen,\n    initialValue: false,\n  });\n\n  const itemRef = React.useRef<HTMLElement>();\n  const menuRef = React.useRef<HTMLElement>();\n\n  const parentVariables = React.useContext(ToolbarVariablesContext);\n  const mergedVariables = mergeComponentVariables(parentVariables, variables);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(ToolbarMenuItem.handledProps, props);\n\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: ToolbarMenuItem.displayName,\n    mapPropsToBehavior: () => ({\n      menu,\n      menuOpen,\n      disabled,\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-describedby': props['aria-describedby'],\n    }),\n    actionHandlers: {\n      performClick: event => {\n        event.preventDefault();\n        handleClick(event);\n      },\n      openMenu: event => openMenu(event),\n      closeAllMenusAndFocusNextParentItem: event => closeAllMenus(event),\n      closeMenu: event => closeMenu(event),\n      closeMenuAndFocusTrigger: event => closeMenu(event),\n      doNotNavigateNextParentItem: event => {\n        event.stopPropagation();\n      },\n      closeAllMenus: event => closeAllMenus(event),\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<ToolbarMenuItemStylesProps>(ToolbarMenuItem.displayName, {\n    className: ToolbarMenuItem.className,\n    mapPropsToStyles: () => ({\n      disabled,\n      hasContent: !!content,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables: mergedVariables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const openMenu = (e: React.KeyboardEvent) => {\n    if (menu && !menuOpen) {\n      trySetMenuOpen(true, e);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n\n  const closeMenu = (e: React.KeyboardEvent) => {\n    if (!isSubmenuOpen()) {\n      return;\n    }\n\n    trySetMenuOpen(false, e, () => {\n      focusAsync(itemRef.current);\n    });\n\n    e.stopPropagation();\n  };\n\n  const closeAllMenus = (e: React.KeyboardEvent) => {\n    if (!isSubmenuOpen()) {\n      return;\n    }\n    trySetMenuOpen(false, e, () => {\n      if (!inSubmenu) {\n        focusAsync(itemRef.current);\n      }\n    });\n\n    // avoid spacebar scrolling the page\n    if (!inSubmenu) {\n      e.preventDefault();\n    }\n  };\n\n  const isSubmenuOpen = (): boolean => {\n    return !!(menu && menuOpen);\n  };\n\n  const trySetMenuOpen = (newValue: boolean, e: Event | React.SyntheticEvent, onStateChanged?: any) => {\n    setMenuOpen(newValue);\n    // The reason why post-effect is not passed as callback to trySetState method\n    // is that in 'controlled' mode the post-effect is applied before final re-rendering\n    // which cause a broken behavior: for e.g. when it is needed to focus submenu trigger on ESC.\n    // TODO: all DOM post-effects should be applied at componentDidMount & componentDidUpdated stages.\n    onStateChanged && onStateChanged();\n    _.invoke(props, 'onMenuOpenChange', e, {\n      ...props,\n      menuOpen: newValue,\n    });\n  };\n\n  const outsideClickHandler = (getRefs: GetRefs) => (e: MouseEvent) => {\n    const isItemClick = doesNodeContainClick(itemRef.current, e, context.target);\n    const isNestedClick = _.some(getRefs(), (childRef: NodeRef) => {\n      return doesNodeContainClick(childRef.current as HTMLElement, e, context.target);\n    });\n    const isInside = isItemClick || isNestedClick;\n\n    if (!isInside) {\n      trySetMenuOpen(false, e);\n    }\n  };\n\n  const handleMenuOverrides = (predefinedProps: ToolbarMenuProps) => ({\n    onItemClick: (e, itemProps: ToolbarMenuItemProps) => {\n      const { popup, menuOpen } = itemProps;\n      _.invoke(predefinedProps, 'onItemClick', e, itemProps);\n      if (popup) {\n        return;\n      }\n\n      trySetMenuOpen(menuOpen, e);\n      if (!menuOpen) {\n        _.invoke(itemRef.current, 'focus');\n      }\n    },\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (menu) {\n      // the menuItem element was clicked => toggle the open/close and stop propagation\n      trySetMenuOpen(!menuOpen, e);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    if (popup) {\n      e.stopPropagation();\n      e.preventDefault();\n      return;\n    }\n\n    _.invoke(props, 'onClick', e, props);\n  };\n\n  const element = (\n    <ElementType\n      {...getA11yProps('root', {\n        className: classes.root,\n        onClick: handleClick,\n        disabled,\n        ...unhandledProps,\n      })}\n    >\n      {childrenExist(children) ? (\n        children\n      ) : (\n        <>\n          {Box.create(icon, {\n            defaultProps: () => ({\n              styles: resolvedStyles.icon,\n            }),\n          })}\n          {content}\n          {active &&\n            Box.create(activeIndicator, {\n              defaultProps: () => ({\n                as: 'span',\n                className: ToolbarMenuItem.slotClassNames.activeIndicator,\n                styles: resolvedStyles.activeIndicator,\n                accessibility: indicatorBehavior,\n              }),\n            })}\n          {menu &&\n            Box.create(submenuIndicator, {\n              defaultProps: () => ({\n                as: 'span',\n                className: ToolbarMenuItem.slotClassNames.submenuIndicator,\n                styles: resolvedStyles.submenuIndicator,\n                accessibility: indicatorBehavior,\n              }),\n            })}\n        </>\n      )}\n    </ElementType>\n  );\n\n  const hasChildren = childrenExist(children);\n\n  if (popup && !hasChildren) {\n    const popupElement = Popup.create(popup, {\n      defaultProps: () => ({\n        trapFocus: true,\n        onOpenChange: e => {\n          e.stopPropagation();\n        },\n      }),\n      overrideProps: {\n        trigger: element,\n        children: undefined, // force-reset `children` defined for `Popup` as it collides with the `trigger`\n      },\n    });\n    setEnd();\n\n    return popupElement;\n  }\n\n  const menuItemInner = hasChildren ? (children as React.ReactElement) : <Ref innerRef={itemRef}>{element}</Ref>;\n\n  const maybeSubmenu =\n    menu && menuOpen ? (\n      <Unstable_NestingAuto>\n        {(getRefs, nestingRef) => (\n          <>\n            <Ref\n              innerRef={(node: HTMLElement) => {\n                nestingRef.current = node;\n                menuRef.current = node;\n              }}\n            >\n              <Popper\n                align=\"top\"\n                position={context.rtl ? 'before' : 'after'}\n                targetRef={itemRef}\n                {...getPopperPropsFromShorthand(menu)}\n              >\n                <ToolbarVariablesProvider value={mergedVariables}>\n                  {ToolbarMenu.create(menu, {\n                    defaultProps: () => ({\n                      className: ToolbarMenuItem.slotClassNames.submenu,\n                      styles: resolvedStyles.menu,\n                      submenu: true,\n                      submenuIndicator,\n                    }),\n                    overrideProps: handleMenuOverrides,\n                  })}\n                </ToolbarVariablesProvider>\n              </Popper>\n            </Ref>\n            <EventListener listener={outsideClickHandler(getRefs)} target={context.target} type=\"click\" />\n          </>\n        )}\n      </Unstable_NestingAuto>\n    ) : null;\n\n  if (!wrapper) {\n    setEnd();\n    return menuItemInner;\n  }\n\n  const wrapperElement = Box.create(wrapper, {\n    defaultProps: () =>\n      getA11yProps('wrapper', {\n        className: cx(ToolbarMenuItem.slotClassNames.wrapper, classes.wrapper),\n      }),\n    overrideProps: () => ({\n      children: (\n        <>\n          {menuItemInner}\n          {maybeSubmenu}\n        </>\n      ),\n    }),\n  });\n  setEnd();\n\n  return wrapperElement;\n};\n\nToolbarMenuItem.displayName = 'ToolbarMenuItem';\n\nToolbarMenuItem.className = 'ui-toolbar__menuitem';\n\nToolbarMenuItem.slotClassNames = {\n  activeIndicator: `${ToolbarMenuItem.className}__activeIndicator`,\n  wrapper: `${ToolbarMenuItem.className}__wrapper`,\n  submenu: `${ToolbarMenuItem.className}__submenu`,\n  submenuIndicator: `${ToolbarMenuItem.className}__submenuIndicator`,\n};\n\nToolbarMenuItem.propTypes = {\n  ...commonPropTypes.createCommon(),\n  active: PropTypes.bool,\n  activeIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultMenuOpen: PropTypes.bool,\n  disabled: PropTypes.bool,\n  icon: customPropTypes.shorthandAllowingChildren,\n  index: PropTypes.number,\n  submenuIndicator: customPropTypes.shorthandAllowingChildren,\n  inSubmenu: PropTypes.bool,\n  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  menuOpen: PropTypes.bool,\n  onClick: PropTypes.func,\n  onMenuOpenChange: PropTypes.func,\n  popup: PropTypes.oneOfType([\n    PropTypes.shape({\n      ...Popup.propTypes,\n      trigger: customPropTypes.never,\n      children: customPropTypes.never,\n    }),\n    PropTypes.string,\n  ]),\n  wrapper: customPropTypes.itemShorthand,\n};\n\nToolbarMenuItem.handledProps = Object.keys(ToolbarMenuItem.propTypes) as any;\n\nToolbarMenuItem.defaultProps = {\n  as: 'button',\n  accessibility: toolbarMenuItemBehavior,\n  wrapper: { as: 'li' },\n  activeIndicator: {},\n  submenuIndicator: {},\n};\n\nToolbarMenuItem.create = createShorthandFactory({\n  Component: ToolbarMenuItem,\n  mappedProp: 'content',\n});\n\n/**\n * A ToolbarMenuItem renders ToolbarMenu item as button.\n */\nexport default withSafeTypeForAs<typeof ToolbarMenuItem, ToolbarMenuItemProps, 'button'>(ToolbarMenuItem);\n"]},"metadata":{},"sourceType":"module"}