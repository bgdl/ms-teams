{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _merge from \"lodash/merge\";\nimport _isEqual from \"lodash/isEqual\";\nimport { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport { Ref, isRefObject } from '@fluentui/react-component-ref';\nimport * as _PopperJS from 'popper.js';\nimport * as React from 'react';\nimport isBrowser from '../isBrowser';\nimport getScrollParent from './getScrollParent';\nimport { getPlacement, applyRtlToOffset } from './positioningHelper';\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n *\n * Copied from https://github.com/apollographql/react-apollo/blob/master/packages/hooks/src/utils/useDeepMemo.ts.\n */\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = React.useRef();\n\n  if (!ref.current || !_isEqual(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n} // `popper.js` has a UMD build without `.default`, it breaks CJS builds:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\n\n\nvar createPopper = function createPopper(reference, popper, options) {\n  var instance = new (_PopperJS.default || _PopperJS)(reference, popper, Object.assign({}, options, {\n    eventsEnabled: false\n  }));\n  var originalUpdate = instance.update;\n\n  instance.update = function () {\n    // Fix Popper.js initial positioning display issue\n    // https://github.com/popperjs/popper.js/issues/457#issuecomment-367692177\n    popper.style.left = '0';\n    popper.style.top = '0';\n    originalUpdate();\n  };\n\n  var actualWindow = popper.ownerDocument.defaultView;\n\n  instance.scheduleUpdate = function () {\n    return actualWindow.requestAnimationFrame(instance.update);\n  };\n\n  instance.enableEventListeners();\n  return instance;\n};\n/**\n * Popper relies on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\n */\n\n\nvar Popper = function Popper(props) {\n  var align = props.align,\n      children = props.children,\n      enabled = props.enabled,\n      flipBoundary = props.flipBoundary,\n      userModifiers = props.modifiers,\n      offset = props.offset,\n      overflowBoundary = props.overflowBoundary,\n      pointerTargetRef = props.pointerTargetRef,\n      position = props.position,\n      positionFixed = props.positionFixed,\n      _props$positioningDep = props.positioningDependencies,\n      positioningDependencies = _props$positioningDep === void 0 ? [] : _props$positioningDep,\n      rtl = props.rtl,\n      targetRef = props.targetRef,\n      unstable_pinned = props.unstable_pinned;\n  var proposedPlacement = getPlacement({\n    align: align,\n    position: position,\n    rtl: rtl\n  });\n  var popperRef = React.useRef();\n  var contentRef = React.useRef(null);\n  var latestPlacement = React.useRef(proposedPlacement);\n\n  var _React$useState = React.useState(proposedPlacement),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      computedPlacement = _React$useState2[0],\n      setComputedPlacement = _React$useState2[1];\n\n  var hasDocument = isBrowser();\n  var hasScrollableElement = React.useMemo(function () {\n    if (hasDocument) {\n      var scrollParentElement = getScrollParent(contentRef.current);\n      return scrollParentElement !== scrollParentElement.ownerDocument.body;\n    }\n\n    return false;\n  }, [contentRef, hasDocument]); // Is a broken dependency and can cause potential bugs, we should rethink this as all other refs\n  // in this component.\n\n  var computedModifiers = useDeepMemo(function () {\n    return _merge(\n    /**\n     * This prevents blurrines in chrome, when the coordinates are odd numbers alternative\n     * would be to use `fn` and manipulate the computed style or ask popper to fix it but\n     * since there is presumably only handful of poppers displayed on the page, the\n     * performance impact should be minimal.\n     */\n    {\n      computeStyle: {\n        gpuAcceleration: false\n      }\n    }, {\n      flip: {\n        padding: 0,\n        flipVariationsByContent: true\n      }\n    }, {\n      preventOverflow: {\n        padding: 0\n      }\n    }, offset && {\n      offset: {\n        offset: rtl ? applyRtlToOffset(offset, position) : offset\n      },\n      keepTogether: {\n        enabled: false\n      }\n    },\n    /**\n     * When the popper box is placed in the context of a scrollable element, we need to set\n     * preventOverflow.escapeWithReference to true and flip.boundariesElement to 'scrollParent'\n     * (default is 'viewport') so that the popper box will stick with the targetRef when we\n     * scroll targetRef out of the viewport.\n     */\n    hasScrollableElement && {\n      preventOverflow: {\n        escapeWithReference: true\n      },\n      flip: {\n        boundariesElement: 'scrollParent'\n      }\n    }, flipBoundary && {\n      flip: {\n        boundariesElement: flipBoundary\n      }\n    }, overflowBoundary && {\n      preventOverflow: {\n        boundariesElement: overflowBoundary\n      }\n    }, userModifiers,\n    /**\n     * unstable_pinned disables the flip modifier by setting flip.enabled to false; this\n     * disables automatic repositioning of the popper box; it will always be placed according to\n     * the values of `align` and `position` props, regardless of the size of the component, the\n     * reference element or the viewport.\n     */\n    unstable_pinned && {\n      flip: {\n        enabled: false\n      }\n    });\n  }, [hasScrollableElement, position, offset, rtl, unstable_pinned, userModifiers]);\n  var scheduleUpdate = React.useCallback(function () {\n    if (popperRef.current) {\n      popperRef.current.scheduleUpdate();\n    }\n  }, []);\n  var destroyInstance = React.useCallback(function () {\n    if (popperRef.current) {\n      popperRef.current.destroy();\n\n      if (popperRef.current.popper) {\n        // Popper keeps a reference to the DOM node, which needs to be cleaned up\n        // temporarily fix it here until fixed properly in popper\n        popperRef.current.popper = null;\n      }\n\n      popperRef.current = null;\n    }\n  }, []);\n  var createInstance = React.useCallback(function () {\n    destroyInstance();\n    var reference = targetRef && isRefObject(targetRef) ? targetRef.current : targetRef;\n\n    if (!enabled || !reference || !contentRef.current) {\n      return;\n    }\n\n    var hasPointer = !!(pointerTargetRef && pointerTargetRef.current);\n\n    var handleUpdate = function handleUpdate(data) {\n      // PopperJS performs computations that might update the computed placement: auto positioning, flipping the\n      // placement in case the popper box should be rendered at the edge of the viewport and does not fit\n      if (data.placement !== latestPlacement.current) {\n        latestPlacement.current = data.placement;\n        setComputedPlacement(data.placement);\n      }\n    };\n\n    var options = {\n      placement: proposedPlacement,\n      positionFixed: positionFixed,\n      modifiers: Object.assign({}, computedModifiers, {\n        /**\n         * This modifier is necessary in order to render the pointer. Refs are resolved in effects, so it can't be\n         * placed under computed modifiers. Deep merge is not required as this modifier has only these properties.\n         * `arrow` modifier also requires `keepTogether`.\n         */\n        keepTogether: {\n          enabled: hasPointer\n        },\n        arrow: {\n          enabled: hasPointer,\n          element: pointerTargetRef && pointerTargetRef.current\n        }\n      }),\n      onCreate: handleUpdate,\n      onUpdate: handleUpdate\n    };\n    popperRef.current = createPopper(reference, contentRef.current, options);\n  }, [// TODO review dependencies for popperHasScrollableParent\n  enabled, computedModifiers, pointerTargetRef, positionFixed, proposedPlacement, targetRef, unstable_pinned]);\n  useIsomorphicLayoutEffect(function () {\n    createInstance();\n    return destroyInstance;\n  }, [createInstance]);\n  React.useEffect(scheduleUpdate, [].concat(_toConsumableArray(positioningDependencies), [computedPlacement]));\n  var child = typeof children === 'function' ? children({\n    placement: computedPlacement,\n    scheduleUpdate: scheduleUpdate\n  }) : children;\n  return child ? React.createElement(Ref, {\n    innerRef: contentRef\n  }, React.Children.only(child)) : null;\n};\n\nPopper.defaultProps = {\n  enabled: true,\n  positionFixed: false,\n  positioningDependencies: []\n};\nexport default Popper;","map":{"version":3,"sources":["utils/positioner/Popper.tsx"],"names":["ref","React","key","value","memoFn","createPopper","instance","_PopperJS","eventsEnabled","originalUpdate","popper","actualWindow","Popper","align","children","enabled","flipBoundary","userModifiers","offset","overflowBoundary","pointerTargetRef","position","positionFixed","positioningDependencies","rtl","targetRef","unstable_pinned","props","proposedPlacement","getPlacement","popperRef","contentRef","latestPlacement","computedPlacement","setComputedPlacement","hasDocument","isBrowser","hasScrollableElement","scrollParentElement","getScrollParent","computedModifiers","useDeepMemo","computeStyle","gpuAcceleration","flip","padding","flipVariationsByContent","preventOverflow","applyRtlToOffset","keepTogether","escapeWithReference","boundariesElement","scheduleUpdate","destroyInstance","createInstance","reference","isRefObject","hasPointer","handleUpdate","data","options","placement","modifiers","arrow","element","current","onCreate","onUpdate","useIsomorphicLayoutEffect","child"],"mappings":";;;;AAAA,SAAA,yBAAA,QAAA,0BAAA;AACA,SAAA,GAAA,EAAA,WAAA,QAAA,+BAAA;AAEA,OAAiB,KAAjB,SAAA,MAAA,WAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AACA,SAAA,YAAA,EAAA,gBAAA,QAAA,qBAAA;AAGA;;;;;;;;;;AASA,SAAA,WAAA,CAAA,MAAA,EAAA,GAAA,EAA4E;AAC1E,MAAMA,GAAG,GAAGC,KAAK,CAAjB,MAAYA,EAAZ;;AAEA,MAAI,CAACD,GAAG,CAAJ,OAAA,IAAgB,CAAC,QAAA,CAAA,GAAA,EAAeA,GAAG,CAAHA,OAAAA,CAApC,GAAqB,CAArB,EAAsD;AACpDA,IAAAA,GAAG,CAAHA,OAAAA,GAAc;AAAEE,MAAAA,GAAG,EAAL,GAAA;AAAOC,MAAAA,KAAK,EAAEC,MAAM;AAApB,KAAdJ;AACD;;AAED,SAAOA,GAAG,CAAHA,OAAAA,CAAP,KAAA;EAGF;AACA;;;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAAA,SAAA,EAAA,MAAA,EAAA,OAAA,EAIN;AACb,MAAMC,QAAQ,GAAG,KAAMC,SAAD,CAAA,OAACA,IAAN,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEfC,IAAAA,aAAa,EAAE;AAFA,GAAA,CAAA,CAAjB;AAKA,MAAMC,cAAc,GAAGH,QAAQ,CAA/B,MAAA;;AACAA,EAAAA,QAAQ,CAARA,MAAAA,GAAkB,YAAM;AACtB;AACA;AACAI,IAAAA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,GAAAA,GAAAA;AACAA,IAAAA,MAAM,CAANA,KAAAA,CAAAA,GAAAA,GAAAA,GAAAA;AAEAD,IAAAA,cAAc;AANhBH,GAAAA;;AASA,MAAMK,YAAY,GAAGD,MAAM,CAANA,aAAAA,CAArB,WAAA;;AACAJ,EAAAA,QAAQ,CAARA,cAAAA,GAA0B,YAAA;AAAA,WAAMK,YAAY,CAAZA,qBAAAA,CAAmCL,QAAQ,CAAjD,MAAMK,CAAN;AAA1BL,GAAAA;;AACAA,EAAAA,QAAQ,CAARA,oBAAAA;AAEA,SAAA,QAAA;AAxBF,CAAA;AA2BA;;;;;AAGA,IAAMM,MAA4C,GAAG,SAA/CA,MAA+C,CAAA,KAAA,EAAS;AAAA,MAE1DC,KAF0D,GAgBxDc,KAhBwD,CAAA,KAAA;AAAA,MAG1Db,QAH0D,GAgBxDa,KAhBwD,CAAA,QAAA;AAAA,MAI1DZ,OAJ0D,GAgBxDY,KAhBwD,CAAA,OAAA;AAAA,MAK1DX,YAL0D,GAgBxDW,KAhBwD,CAAA,YAAA;AAAA,MAM/CV,aAN+C,GAgBxDU,KAhBwD,CAAA,SAAA;AAAA,MAO1DT,MAP0D,GAgBxDS,KAhBwD,CAAA,MAAA;AAAA,MAQ1DR,gBAR0D,GAgBxDQ,KAhBwD,CAAA,gBAAA;AAAA,MAS1DP,gBAT0D,GAgBxDO,KAhBwD,CAAA,gBAAA;AAAA,MAU1DN,QAV0D,GAgBxDM,KAhBwD,CAAA,QAAA;AAAA,MAW1DL,aAX0D,GAgBxDK,KAhBwD,CAAA,aAAA;AAAA,MAAA,qBAAA,GAgBxDA,KAhBwD,CAAA,uBAAA;AAAA,MAY1DJ,uBAZ0D,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,MAa1DC,GAb0D,GAgBxDG,KAhBwD,CAAA,GAAA;AAAA,MAc1DF,SAd0D,GAgBxDE,KAhBwD,CAAA,SAAA;AAAA,MAe1DD,eAf0D,GAgBxDC,KAhBwD,CAAA,eAAA;AAkB5D,MAAMC,iBAAiB,GAAGC,YAAY,CAAC;AAAEhB,IAAAA,KAAK,EAAP,KAAA;AAASQ,IAAAA,QAAQ,EAAjB,QAAA;AAAmBG,IAAAA,GAAG,EAAHA;AAAnB,GAAD,CAAtC;AAEA,MAAMM,SAAS,GAAG7B,KAAK,CAAvB,MAAkBA,EAAlB;AACA,MAAM8B,UAAU,GAAG9B,KAAK,CAALA,MAAAA,CAAnB,IAAmBA,CAAnB;AAEA,MAAM+B,eAAe,GAAG/B,KAAK,CAALA,MAAAA,CAAxB,iBAAwBA,CAAxB;;AAvB4D,MAAA,eAAA,GAwBVA,KAAK,CAALA,QAAAA,CAxBU,iBAwBVA,CAxBU;AAAA,MAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAwBrDgC,iBAxBqD,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAwBlCC,oBAxBkC,GAAA,gBAAA,CAAA,CAAA,CAAA;;AA0B5D,MAAMC,WAAW,GAAGC,SAApB,EAAA;AACA,MAAMC,oBAAoB,GAAG,KAAK,CAAL,OAAA,CAAc,YAAM;AAC/C,QAAA,WAAA,EAAiB;AACf,UAAMC,mBAAmB,GAAGC,eAAe,CAACR,UAAU,CAAtD,OAA2C,CAA3C;AAEA,aAAOO,mBAAmB,KAAKA,mBAAmB,CAAnBA,aAAAA,CAA/B,IAAA;AACD;;AAED,WAAA,KAAA;AAP2B,GAAA,EAQ1B,CAAA,UAAA,EAnCyD,WAmCzD,CAR0B,CAA7B,CA3B4D,CAoC5D;AACA;;AAEA,MAAME,iBAAqC,GAAGC,WAAW,CACvD,YAAA;AAAA,WACE,MAAA;AACE;;;;;;AAMA;AAAEC,MAAAA,YAAY,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB;AAAhB,KAPF,EASE;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAT,CAAA;AAAcC,QAAAA,uBAAuB,EAAE;AAAvC;AAAR,KATF,EAUE;AAAEC,MAAAA,eAAe,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX;AAAnB,KAVF,EAYE3B,MAAM,IAAI;AACRA,MAAAA,MAAM,EAAE;AAAEA,QAAAA,MAAM,EAAEM,GAAG,GAAGwB,gBAAgB,CAAA,MAAA,EAAnB,QAAmB,CAAnB,GAAwC9B;AAArD,OADA;AAER+B,MAAAA,YAAY,EAAE;AAAElC,QAAAA,OAAO,EAAE;AAAX;AAFN,KAZZ;AAiBE;;;;;;AAMAsB,IAAAA,oBAAoB,IAAI;AACtBU,MAAAA,eAAe,EAAE;AAAEG,QAAAA,mBAAmB,EAAE;AAAvB,OADK;AAEtBN,MAAAA,IAAI,EAAE;AAAEO,QAAAA,iBAAiB,EAAE;AAArB;AAFgB,KAvB1B,EA4BEnC,YAAY,IAAI;AAAE4B,MAAAA,IAAI,EAAE;AAAEO,QAAAA,iBAAiB,EAAEnC;AAArB;AAAR,KA5BlB,EA6BEG,gBAAgB,IAAI;AAAE4B,MAAAA,eAAe,EAAE;AAAEI,QAAAA,iBAAiB,EAAEhC;AAArB;AAAnB,KA7BtB,EAAA,aAAA;AAiCE;;;;;;AAMAO,IAAAA,eAAe,IAAI;AAAEkB,MAAAA,IAAI,EAAE;AAAE7B,QAAAA,OAAO,EAAE;AAAX;AAAR,KAvCrB,CADF;AADuD,GAAA,EA2CvD,CAAA,oBAAA,EAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,eAAA,EA3CF,aA2CE,CA3CuD,CAAzD;AA8CA,MAAMqC,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC7C,QAAItB,SAAS,CAAb,OAAA,EAAuB;AACrBA,MAAAA,SAAS,CAATA,OAAAA,CAAAA,cAAAA;AACD;AAHoB,GAAA,EAAvB,EAAuB,CAAvB;AAMA,MAAMuB,eAAe,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC9C,QAAIvB,SAAS,CAAb,OAAA,EAAuB;AACrBA,MAAAA,SAAS,CAATA,OAAAA,CAAAA,OAAAA;;AACA,UAAIA,SAAS,CAATA,OAAAA,CAAJ,MAAA,EAA8B;AAC5B;AACA;AACAA,QAAAA,SAAS,CAATA,OAAAA,CAAAA,MAAAA,GAAAA,IAAAA;AACD;;AACDA,MAAAA,SAAS,CAATA,OAAAA,GAAAA,IAAAA;AACD;AATqB,GAAA,EAAxB,EAAwB,CAAxB;AAYA,MAAMwB,cAAc,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AAC7CD,IAAAA,eAAe;AAEf,QAAME,SAAS,GACb9B,SAAS,IAAI+B,WAAW,CAAxB/B,SAAwB,CAAxBA,GACKA,SAAD,CADJA,OAAAA,GADF,SAAA;;AAKA,QAAI,CAAA,OAAA,IAAY,CAAZ,SAAA,IAA0B,CAACM,UAAU,CAAzC,OAAA,EAAmD;AACjD;AACD;;AAED,QAAM0B,UAAU,GAAG,CAAC,EAAErC,gBAAgB,IAAIA,gBAAgB,CAA1D,OAAoB,CAApB;;AACA,QAAMsC,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAyB;AAC5C;AACA;AACA,UAAIC,IAAI,CAAJA,SAAAA,KAAmB3B,eAAe,CAAtC,OAAA,EAAgD;AAC9CA,QAAAA,eAAe,CAAfA,OAAAA,GAA0B2B,IAAI,CAA9B3B,SAAAA;AACAE,QAAAA,oBAAoB,CAACyB,IAAI,CAAzBzB,SAAoB,CAApBA;AACD;AANH,KAAA;;AASA,QAAM0B,OAA+B,GAAG;AACtCC,MAAAA,SAAS,EAD6B,iBAAA;AAEtCvC,MAAAA,aAAa,EAFyB,aAAA;AAGtCwC,MAAAA,SAAS,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,iBAAA,EAAA;AAGP;;;;;AAKAb,QAAAA,YAAY,EAAE;AAAElC,UAAAA,OAAO,EAAE0C;AAAX,SARP;AASPM,QAAAA,KAAK,EAAE;AACLhD,UAAAA,OAAO,EADF,UAAA;AAELiD,UAAAA,OAAO,EAAE5C,gBAAgB,IAAIA,gBAAgB,CAAC6C;AAFzC;AATA,OAAA,CAH6B;AAiBtCC,MAAAA,QAAQ,EAjB8B,YAAA;AAkBtCC,MAAAA,QAAQ,EAAET;AAlB4B,KAAxC;AAqBA5B,IAAAA,SAAS,CAATA,OAAAA,GAAoBzB,YAAY,CAAA,SAAA,EAAY0B,UAAU,CAAtB,OAAA,EAAhCD,OAAgC,CAAhCA;AA3CqB,GAAA,EA4CpB,CACD;AADC,EAAA,OAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,SAAA,EA5CH,eA4CG,CA5CoB,CAAvB;AAuDAsC,EAAAA,yBAAyB,CAAC,YAAM;AAC9Bd,IAAAA,cAAc;AACd,WAAA,eAAA;AAFuB,GAAA,EAGtB,CAHHc,cAGG,CAHsB,CAAzBA;AAKAnE,EAAAA,KAAK,CAALA,SAAAA,CAAAA,cAAAA,EAAAA,GAAAA,MAAAA,CAAAA,kBAAAA,CAAAA,uBAAAA,CAAAA,EAAAA,CAAAA,iBAAAA,CAAAA,CAAAA;AAEA,MAAMoE,KAAK,GACT,OAAA,QAAA,KAAA,UAAA,GACIvD,QAAQ,CAAC;AAAE+C,IAAAA,SAAS,EAAX,iBAAA;AAAgCT,IAAAA,cAAc,EAAdA;AAAhC,GAAD,CADZ,GADF,QAAA;AAKA,SAAOiB,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,QAAQ,EAAEtC;AAAf,GAAA,EAA4B9B,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAA/B,KAA+BA,CAA5B,CAAH,GAAZ,IAAA;AA1KF,CAAA;;AA6KAW,MAAM,CAANA,YAAAA,GAAsB;AACpBG,EAAAA,OAAO,EADa,IAAA;AAEpBO,EAAAA,aAAa,EAFO,KAAA;AAGpBC,EAAAA,uBAAuB,EAAE;AAHL,CAAtBX;AAMA,eAAA,MAAA","sourcesContent":["import { useIsomorphicLayoutEffect } from '@fluentui/react-bindings';\nimport { Ref, isRefObject } from '@fluentui/react-component-ref';\nimport * as _ from 'lodash';\nimport PopperJS, * as _PopperJS from 'popper.js';\nimport * as React from 'react';\n\nimport isBrowser from '../isBrowser';\nimport getScrollParent from './getScrollParent';\nimport { getPlacement, applyRtlToOffset } from './positioningHelper';\nimport { PopperProps } from './types';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n *\n * Copied from https://github.com/apollographql/react-apollo/blob/master/packages/hooks/src/utils/useDeepMemo.ts.\n */\nfunction useDeepMemo<TKey, TValue>(memoFn: () => TValue, key: TKey): TValue {\n  const ref = React.useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !_.isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n\n// `popper.js` has a UMD build without `.default`, it breaks CJS builds:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\nconst createPopper = (\n  reference: Element | _PopperJS.ReferenceObject,\n  popper: HTMLElement,\n  options?: PopperJS.PopperOptions,\n): PopperJS => {\n  const instance = new ((_PopperJS as any).default || _PopperJS)(reference, popper, {\n    ...options,\n    eventsEnabled: false,\n  });\n\n  const originalUpdate = instance.update;\n  instance.update = () => {\n    // Fix Popper.js initial positioning display issue\n    // https://github.com/popperjs/popper.js/issues/457#issuecomment-367692177\n    popper.style.left = '0';\n    popper.style.top = '0';\n\n    originalUpdate();\n  };\n\n  const actualWindow = popper.ownerDocument.defaultView;\n  instance.scheduleUpdate = () => actualWindow.requestAnimationFrame(instance.update);\n  instance.enableEventListeners();\n\n  return instance;\n};\n\n/**\n * Popper relies on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.\n */\nconst Popper: React.FunctionComponent<PopperProps> = props => {\n  const {\n    align,\n    children,\n    enabled,\n    flipBoundary,\n    modifiers: userModifiers,\n    offset,\n    overflowBoundary,\n    pointerTargetRef,\n    position,\n    positionFixed,\n    positioningDependencies = [],\n    rtl,\n    targetRef,\n    unstable_pinned,\n  } = props;\n\n  const proposedPlacement = getPlacement({ align, position, rtl });\n\n  const popperRef = React.useRef<PopperJS>();\n  const contentRef = React.useRef<HTMLElement>(null);\n\n  const latestPlacement = React.useRef<PopperJS.Placement>(proposedPlacement);\n  const [computedPlacement, setComputedPlacement] = React.useState<PopperJS.Placement>(proposedPlacement);\n\n  const hasDocument = isBrowser();\n  const hasScrollableElement = React.useMemo(() => {\n    if (hasDocument) {\n      const scrollParentElement = getScrollParent(contentRef.current);\n\n      return scrollParentElement !== scrollParentElement.ownerDocument.body;\n    }\n\n    return false;\n  }, [contentRef, hasDocument]);\n  // Is a broken dependency and can cause potential bugs, we should rethink this as all other refs\n  // in this component.\n\n  const computedModifiers: PopperJS.Modifiers = useDeepMemo(\n    () =>\n      _.merge(\n        /**\n         * This prevents blurrines in chrome, when the coordinates are odd numbers alternative\n         * would be to use `fn` and manipulate the computed style or ask popper to fix it but\n         * since there is presumably only handful of poppers displayed on the page, the\n         * performance impact should be minimal.\n         */\n        { computeStyle: { gpuAcceleration: false } },\n\n        { flip: { padding: 0, flipVariationsByContent: true } },\n        { preventOverflow: { padding: 0 } },\n\n        offset && {\n          offset: { offset: rtl ? applyRtlToOffset(offset, position) : offset },\n          keepTogether: { enabled: false },\n        },\n\n        /**\n         * When the popper box is placed in the context of a scrollable element, we need to set\n         * preventOverflow.escapeWithReference to true and flip.boundariesElement to 'scrollParent'\n         * (default is 'viewport') so that the popper box will stick with the targetRef when we\n         * scroll targetRef out of the viewport.\n         */\n        hasScrollableElement && {\n          preventOverflow: { escapeWithReference: true },\n          flip: { boundariesElement: 'scrollParent' },\n        },\n\n        flipBoundary && { flip: { boundariesElement: flipBoundary } },\n        overflowBoundary && { preventOverflow: { boundariesElement: overflowBoundary } },\n\n        userModifiers,\n\n        /**\n         * unstable_pinned disables the flip modifier by setting flip.enabled to false; this\n         * disables automatic repositioning of the popper box; it will always be placed according to\n         * the values of `align` and `position` props, regardless of the size of the component, the\n         * reference element or the viewport.\n         */\n        unstable_pinned && { flip: { enabled: false } },\n      ),\n    [hasScrollableElement, position, offset, rtl, unstable_pinned, userModifiers],\n  );\n\n  const scheduleUpdate = React.useCallback(() => {\n    if (popperRef.current) {\n      popperRef.current.scheduleUpdate();\n    }\n  }, []);\n\n  const destroyInstance = React.useCallback(() => {\n    if (popperRef.current) {\n      popperRef.current.destroy();\n      if (popperRef.current.popper) {\n        // Popper keeps a reference to the DOM node, which needs to be cleaned up\n        // temporarily fix it here until fixed properly in popper\n        popperRef.current.popper = null;\n      }\n      popperRef.current = null;\n    }\n  }, []);\n\n  const createInstance = React.useCallback(() => {\n    destroyInstance();\n\n    const reference =\n      targetRef && isRefObject(targetRef)\n        ? (targetRef as React.RefObject<Element>).current\n        : (targetRef as _PopperJS.ReferenceObject);\n\n    if (!enabled || !reference || !contentRef.current) {\n      return;\n    }\n\n    const hasPointer = !!(pointerTargetRef && pointerTargetRef.current);\n    const handleUpdate = (data: PopperJS.Data) => {\n      // PopperJS performs computations that might update the computed placement: auto positioning, flipping the\n      // placement in case the popper box should be rendered at the edge of the viewport and does not fit\n      if (data.placement !== latestPlacement.current) {\n        latestPlacement.current = data.placement;\n        setComputedPlacement(data.placement);\n      }\n    };\n\n    const options: PopperJS.PopperOptions = {\n      placement: proposedPlacement,\n      positionFixed,\n      modifiers: {\n        ...computedModifiers,\n\n        /**\n         * This modifier is necessary in order to render the pointer. Refs are resolved in effects, so it can't be\n         * placed under computed modifiers. Deep merge is not required as this modifier has only these properties.\n         * `arrow` modifier also requires `keepTogether`.\n         */\n        keepTogether: { enabled: hasPointer },\n        arrow: {\n          enabled: hasPointer,\n          element: pointerTargetRef && pointerTargetRef.current,\n        },\n      },\n      onCreate: handleUpdate,\n      onUpdate: handleUpdate,\n    };\n\n    popperRef.current = createPopper(reference, contentRef.current, options);\n  }, [\n    // TODO review dependencies for popperHasScrollableParent\n    enabled,\n    computedModifiers,\n    pointerTargetRef,\n    positionFixed,\n    proposedPlacement,\n    targetRef,\n    unstable_pinned,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    createInstance();\n    return destroyInstance;\n  }, [createInstance]);\n\n  React.useEffect(scheduleUpdate, [...positioningDependencies, computedPlacement]);\n\n  const child =\n    typeof children === 'function'\n      ? children({ placement: computedPlacement, scheduleUpdate })\n      : (children as React.ReactElement);\n\n  return child ? <Ref innerRef={contentRef}>{React.Children.only(child)}</Ref> : null;\n};\n\nPopper.defaultProps = {\n  enabled: true,\n  positionFixed: false,\n  positioningDependencies: [],\n};\n\nexport default Popper;\n"]},"metadata":{},"sourceType":"module"}